

--- a/src/share/classes/java/nio/ByteBufferAs-X-Buffer.java.template	Mon Apr 06 03:06:09 2020 +0100
+++ b/src/share/classes/java/nio/ByteBufferAs-X-Buffer.java.template	Mon Mar 30 05:13:42 2020 +0100
@@ -72,7 +72,6 @@
     public $Type$Buffer slice() {
         int pos = this.position();
         int lim = this.limit();
-        assert (pos <= lim);
         int rem = (pos <= lim ? lim - pos : 0);
         int off = (pos << $LG_BYTES_PER_VALUE$) + offset;
         assert (off >= 0);
--- a/src/share/classes/java/nio/Direct-X-Buffer.java.template	Mon Apr 06 03:06:09 2020 +0100
+++ b/src/share/classes/java/nio/Direct-X-Buffer.java.template	Mon Mar 30 05:13:42 2020 +0100
@@ -206,7 +206,6 @@
     public $Type$Buffer slice() {
         int pos = this.position();
         int lim = this.limit();
-        assert (pos <= lim);
         int rem = (pos <= lim ? lim - pos : 0);
         int off = (pos << $LG_BYTES_PER_VALUE$);
         assert (off >= 0);
--- a/src/share/classes/java/nio/Heap-X-Buffer.java.template	Mon Apr 06 03:06:09 2020 +0100
+++ b/src/share/classes/java/nio/Heap-X-Buffer.java.template	Mon Mar 30 05:13:42 2020 +0100
@@ -95,13 +95,15 @@
     }
 
     public $Type$Buffer slice() {
-        int rem = this.remaining();
+        int pos = this.position();
+        int lim = this.limit();
+        int rem = (pos <= lim ? lim - pos : 0);
         return new Heap$Type$Buffer$RW$(hb,
                                         -1,
                                         0,
                                         rem,
                                         rem,
-                                        this.position() + offset);
+                                        pos + offset);
     }
 
     public $Type$Buffer duplicate() {
--- a/src/share/classes/java/nio/StringCharBuffer.java	Mon Apr 06 03:06:09 2020 +0100
+++ b/src/share/classes/java/nio/StringCharBuffer.java	Mon Mar 30 05:13:42 2020 +0100
@@ -42,12 +42,15 @@
     }
 
     public CharBuffer slice() {
+        int pos = this.position();
+        int lim = this.limit();
+        int rem = (pos <= lim ? lim - pos : 0);
         return new StringCharBuffer(str,
                                     -1,
                                     0,
-                                    this.remaining(),
-                                    this.remaining(),
-                                    offset + this.position());
+                                    rem,
+                                    rem,
+                                    offset + pos);
     }
 
     private StringCharBuffer(CharSequence s,

