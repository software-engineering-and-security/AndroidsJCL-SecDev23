	Comparing:
---------Patch Chunk Lines-----------------
0             desc.initNonProxy(readDesc, cl, resolveEx, readClassDesc(false));
1
2            if (cl != null) {
3                // Check that serial filtering has been done on the local class descriptor's superclass,
4                // in case it does not appear in the stream.
5
6                // Find the next super descriptor that has a local class descriptor.
7                // Descriptors for which there is no local class are ignored.
8                ObjectStreamClass superLocal = null;
9                for (ObjectStreamClass sDesc = desc.getSuperDesc(); sDesc != null; sDesc = sDesc.getSuperDesc()) {
10                    if ((superLocal = sDesc.getLocalDesc()) != null) {
11                        break;
12                    }
13                }
14
15                // Scan local descriptor superclasses for a match with the local descriptor of the super found above.
16                // For each super descriptor before the match, invoke the serial filter on the class.
17                // The filter is invoked for each class that has not already been filtered
18                // but would be filtered if the instance had been serialized by this Java runtime.
19                for (ObjectStreamClass lDesc = desc.getLocalDesc().getSuperDesc();
20                     lDesc != null && lDesc != superLocal;
21                     lDesc = lDesc.getSuperDesc()) {
22                    filterCheck(lDesc.forClass(), -1);
23                }
24            }
25         } finally {
-------------------------------------------
	is plus_lines  with
----------------Target Code--------------------
0    }
1
2    /**
3     * Method for cloning arrays in case of using unsharing reading
4     */
5    private static Object cloneArray(Object array) {
6        if (array instanceof Object[]) {
7            return ((Object[]) array).clone();
8        } else if (array instanceof boolean[]) {
9            return ((boolean[]) array).clone();
10        } else if (array instanceof byte[]) {
11            return ((byte[]) array).clone();
12        } else if (array instanceof char[]) {
13            return ((char[]) array).clone();
14        } else if (array instanceof double[]) {
15            return ((double[]) array).clone();
16        } else if (array instanceof float[]) {
17            return ((float[]) array).clone();
18        } else if (array instanceof int[]) {
19            return ((int[]) array).clone();
20        } else if (array instanceof long[]) {
21            return ((long[]) array).clone();
22        } else if (array instanceof short[]) {
23            return ((short[]) array).clone();
24        } else {
25            throw new AssertionError();
---------------------------------------------
Differences:	['0', '5', '8', '9', '10', '11', '12', '13', '14', '19', '20', '21', '22', '23', '24', '25']
--	--	--	--	--
Match Status: None

--------------for ref---------------------
--------------------------------------------
