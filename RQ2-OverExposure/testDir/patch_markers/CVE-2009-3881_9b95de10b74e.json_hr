{
    "lang/ClassLoader.java": {
        "chunk_0": {
            "plus_lines": [
                " /*",
                " * Copyright 1994-2009 Sun Microsystems, Inc.  All Rights Reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright 1994-2005 Sun Microsystems, Inc.  All Rights Reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_1": {
            "plus_lines": [],
            "minus_lines": [
                " ",
                "    // If initialization succeed this is set to true and security checks will",
                "    // succeed.  Otherwise the object is not initialized and the object is",
                "    // useless.",
                "    private boolean initialized = false;",
                "",
                "     // The parent class loader for delegation"
            ]
        },
        "chunk_2": {
            "plus_lines": [
                " ",
                "    private static Void checkCreateClassLoader() {",
                "\tSecurityManager security = System.getSecurityManager();",
                "\tif (security != null) {",
                "            security.checkCreateClassLoader();",
                "\t}",
                "        return null;",
                "    }",
                "",
                "    private ClassLoader(Void unused, ClassLoader parent) {",
                "        this.parent = parent;",
                "    }",
                "",
                "",
                "     /**"
            ],
            "minus_lines": []
        },
        "chunk_3": {
            "plus_lines": [
                "     protected ClassLoader(ClassLoader parent) {",
                "\tthis(checkCreateClassLoader(), parent);",
                "     }"
            ],
            "minus_lines": [
                "     protected ClassLoader(ClassLoader parent) {",
                "        SecurityManager security = System.getSecurityManager();",
                "        if (security != null) {",
                "            security.checkCreateClassLoader();",
                "        }",
                "        this.parent = parent;",
                "        initialized = true;",
                "     }"
            ]
        },
        "chunk_4": {
            "plus_lines": [
                "     protected ClassLoader() {",
                "\tthis(checkCreateClassLoader(), getSystemClassLoader());",
                "     }"
            ],
            "minus_lines": [
                "     protected ClassLoader() {",
                "        SecurityManager security = System.getSecurityManager();",
                "        if (security != null) {",
                "            security.checkCreateClassLoader();",
                "        }",
                "        this.parent = getSystemClassLoader();",
                "        initialized = true;",
                "     }"
            ]
        },
        "chunk_5": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "         protectionDomain = preDefineClass(name, protectionDomain);"
            ]
        },
        "chunk_6": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "",
                "         int len = b.remaining();"
            ]
        },
        "chunk_7": {
            "plus_lines": [],
            "minus_lines": [
                "     protected final void resolveClass(Class<?> c) {",
                "        check();",
                "         resolveClass0(c);"
            ]
        },
        "chunk_8": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "         ClassLoader system = getSystemClassLoader();"
            ]
        },
        "chunk_9": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "         if (!checkName(name))"
            ]
        },
        "chunk_10": {
            "plus_lines": [],
            "minus_lines": [
                " ",
                "    // Check to make sure the class loader has been initialized.",
                "    private void check() {",
                "        if (!initialized) {",
                "            throw new SecurityException(\"ClassLoader object not initialized\");",
                "        }",
                "    }",
                "",
                "     /**"
            ]
        },
        "chunk_11": {
            "plus_lines": [],
            "minus_lines": [
                "     protected final Class<?> findLoadedClass(String name) {",
                "        check();",
                "         if (!checkName(name))"
            ]
        },
        "chunk_12": {
            "plus_lines": [],
            "minus_lines": [
                "     protected final void setSigners(Class<?> c, Object[] signers) {",
                "        check();",
                "         c.setSigners(signers);"
            ]
        }
    },
    "ClassLoader/UninitializedParent.java": {
        "chunk_13": {
            "plus_lines": [
                "@@ -0,0 +1,68 @@",
                "/*",
                " * Copyright 2009 Sun Microsystems, Inc.  All Rights Reserved.",
                " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.",
                " *",
                " * This code is free software; you can redistribute it and/or modify it",
                " * under the terms of the GNU General Public License version 2 only, as",
                " * published by the Free Software Foundation.",
                " *",
                " * This code is distributed in the hope that it will be useful, but WITHOUT",
                " * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",
                " * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License",
                " * version 2 for more details (a copy is included in the LICENSE file that",
                " * accompanied this code).",
                " *",
                " * You should have received a copy of the GNU General Public License version",
                " * 2 along with this work; if not, write to the Free Software Foundation,",
                " * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.",
                " *",
                " * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,",
                " * CA 95054 USA or visit www.sun.com if you need additional information or",
                " * have any questions.",
                " */",
                "",
                "/*",
                " * @test",
                " * @bug 6636650",
                " * @summary Uninitialized class loaders should not be a parent of other",
                " *          class loaders.",
                " */",
                "",
                "",
                "import java.net.*;",
                "",
                "public class UninitializedParent {",
                "    private static ClassLoader loader;",
                "    public static void main(String[] args) throws Exception {",
                "        System.setSecurityManager(new SecurityManager());",
                "",
                "        // Create an uninitialized class loader",
                "        try {",
                "            new ClassLoader(null) {",
                "                @Override",
                "                protected void finalize() {",
                "                    loader = this;",
                "                }",
                "            };",
                "        } catch (SecurityException exc) {",
                "            // Expected",
                "        }",
                "        System.gc();",
                "        System.runFinalization();",
                "",
                "        // if 'loader' isn't null, need to ensure that it can't be used as",
                "        // parent",
                "        if (loader != null) {",
                "            try {",
                "                // Create a class loader with 'loader' being the parent",
                "                URLClassLoader child = URLClassLoader.newInstance",
                "                    (new URL[0], loader);",
                "                throw new RuntimeException(\"Test Failed!\");",
                "            } catch (SecurityException se) {",
                "                System.out.println(\"Test Passed: Exception thrown\"); ",
                "            }",
                "        } else {",
                "            System.out.println(\"Test Passed: Loader is null\");",
                "        }",
                "    }",
                "}",
                ""
            ],
            "minus_lines": []
        }
    }
}
