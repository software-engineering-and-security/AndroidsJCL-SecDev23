{"util/HashMap.java": {"chunk_0": {"plus_lines": [" /*", " * Copyright (c) 1997, 2021, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."], "minus_lines": [" /*", " * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."]}, "chunk_1": {"plus_lines": [" import java.io.InvalidObjectException;", "import java.io.ObjectInputStream;", " import java.io.Serializable;"], "minus_lines": []}, "chunk_2": {"plus_lines": ["      */", "    private void readObject(ObjectInputStream s)", "         throws IOException, ClassNotFoundException {"], "minus_lines": ["      */", "    private void readObject(java.io.ObjectInputStream s)", "         throws IOException, ClassNotFoundException {"]}, "chunk_3": {"plus_lines": ["         throws IOException, ClassNotFoundException {", "", "        ObjectInputStream.GetField fields = s.readFields();", "", "        // Read loadFactor (ignore threshold)", "        float lf = fields.get(\"loadFactor\", 0.75f);", "        if (lf <= 0 || Float.isNaN(lf))", "            throw new InvalidObjectException(\"Illegal load factor: \" + lf);", "", "        lf = Math.min(Math.max(0.25f, lf), 4.0f);", "        HashMap.UnsafeHolder.putLoadFactor(this, lf);", "", "         reinitialize();"], "minus_lines": ["         throws IOException, ClassNotFoundException {", "        // Read in the threshold (ignored), loadfactor, and any hidden stuff", "        s.defaultReadObject();", "         reinitialize();"]}, "chunk_4": {"plus_lines": ["         reinitialize();", "", "         s.readInt();                // Read and ignore number of buckets"], "minus_lines": ["         reinitialize();", "        if (loadFactor <= 0 || Float.isNaN(loadFactor))", "            throw new InvalidObjectException(\"Illegal load factor: \" +", "                                             loadFactor);", "         s.readInt();                // Read and ignore number of buckets"]}, "chunk_5": {"plus_lines": ["         int mappings = s.readInt(); // Read number of mappings (size)", "        if (mappings < 0) {", "            throw new InvalidObjectException(\"Illegal mappings count: \" + mappings);", "        } else if (mappings == 0) {", "            // use defaults", "        } else if (mappings > 0) {", "             float fc = (float)mappings / lf + 1.0f;"], "minus_lines": ["         int mappings = s.readInt(); // Read number of mappings (size)", "        if (mappings < 0)", "            throw new InvalidObjectException(\"Illegal mappings count: \" +", "                                             mappings);", "        else if (mappings > 0) { // (if zero, use defaults)", "            // Size the table using given load factor only if within", "            // range of 0.25...4.0", "            float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f);", "             float fc = (float)mappings / lf + 1.0f;"]}, "chunk_6": {"plus_lines": [" ", "    // Support for resetting final field during deserializing", "    private static final class UnsafeHolder {", "        private UnsafeHolder() { throw new InternalError(); }", "        private static final sun.misc.Unsafe unsafe", "                = sun.misc.Unsafe.getUnsafe();", "        private static final long LF_OFFSET;", "        static {", "            try {", "                LF_OFFSET = unsafe.objectFieldOffset(HashMap.class.getDeclaredField(\"loadFactor\"));", "            } catch (NoSuchFieldException nfe) {", "                throw new InternalError();", "            }", "        }", "        static void putLoadFactor(HashMap<?, ?> map, float lf) {", "            unsafe.putFloat(map, LF_OFFSET, lf);", "        }", "    }", "", "     /* ------------------------------------------------------------ */"], "minus_lines": []}}, "util/HashSet.java": {"chunk_7": {"plus_lines": [" /*", " * Copyright (c) 1997, 2021, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."], "minus_lines": [" /*", " * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."]}, "chunk_8": {"plus_lines": ["         throws java.io.IOException, ClassNotFoundException {", "        // Consume and ignore stream fields (currently zero).", "        s.readFields();", " "], "minus_lines": ["         throws java.io.IOException, ClassNotFoundException {", "        // Read in any hidden serialization magic", "        s.defaultReadObject();", " "]}, "chunk_9": {"plus_lines": ["         }", "        // Clamp load factor to range of 0.25...4.0.", "        loadFactor = Math.min(Math.max(0.25f, loadFactor), 4.0f);", " "], "minus_lines": []}, "chunk_10": {"plus_lines": ["         if (size < 0) {", "            throw new InvalidObjectException(\"Illegal size: \" + size);", "         }"], "minus_lines": ["         if (size < 0) {", "            throw new InvalidObjectException(\"Illegal size: \" +", "                                             size);", "         }"]}}}