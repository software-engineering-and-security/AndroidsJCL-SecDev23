{"ssl/HelloCookieManager.java": {"chunk_0": {"plus_lines": [" ", "            if (!MessageDigest.isEqual(headerCookie, prevHeadCookie)) {", "                 return false;"], "minus_lines": [" ", "            if (!Arrays.equals(headerCookie, prevHeadCookie)) {", "                 return false;"]}}, "ssl/PreSharedKeyExtension.java": {"chunk_1": {"plus_lines": [], "minus_lines": [" import java.util.Locale;", "import java.util.Arrays;", " import java.util.Objects;"]}, "chunk_2": {"plus_lines": ["                 computeBinder(shc, binderKey, session, pskBinderHash);", "        if (!MessageDigest.isEqual(binder, computedBinder)) {", "             throw shc.conContext.fatal(Alert.ILLEGAL_PARAMETER,"], "minus_lines": ["                 computeBinder(shc, binderKey, session, pskBinderHash);", "        if (!Arrays.equals(binder, computedBinder)) {", "             throw shc.conContext.fatal(Alert.ILLEGAL_PARAMETER,"]}}, "ssl/RandomCookie.java": {"chunk_3": {"plus_lines": [" ", "import sun.security.util.ByteArrays;", "", " import java.io.*;"], "minus_lines": []}, "chunk_4": {"plus_lines": [" import java.nio.ByteBuffer;", "import java.security.MessageDigest;", " import java.security.SecureRandom;"], "minus_lines": []}, "chunk_5": {"plus_lines": [], "minus_lines": [" import java.security.SecureRandom;", "import java.util.Arrays;", " "]}, "chunk_6": {"plus_lines": ["     boolean isHelloRetryRequest() {", "        return MessageDigest.isEqual(hrrRandomBytes, randomBytes);", "     }"], "minus_lines": ["     boolean isHelloRetryRequest() {", "        return Arrays.equals(hrrRandomBytes, randomBytes);", "     }"]}, "chunk_7": {"plus_lines": ["     private boolean isT12Downgrade() {", "        return ByteArrays.isEqual(randomBytes, 24, 32, t12Protection, 0, 8);", "     }"], "minus_lines": ["     private boolean isT12Downgrade() {", "        return Utilities.equals(randomBytes, 24, 32, t12Protection, 0, 8);", "     }"]}, "chunk_8": {"plus_lines": ["     private boolean isT11Downgrade() {", "        return ByteArrays.isEqual(randomBytes, 24, 32, t11Protection, 0, 8);", "     }"], "minus_lines": ["     private boolean isT11Downgrade() {", "        return Utilities.equals(randomBytes, 24, 32, t11Protection, 0, 8);", "     }"]}}, "ssl/RenegoInfoExtension.java": {"chunk_9": {"plus_lines": [" import java.nio.ByteBuffer;", "import java.security.MessageDigest;", " import java.text.MessageFormat;"], "minus_lines": []}, "chunk_10": {"plus_lines": [" import sun.security.ssl.SSLHandshake.HandshakeMessage;", "import sun.security.util.ByteArrays;", " "], "minus_lines": []}, "chunk_11": {"plus_lines": ["                     // verify the client_verify_data value", "                    if (!MessageDigest.isEqual(shc.conContext.clientVerifyData,", "                             spec.renegotiatedConnection)) {"], "minus_lines": ["                     // verify the client_verify_data value", "                    if (!Arrays.equals(shc.conContext.clientVerifyData,", "                             spec.renegotiatedConnection)) {"]}, "chunk_12": {"plus_lines": ["                 byte[] cvd = chc.conContext.clientVerifyData;", "                if (!ByteArrays.isEqual(spec.renegotiatedConnection,", "                         0, cvd.length, cvd, 0, cvd.length)) {"], "minus_lines": ["                 byte[] cvd = chc.conContext.clientVerifyData;", "                if (!Utilities.equals(spec.renegotiatedConnection,", "                         0, cvd.length, cvd, 0, cvd.length)) {"]}, "chunk_13": {"plus_lines": ["                 byte[] svd = chc.conContext.serverVerifyData;", "                if (!ByteArrays.isEqual(spec.renegotiatedConnection,", "                         cvd.length, infoLen, svd, 0, svd.length)) {"], "minus_lines": ["                 byte[] svd = chc.conContext.serverVerifyData;", "                if (!Utilities.equals(spec.renegotiatedConnection,", "                         cvd.length, infoLen, svd, 0, svd.length)) {"]}}, "ssl/SessionId.java": {"chunk_14": {"plus_lines": [" ", "import java.security.MessageDigest;", " import java.security.SecureRandom;"], "minus_lines": []}, "chunk_15": {"plus_lines": ["             SessionId that = (SessionId)obj;", "            return MessageDigest.isEqual(this.sessionId, that.sessionId);", "         }"], "minus_lines": ["             SessionId that = (SessionId)obj;", "            return Arrays.equals(this.sessionId, that.sessionId);", "         }"]}}, "ssl/Utilities.java": {"chunk_16": {"plus_lines": [], "minus_lines": [" ", "    /**", "     * Returns true if the two specified arrays of bytes, over the specified", "     * ranges, are <i>equal</i> to one another.", "     */", "    static boolean equals(byte[] arr1, int st1, int end1, byte[] arr2, int st2, int end2) {", "        rangeCheck(arr1.length, st1, end1);", "        rangeCheck(arr2.length, st2, end2);", "", "        int aLength = end1 - st1;", "        int bLength = end2 - st2;", "        if (aLength != bLength)", "            return false;", "", "        for(int i=0; i<aLength; i++)", "            if(arr1[i + st1] != arr2[i + st2])", "                return false;", "        return true;", "    }", "", " }"]}}, "util/ByteArrays.java": {"chunk_17": {"plus_lines": ["@@ -0,0 +1,67 @@", "/*", " * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.", " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.", " *", " * This code is free software; you can redistribute it and/or modify it", " * under the terms of the GNU General Public License version 2 only, as", " * published by the Free Software Foundation.  Oracle designates this", " * particular file as subject to the \"Classpath\" exception as provided", " * by Oracle in the LICENSE file that accompanied this code.", " *", " * This code is distributed in the hope that it will be useful, but WITHOUT", " * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or", " * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License", " * version 2 for more details (a copy is included in the LICENSE file that", " * accompanied this code).", " *", " * You should have received a copy of the GNU General Public License version", " * 2 along with this work; if not, write to the Free Software Foundation,", " * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.", " *", " * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA", " * or visit www.oracle.com if you need additional information or have any", " * questions.", " */", "", "package sun.security.util;", "", "/**", " * A time-instance comparison of two byte arrays.", " */", "public class ByteArrays {", "    // See the MessageDigest.isEqual(byte[] digesta, byte[] digestb)", "    // implementation.  This is a potential enhancement of the", "    // MessageDigest class.", "    public static boolean isEqual(byte[] a, int aFromIndex, int aToIndex,", "                                 byte[] b, int bFromIndex, int bToIndex) {", "        if (a == b) {", "            return true;", "        }", "", "        if (a == null || b == null) {", "            return false;", "        }", "", "        if (a.length == 0) {", "            return b.length == 0;", "        }", "", "        int lenA = aToIndex - aFromIndex;", "        int lenB = bToIndex - bFromIndex;", "", "        if (lenB == 0) {", "            return lenA == 0;", "        }", "", "        int result = 0;", "        result |= lenA - lenB;", "", "        // time-constant comparison", "        for (int indexA = 0; indexA < lenA; indexA++) {", "            int indexB = ((indexA - lenB) >>> 31) * indexA;", "            result |= a[aFromIndex + indexA] ^ b[bFromIndex + indexB];", "        }", "", "        return result == 0;", "    }", "}", ""], "minus_lines": []}}}