{
    "src/java.base/share/classes/java/lang/StringBuffer.java": {
        "chunk_0": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 1994, 2021, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 1994, 2020, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_1": {
            "plus_lines": [
                " import java.io.IOException;",
                "import java.io.ObjectInputStream;",
                "import java.io.ObjectOutputStream;",
                "import java.io.ObjectStreamField;",
                "import java.io.Serial;",
                "import java.io.Serializable;",
                "import java.io.StreamCorruptedException;",
                " import jdk.internal.vm.annotation.IntrinsicCandidate;"
            ],
            "minus_lines": [
                " import java.io.IOException;",
                "import java.util.Arrays;",
                " import jdk.internal.vm.annotation.IntrinsicCandidate;"
            ]
        },
        "chunk_2": {
            "plus_lines": [
                "     extends AbstractStringBuilder",
                "    implements Serializable, Comparable<StringBuffer>, CharSequence",
                " {"
            ],
            "minus_lines": [
                "     extends AbstractStringBuilder",
                "    implements java.io.Serializable, Comparable<StringBuffer>, CharSequence",
                " {"
            ]
        },
        "chunk_3": {
            "plus_lines": [
                "     /** use serialVersionUID from JDK 1.0.2 for interoperability */",
                "    @Serial",
                "     static final long serialVersionUID = 3388685877147921107L;"
            ],
            "minus_lines": [
                "     /** use serialVersionUID from JDK 1.0.2 for interoperability */",
                "    @java.io.Serial",
                "     static final long serialVersionUID = 3388685877147921107L;"
            ]
        },
        "chunk_4": {
            "plus_lines": [
                "      */",
                "    @Serial",
                "    private static final ObjectStreamField[] serialPersistentFields =",
                "     {"
            ],
            "minus_lines": [
                "      */",
                "    @java.io.Serial",
                "    private static final java.io.ObjectStreamField[] serialPersistentFields =",
                "     {"
            ]
        },
        "chunk_5": {
            "plus_lines": [
                "     {",
                "        new ObjectStreamField(\"value\", char[].class),",
                "        new ObjectStreamField(\"count\", Integer.TYPE),",
                "        new ObjectStreamField(\"shared\", Boolean.TYPE),",
                "     };"
            ],
            "minus_lines": [
                "     {",
                "        new java.io.ObjectStreamField(\"value\", char[].class),",
                "        new java.io.ObjectStreamField(\"count\", Integer.TYPE),",
                "        new java.io.ObjectStreamField(\"shared\", Boolean.TYPE),",
                "     };"
            ]
        },
        "chunk_6": {
            "plus_lines": [
                "     /**",
                "     * The {@code writeObject} method is called to write the state of the",
                "     * {@code StringBuffer} to a stream.",
                "      *"
            ],
            "minus_lines": [
                "     /**",
                "     * The {@code writeObject} method is called to write the state of the {@code StringBuffer} to",
                "     * a stream.",
                "      *"
            ]
        },
        "chunk_7": {
            "plus_lines": [
                "      */",
                "    @Serial",
                "    private synchronized void writeObject(ObjectOutputStream s)",
                "            throws IOException {",
                "        ObjectOutputStream.PutField fields = s.putFields();",
                "         char[] val = new char[capacity()];"
            ],
            "minus_lines": [
                "      */",
                "    @java.io.Serial",
                "    private synchronized void writeObject(java.io.ObjectOutputStream s)",
                "        throws java.io.IOException {",
                "        java.io.ObjectOutputStream.PutField fields = s.putFields();",
                "         char[] val = new char[capacity()];"
            ]
        },
        "chunk_8": {
            "plus_lines": [
                "     /**",
                "     * The {@code readObject} method is called to restore the state of the",
                "     * {@code StringBuffer} from a stream.",
                "      *"
            ],
            "minus_lines": [
                "     /**",
                "     * The {@code readObject} method is called to restore the state of the {@code StringBuffer} from",
                "     * a stream.",
                "      *"
            ]
        },
        "chunk_9": {
            "plus_lines": [
                "      */",
                "    @Serial",
                "    private void readObject(ObjectInputStream s)",
                "        throws IOException, ClassNotFoundException {",
                "        ObjectInputStream.GetField fields = s.readFields();",
                "",
                "         char[] val = (char[])fields.get(\"value\", null);"
            ],
            "minus_lines": [
                "      */",
                "    @java.io.Serial",
                "    private void readObject(java.io.ObjectInputStream s)",
                "        throws java.io.IOException, ClassNotFoundException {",
                "        java.io.ObjectInputStream.GetField fields = s.readFields();",
                "         char[] val = (char[])fields.get(\"value\", null);"
            ]
        },
        "chunk_10": {
            "plus_lines": [
                "         char[] val = (char[])fields.get(\"value\", null);",
                "        int c = fields.get(\"count\", 0);",
                "        if (c < 0 || c > val.length) {",
                "            throw new StreamCorruptedException(\"count value invalid\");",
                "        }",
                "         initBytes(val, 0, val.length);"
            ],
            "minus_lines": []
        },
        "chunk_11": {
            "plus_lines": [
                "         initBytes(val, 0, val.length);",
                "        count = c;",
                "        // ignore shared field",
                "     }"
            ],
            "minus_lines": [
                "         initBytes(val, 0, val.length);",
                "        count = fields.get(\"count\", 0);",
                "     }"
            ]
        }
    },
    "src/java.base/share/classes/java/lang/StringBuilder.java": {
        "chunk_12": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2003, 2021, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_13": {
            "plus_lines": [
                " import java.io.IOException;",
                "import java.io.ObjectInputStream;",
                "import java.io.ObjectOutputStream;",
                "import java.io.Serial;",
                "import java.io.StreamCorruptedException;",
                " "
            ],
            "minus_lines": []
        },
        "chunk_14": {
            "plus_lines": [
                "     /** use serialVersionUID for interoperability */",
                "    @Serial",
                "     static final long serialVersionUID = 4383685877147921099L;"
            ],
            "minus_lines": [
                "     /** use serialVersionUID for interoperability */",
                "    @java.io.Serial",
                "     static final long serialVersionUID = 4383685877147921099L;"
            ]
        },
        "chunk_15": {
            "plus_lines": [
                "      */",
                "    @Serial",
                "    private void writeObject(ObjectOutputStream s) throws IOException {",
                "         s.defaultWriteObject();"
            ],
            "minus_lines": [
                "      */",
                "    @java.io.Serial",
                "    private void writeObject(java.io.ObjectOutputStream s)",
                "        throws java.io.IOException {",
                "         s.defaultWriteObject();"
            ]
        },
        "chunk_16": {
            "plus_lines": [
                "     /**",
                "     * readObject is called to restore the state of the StringBuilder from",
                "      * a stream."
            ],
            "minus_lines": [
                "     /**",
                "     * readObject is called to restore the state of the StringBuffer from",
                "      * a stream."
            ]
        },
        "chunk_17": {
            "plus_lines": [
                "      */",
                "    @Serial",
                "    private void readObject(ObjectInputStream s)",
                "            throws IOException, ClassNotFoundException {",
                "         s.defaultReadObject();"
            ],
            "minus_lines": [
                "      */",
                "    @java.io.Serial",
                "    private void readObject(java.io.ObjectInputStream s)",
                "        throws IOException, ClassNotFoundException {",
                "         s.defaultReadObject();"
            ]
        },
        "chunk_18": {
            "plus_lines": [
                "         s.defaultReadObject();",
                "        int c = s.readInt();",
                "         char[] val = (char[]) s.readObject();"
            ],
            "minus_lines": [
                "         s.defaultReadObject();",
                "        count = s.readInt();",
                "         char[] val = (char[]) s.readObject();"
            ]
        },
        "chunk_19": {
            "plus_lines": [
                "         char[] val = (char[]) s.readObject();",
                "        if (c < 0 || c > val.length) {",
                "            throw new StreamCorruptedException(\"count value invalid\");",
                "        }",
                "         initBytes(val, 0, val.length);"
            ],
            "minus_lines": []
        },
        "chunk_20": {
            "plus_lines": [
                "         initBytes(val, 0, val.length);",
                "        count = c;",
                "     }"
            ],
            "minus_lines": []
        },
        "chunk_21": {
            "plus_lines": [],
            "minus_lines": [
                "     }",
                "",
                " }"
            ]
        }
    }
}
