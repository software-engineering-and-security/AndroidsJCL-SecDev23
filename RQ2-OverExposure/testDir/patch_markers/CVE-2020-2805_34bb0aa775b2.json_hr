{
    "invoke/MethodType.java": {
        "chunk_0": {
            "plus_lines": [
                "     private @Stable MethodTypeForm form; // erased form, plus cached data about primitives",
                "    private @Stable Object wrapAlt;  // alternative wrapped/unwrapped version and",
                "                                     // private communication for readObject and readResolve",
                "     private @Stable Invokers invokers;   // cache of handy higher-order adapters"
            ],
            "minus_lines": [
                "     private @Stable MethodTypeForm form; // erased form, plus cached data about primitives",
                "    private @Stable MethodType wrapAlt;  // alternative wrapped/unwrapped version",
                "     private @Stable Invokers invokers;   // cache of handy higher-order adapters"
            ]
        },
        "chunk_1": {
            "plus_lines": [
                "         assert(pt.hasPrimitives());",
                "        MethodType wt = (MethodType)pt.wrapAlt;",
                "         if (wt == null) {"
            ],
            "minus_lines": [
                "         assert(pt.hasPrimitives());",
                "        MethodType wt = pt.wrapAlt;",
                "         if (wt == null) {"
            ]
        },
        "chunk_2": {
            "plus_lines": [
                "         assert(!wt.hasPrimitives());",
                "        MethodType uwt = (MethodType)wt.wrapAlt;",
                "         if (uwt == null) {"
            ],
            "minus_lines": [
                "         assert(!wt.hasPrimitives());",
                "        MethodType uwt = wt.wrapAlt;",
                "         if (uwt == null) {"
            ]
        },
        "chunk_3": {
            "plus_lines": [
                "     private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {",
                "        // Assign defaults in case this object escapes",
                "        UNSAFE.putObject(this, rtypeOffset, void.class);",
                "        UNSAFE.putObject(this, ptypesOffset, NO_PTYPES);",
                " "
            ],
            "minus_lines": [
                "     private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {",
                "        // Assign temporary defaults in case this object escapes",
                "        MethodType_init(void.class, NO_PTYPES);",
                " "
            ]
        },
        "chunk_4": {
            "plus_lines": [],
            "minus_lines": [
                "         Class<?>[] parameterArray = (Class<?>[]) s.readObject();",
                "        parameterArray = parameterArray.clone();  // make sure it is unshared",
                " "
            ]
        },
        "chunk_5": {
            "plus_lines": [
                " ",
                "        // Verify all operands, and make sure ptypes is unshared",
                "        // Cache the new MethodType for readResolve",
                "        wrapAlt = new MethodType[]{MethodType.methodType(returnType, parameterArray)};",
                "     }"
            ],
            "minus_lines": [
                " ",
                "        // Assign deserialized values",
                "        MethodType_init(returnType, parameterArray);",
                "    }",
                "",
                "    // Initialization of state for deserialization only",
                "    private void MethodType_init(Class<?> rtype, Class<?>[] ptypes) {",
                "        // In order to communicate these values to readResolve, we must",
                "        // store them into the implementation-specific final fields.",
                "        checkRtype(rtype);",
                "        checkPtypes(ptypes);",
                "        UNSAFE.putObject(this, rtypeOffset, rtype);",
                "        UNSAFE.putObject(this, ptypesOffset, ptypes);",
                "     }"
            ]
        },
        "chunk_6": {
            "plus_lines": [
                "         // Verify all operands, and make sure ptypes is unshared:",
                "        // Return a new validated MethodType for the rtype and ptypes passed from readObject.",
                "        MethodType mt = ((MethodType[])wrapAlt)[0];",
                "        wrapAlt = null;",
                "        return mt;",
                "     }"
            ],
            "minus_lines": [
                "         // Verify all operands, and make sure ptypes is unshared:",
                "        try {",
                "            return methodType(rtype, ptypes);",
                "        } finally {",
                "            // Re-assign defaults in case this object escapes",
                "            MethodType_init(void.class, NO_PTYPES);",
                "        }",
                "     }"
            ]
        }
    }
}
