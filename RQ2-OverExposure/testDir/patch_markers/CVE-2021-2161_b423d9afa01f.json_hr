{
    "lang/ProcessImpl.java": {
        "chunk_0": {
            "plus_lines": [
                "         //    http://technet.microsoft.com/en-us/library/bb490954.aspx",
                "        {' ', '\\t', '\\\"', '<', '>', '&', '|', '^'},",
                "        {' ', '\\t', '\\\"', '<', '>'},",
                "        {' ', '\\t', '\\\"', '<', '>'},",
                "         {' ', '\\t'}"
            ],
            "minus_lines": [
                "         //    http://technet.microsoft.com/en-us/library/bb490954.aspx",
                "        {' ', '\\t', '<', '>', '&', '|', '^'},",
                "        {' ', '\\t', '<', '>'},",
                "        {' ', '\\t', '<', '>'},",
                "         {' ', '\\t'}"
            ]
        },
        "chunk_1": {
            "plus_lines": [
                "     /**",
                "     * Return the argument without quotes (1st and last) if properly quoted, else the arg.",
                "     * A properly quoted string has first and last characters as quote and",
                "     * the last quote is not escaped.",
                "      * @param str a string"
            ],
            "minus_lines": [
                "     /**",
                "     * Return the argument without quotes (1st and last) if present, else the arg.",
                "      * @param str a string"
            ]
        },
        "chunk_2": {
            "plus_lines": [
                "      * @param str a string",
                "     * @return the string without quotes",
                "      */"
            ],
            "minus_lines": [
                "      * @param str a string",
                "     * @return the string without 1st and last quotes",
                "      */"
            ]
        },
        "chunk_3": {
            "plus_lines": [
                "     private static String unQuote(String str) {",
                "        if (!str.startsWith(\"\\\"\") || !str.endsWith(\"\\\"\") || str.length() < 2)",
                "            return str;    // no beginning or ending quote, or too short not quoted",
                "",
                "        if (str.endsWith(\"\\\\\\\"\")) {",
                "            return str;    // not properly quoted, treat as unquoted",
                "        }",
                "        // Strip leading and trailing quotes",
                "        return str.substring(1, str.length() - 1);",
                "     }"
            ],
            "minus_lines": [
                "     private static String unQuote(String str) {",
                "        int len = str.length();",
                "        return (len >= 2 && str.charAt(0) == DOUBLEQUOTE && str.charAt(len - 1) == DOUBLEQUOTE)",
                "                ? str.substring(1, len - 1)",
                "                : str;",
                "     }"
            ]
        },
        "chunk_4": {
            "plus_lines": [
                "     private static boolean needsEscaping(int verificationType, String arg) {",
                "        if (arg.isEmpty())",
                "            return true;            // Empty string is to be quoted",
                "",
                "         // Switch off MS heuristic for internal [\"]."
            ],
            "minus_lines": []
        }
    }
}
