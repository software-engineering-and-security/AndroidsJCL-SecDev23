{
    "channels/SelectableChannel.java": {
        "chunk_0": {
            "plus_lines": [
                "     //   regLock, lock object to prevent duplicate registrations",
                "    //   blocking mode, protected by regLock",
                " "
            ],
            "minus_lines": [
                "     //   regLock, lock object to prevent duplicate registrations",
                "    //   boolean isBlocking, protected by regLock",
                " "
            ]
        }
    },
    "spi/AbstractSelectableChannel.java": {
        "chunk_1": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_2": {
            "plus_lines": [
                " import java.io.IOException;",
                "import java.nio.channels.CancelledKeyException;",
                "import java.nio.channels.ClosedChannelException;",
                "import java.nio.channels.ClosedSelectorException;",
                "import java.nio.channels.IllegalBlockingModeException;",
                "import java.nio.channels.IllegalSelectorException;",
                "import java.nio.channels.SelectableChannel;",
                "import java.nio.channels.SelectionKey;",
                "import java.nio.channels.Selector;",
                " "
            ],
            "minus_lines": [
                " import java.io.IOException;",
                "import java.nio.channels.*;",
                " "
            ]
        },
        "chunk_3": {
            "plus_lines": [
                " ",
                "    // True when non-blocking, need regLock to change;",
                "    private volatile boolean nonBlocking;",
                " "
            ],
            "minus_lines": [
                " ",
                "    // Blocking mode, protected by regLock",
                "    boolean blocking = true;",
                " "
            ]
        },
        "chunk_4": {
            "plus_lines": [
                "                 throw new IllegalArgumentException();",
                "            if (isBlocking())",
                "                 throw new IllegalBlockingModeException();"
            ],
            "minus_lines": [
                "                 throw new IllegalArgumentException();",
                "            if (blocking)",
                "                 throw new IllegalBlockingModeException();"
            ]
        },
        "chunk_5": {
            "plus_lines": [
                "     public final boolean isBlocking() {",
                "        return !nonBlocking;",
                "     }"
            ],
            "minus_lines": [
                "     public final boolean isBlocking() {",
                "        synchronized (regLock) {",
                "            return blocking;",
                "        }",
                "     }"
            ]
        },
        "chunk_6": {
            "plus_lines": [
                "                 throw new ClosedChannelException();",
                "            boolean blocking = !nonBlocking;",
                "            if (block != blocking) {",
                "                if (block && haveValidKeys())",
                "                    throw new IllegalBlockingModeException();",
                "                implConfigureBlocking(block);",
                "                nonBlocking = !block;",
                "            }",
                "         }"
            ],
            "minus_lines": [
                "                 throw new ClosedChannelException();",
                "            if (blocking == block)",
                "                return this;",
                "            if (block && haveValidKeys())",
                "                throw new IllegalBlockingModeException();",
                "            implConfigureBlocking(block);",
                "            blocking = block;",
                "         }"
            ]
        }
    },
    "ch/DatagramChannelImpl.java": {
        "chunk_7": {
            "plus_lines": [],
            "minus_lines": [
                "     private final FileDescriptor fd;",
                "",
                "    // fd value needed for dev/poll. This value will remain valid",
                "    // even after the value in the file descriptor object has been set to -1",
                "     private final int fdVal;"
            ]
        },
        "chunk_8": {
            "plus_lines": [],
            "minus_lines": [
                " ",
                "",
                "     public DatagramChannelImpl(SelectorProvider sp)"
            ]
        },
        "chunk_9": {
            "plus_lines": [
                "         }",
                "",
                "        ResourceManager.beforeUdpCreate();",
                "        try {",
                "            this.family = family;",
                "            this.fd = Net.socket(family, false);",
                "            this.fdVal = IOUtil.fdVal(fd);",
                "            this.state = ST_UNCONNECTED;",
                "        } catch (IOException ioe) {",
                "            ResourceManager.afterUdpClose();",
                "            throw ioe;",
                "        }",
                "     }"
            ],
            "minus_lines": [
                "         }",
                "        this.family = family;",
                "        this.fd = Net.socket(family, false);",
                "        this.fdVal = IOUtil.fdVal(fd);",
                "        this.state = ST_UNCONNECTED;",
                "     }"
            ]
        },
        "chunk_10": {
            "plus_lines": [
                "         super(sp);",
                "",
                "        // increment UDP count to match decrement when closing",
                "        ResourceManager.beforeUdpCreate();",
                "",
                "         this.family = Net.isIPv6Available() ?"
            ],
            "minus_lines": []
        },
        "chunk_11": {
            "plus_lines": [],
            "minus_lines": [
                "                     // flush any packets already received.",
                "                    boolean blocking = false;",
                "                     synchronized (blockingLock()) {"
            ]
        },
        "chunk_12": {
            "plus_lines": [
                "                     synchronized (blockingLock()) {",
                "                        boolean blocking = isBlocking();",
                "                         try {"
            ],
            "minus_lines": []
        },
        "chunk_13": {
            "plus_lines": [],
            "minus_lines": [
                "                         try {",
                "                            blocking = isBlocking();",
                "                             // remainder of each packet thrown away"
            ]
        }
    },
    "ch/DatagramSocketAdaptor.java": {
        "chunk_14": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2001, 2011, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_15": {
            "plus_lines": [
                " ",
                "import java.io.IOException;",
                "import java.net.DatagramPacket;",
                "import java.net.DatagramSocket;",
                "import java.net.DatagramSocketImpl;",
                "import java.net.InetAddress;",
                "import java.net.InetSocketAddress;",
                "import java.net.NetworkInterface;",
                "import java.net.SocketAddress;",
                "import java.net.SocketException;",
                "import java.net.SocketOption;",
                "import java.net.SocketTimeoutException;",
                "import java.net.StandardSocketOptions;",
                "import java.nio.ByteBuffer;",
                "import java.nio.channels.ClosedChannelException;",
                "import java.nio.channels.DatagramChannel;",
                "import java.nio.channels.IllegalBlockingModeException;",
                " "
            ],
            "minus_lines": [
                " ",
                "import java.io.*;",
                "import java.net.*;",
                "import java.nio.*;",
                "import java.nio.channels.*;",
                " "
            ]
        },
        "chunk_16": {
            "plus_lines": [],
            "minus_lines": [
                "         try {",
                "            int n;",
                "             SocketAddress sender;"
            ]
        },
        "chunk_17": {
            "plus_lines": [
                "                 int result = dc.poll(Net.POLLIN, to);",
                "                if (result > 0 && ((result & Net.POLLIN) != 0)) {",
                "                     if ((sender = dc.receive(bb)) != null)"
            ],
            "minus_lines": [
                "                 int result = dc.poll(Net.POLLIN, to);",
                "                if (result > 0 &&",
                "                        ((result & Net.POLLIN) != 0)) {",
                "                     if ((sender = dc.receive(bb)) != null)"
            ]
        },
        "chunk_18": {
            "plus_lines": [],
            "minus_lines": [
                "                     throw new SocketTimeoutException();",
                "",
                "             }"
            ]
        },
        "chunk_19": {
            "plus_lines": [
                "         } finally {",
                "            try {",
                "                 dc.configureBlocking(true);"
            ],
            "minus_lines": [
                "         } finally {",
                "            if (dc.isOpen())",
                "                 dc.configureBlocking(true);"
            ]
        },
        "chunk_20": {
            "plus_lines": [
                "                 dc.configureBlocking(true);",
                "            } catch (ClosedChannelException e) { }",
                "         }"
            ],
            "minus_lines": []
        }
    },
    "ch/ServerSocketAdaptor.java": {
        "chunk_21": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_22": {
            "plus_lines": [
                " ",
                "import java.io.IOException;",
                "import java.net.InetAddress;",
                "import java.net.InetSocketAddress;",
                "import java.net.ServerSocket;",
                "import java.net.Socket;",
                "import java.net.SocketAddress;",
                "import java.net.SocketException;",
                "import java.net.SocketTimeoutException;",
                "import java.net.StandardSocketOptions;",
                "import java.nio.channels.ClosedChannelException;",
                "import java.nio.channels.IllegalBlockingModeException;",
                "import java.nio.channels.NotYetBoundException;",
                "import java.nio.channels.ServerSocketChannel;",
                "import java.nio.channels.SocketChannel;",
                " "
            ],
            "minus_lines": [
                " ",
                "import java.io.*;",
                "import java.net.*;",
                "import java.nio.channels.*;",
                " "
            ]
        },
        "chunk_23": {
            "plus_lines": [
                " ",
                "class ServerSocketAdaptor                        // package-private",
                "     extends ServerSocket"
            ],
            "minus_lines": [
                " ",
                "public class ServerSocketAdaptor                        // package-private",
                "     extends ServerSocket"
            ]
        },
        "chunk_24": {
            "plus_lines": [
                "                 if (timeout == 0) {",
                "                    // for compatibility reasons: accept connection if available",
                "                    // when configured non-blocking",
                "                     SocketChannel sc = ssc.accept();"
            ],
            "minus_lines": []
        },
        "chunk_25": {
            "plus_lines": [
                " ",
                "                if (!ssc.isBlocking())",
                "                    throw new IllegalBlockingModeException();",
                "                 ssc.configureBlocking(false);"
            ],
            "minus_lines": []
        },
        "chunk_26": {
            "plus_lines": [
                "                 } finally {",
                "                    try {",
                "                         ssc.configureBlocking(true);"
            ],
            "minus_lines": [
                "                 } finally {",
                "                    if (ssc.isOpen())",
                "                         ssc.configureBlocking(true);"
            ]
        },
        "chunk_27": {
            "plus_lines": [
                "                         ssc.configureBlocking(true);",
                "                    } catch (ClosedChannelException e) { }",
                "                 }"
            ],
            "minus_lines": []
        },
        "chunk_28": {
            "plus_lines": [],
            "minus_lines": [
                "                 }",
                "",
                "             } catch (Exception x) {"
            ]
        },
        "chunk_29": {
            "plus_lines": [
                "         return \"ServerSocket[addr=\" + getInetAddress() +",
                "               \",localport=\" + getLocalPort()  + \"]\";",
                "     }"
            ],
            "minus_lines": [
                "         return \"ServerSocket[addr=\" + getInetAddress() +",
                "            //          \",port=\" + getPort() +",
                "                \",localport=\" + getLocalPort()  + \"]\";",
                "     }"
            ]
        }
    },
    "ch/ServerSocketChannelImpl.java": {
        "chunk_30": {
            "plus_lines": [
                "     private final FileDescriptor fd;",
                "    private final int fdVal;",
                " "
            ],
            "minus_lines": [
                "     private final FileDescriptor fd;",
                "",
                "    // fd value needed for dev/poll. This value will remain valid",
                "    // even after the value in the file descriptor object has been set to -1",
                "    private int fdVal;",
                " "
            ]
        }
    },
    "ch/SocketAdaptor.java": {
        "chunk_31": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_32": {
            "plus_lines": [
                " ",
                "import java.io.IOException;",
                "import java.io.InputStream;",
                "import java.io.OutputStream;",
                "import java.net.InetAddress;",
                "import java.net.InetSocketAddress;",
                "import java.net.Socket;",
                "import java.net.SocketAddress;",
                "import java.net.SocketException;",
                "import java.net.SocketImpl;",
                "import java.net.SocketOption;",
                "import java.net.SocketTimeoutException;",
                "import java.net.StandardSocketOptions;",
                "import java.nio.ByteBuffer;",
                "import java.nio.channels.Channels;",
                "import java.nio.channels.ClosedChannelException;",
                "import java.nio.channels.IllegalBlockingModeException;",
                "import java.nio.channels.SocketChannel;",
                " import java.security.AccessController;"
            ],
            "minus_lines": [
                " ",
                "import java.io.*;",
                "import java.lang.ref.*;",
                "import java.net.*;",
                "import java.nio.*;",
                "import java.nio.channels.*;",
                " import java.security.AccessController;"
            ]
        },
        "chunk_33": {
            "plus_lines": [
                " ",
                "class SocketAdaptor",
                "     extends Socket"
            ],
            "minus_lines": [
                " ",
                "public class SocketAdaptor",
                "     extends Socket"
            ]
        },
        "chunk_34": {
            "plus_lines": [],
            "minus_lines": [
                "             try {",
                "",
                "                 if (timeout == 0) {"
            ]
        },
        "chunk_35": {
            "plus_lines": [
                "                 } finally {",
                "                    try {",
                "                         sc.configureBlocking(true);"
            ],
            "minus_lines": [
                "                 } finally {",
                "                    if (sc.isOpen())",
                "                         sc.configureBlocking(true);"
            ]
        },
        "chunk_36": {
            "plus_lines": [
                "                         sc.configureBlocking(true);",
                "                    } catch (ClosedChannelException e) { }",
                "                 }"
            ],
            "minus_lines": []
        },
        "chunk_37": {
            "plus_lines": [
                "                     throw new IllegalBlockingModeException();",
                "",
                "                 if (timeout == 0)"
            ],
            "minus_lines": []
        },
        "chunk_38": {
            "plus_lines": [
                "                     return sc.read(bb);",
                "",
                "                 sc.configureBlocking(false);"
            ],
            "minus_lines": []
        },
        "chunk_39": {
            "plus_lines": [],
            "minus_lines": [
                "                 sc.configureBlocking(false);",
                "",
                "                 int n = 0;"
            ]
        },
        "chunk_40": {
            "plus_lines": [
                "                                           getPort(), timeout, n > 0 ? n : 0);",
                "                    try {",
                "                         sc.configureBlocking(true);"
            ],
            "minus_lines": [
                "                                           getPort(), timeout, n > 0 ? n : 0);",
                "                    if (sc.isOpen())",
                "                         sc.configureBlocking(true);"
            ]
        },
        "chunk_41": {
            "plus_lines": [
                "                         sc.configureBlocking(true);",
                "                    } catch (ClosedChannelException e) { }",
                "                 }"
            ],
            "minus_lines": []
        },
        "chunk_42": {
            "plus_lines": [],
            "minus_lines": [
                "                 }",
                "",
                "             }"
            ]
        }
    },
    "ch/SocketChannelImpl.java": {
        "chunk_43": {
            "plus_lines": [],
            "minus_lines": [
                "     private final FileDescriptor fd;",
                "",
                "    // fd value needed for dev/poll. This value will remain valid",
                "    // even after the value in the file descriptor object has been set to -1",
                "     private final int fdVal;"
            ]
        }
    }
}
