{"lang/StringBuffer.java": {"chunk_0": {"plus_lines": [" /*", " * Copyright (c) 1994, 2021, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."], "minus_lines": [" /*", " * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."]}, "chunk_1": {"plus_lines": [" ", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.ObjectStreamField;", "import java.io.Serializable;", "import java.io.StreamCorruptedException;", " import java.util.Arrays;"], "minus_lines": []}, "chunk_2": {"plus_lines": ["     extends AbstractStringBuilder", "    implements Serializable, CharSequence", " {"], "minus_lines": ["     extends AbstractStringBuilder", "    implements java.io.Serializable, CharSequence", " {"]}, "chunk_3": {"plus_lines": ["      */", "    private static final ObjectStreamField[] serialPersistentFields =", "     {"], "minus_lines": ["      */", "    private static final java.io.ObjectStreamField[] serialPersistentFields =", "     {"]}, "chunk_4": {"plus_lines": ["     {", "        new ObjectStreamField(\"value\", char[].class),", "        new ObjectStreamField(\"count\", Integer.TYPE),", "        new ObjectStreamField(\"shared\", Boolean.TYPE),", "     };"], "minus_lines": ["     {", "        new java.io.ObjectStreamField(\"value\", char[].class),", "        new java.io.ObjectStreamField(\"count\", Integer.TYPE),", "        new java.io.ObjectStreamField(\"shared\", Boolean.TYPE),", "     };"]}, "chunk_5": {"plus_lines": ["     /**", "     * The {@code writeObject} method is called to write the state of the", "     * {@code StringBuffer} to a stream.", "      */"], "minus_lines": ["     /**", "     * readObject is called to restore the state of the StringBuffer from", "     * a stream.", "      */"]}, "chunk_6": {"plus_lines": ["      */", "    private synchronized void writeObject(ObjectOutputStream s)", "        throws IOException {", "        ObjectOutputStream.PutField fields = s.putFields();", "         fields.put(\"value\", value);"], "minus_lines": ["      */", "    private synchronized void writeObject(java.io.ObjectOutputStream s)", "        throws java.io.IOException {", "        java.io.ObjectOutputStream.PutField fields = s.putFields();", "         fields.put(\"value\", value);"]}, "chunk_7": {"plus_lines": ["     /**", "     * The {@code readObject} method is called to restore the state of the", "     * {@code StringBuffer} from a stream.", "      */"], "minus_lines": ["     /**", "     * readObject is called to restore the state of the StringBuffer from", "     * a stream.", "      */"]}, "chunk_8": {"plus_lines": ["      */", "    private void readObject(ObjectInputStream s)", "        throws IOException, ClassNotFoundException {", "        ObjectInputStream.GetField fields = s.readFields();", "         value = (char[])fields.get(\"value\", null);"], "minus_lines": ["      */", "    private void readObject(java.io.ObjectInputStream s)", "        throws java.io.IOException, ClassNotFoundException {", "        java.io.ObjectInputStream.GetField fields = s.readFields();", "         value = (char[])fields.get(\"value\", null);"]}, "chunk_9": {"plus_lines": ["         value = (char[])fields.get(\"value\", null);", "        int c = fields.get(\"count\", 0);", "        if (c < 0 || c > value.length) {", "            throw new StreamCorruptedException(\"count value invalid\");", "        }", "        count = c;", "     }"], "minus_lines": ["         value = (char[])fields.get(\"value\", null);", "        count = fields.get(\"count\", 0);", "     }"]}}, "lang/StringBuilder.java": {"chunk_10": {"plus_lines": [" /*", " * Copyright (c) 2003, 2021, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."], "minus_lines": [" /*", " * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."]}, "chunk_11": {"plus_lines": [" ", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.io.StreamCorruptedException;", " "], "minus_lines": []}, "chunk_12": {"plus_lines": ["     extends AbstractStringBuilder", "    implements Serializable, CharSequence", " {"], "minus_lines": ["     extends AbstractStringBuilder", "    implements java.io.Serializable, CharSequence", " {"]}, "chunk_13": {"plus_lines": ["      */", "    private void writeObject(ObjectOutputStream s)", "        throws IOException {", "         s.defaultWriteObject();"], "minus_lines": ["      */", "    private void writeObject(java.io.ObjectOutputStream s)", "        throws java.io.IOException {", "         s.defaultWriteObject();"]}, "chunk_14": {"plus_lines": ["     /**", "     * readObject is called to restore the state of the StringBuilder from", "      * a stream."], "minus_lines": ["     /**", "     * readObject is called to restore the state of the StringBuffer from", "      * a stream."]}, "chunk_15": {"plus_lines": ["      */", "    private void readObject(ObjectInputStream s)", "        throws IOException, ClassNotFoundException {", "         s.defaultReadObject();"], "minus_lines": ["      */", "    private void readObject(java.io.ObjectInputStream s)", "        throws java.io.IOException, ClassNotFoundException {", "         s.defaultReadObject();"]}, "chunk_16": {"plus_lines": ["         s.defaultReadObject();", "        int c = s.readInt();", "         value = (char[]) s.readObject();"], "minus_lines": ["         s.defaultReadObject();", "        count = s.readInt();", "         value = (char[]) s.readObject();"]}, "chunk_17": {"plus_lines": ["         value = (char[]) s.readObject();", "        if (c < 0 || c > value.length) {", "            throw new StreamCorruptedException(\"count value invalid\");", "        }", "        count = c;", "     }"], "minus_lines": []}}}