{
    "lang/ClassLoader.java": {
        "chunk_0": {
            "plus_lines": [],
            "minus_lines": [
                " ",
                "    // If initialization succeed this is set to true and security checks will",
                "    // succeed.  Otherwise the object is not initialized and the object is",
                "    // useless.",
                "    private final boolean initialized;",
                "",
                "     // The parent class loader for delegation"
            ]
        },
        "chunk_1": {
            "plus_lines": [
                " ",
                "    private static Void checkCreateClassLoader() {",
                "        SecurityManager security = System.getSecurityManager();",
                "        if (security != null) {",
                "            security.checkCreateClassLoader();",
                "        }",
                "        return null;",
                "    }",
                "",
                "    private ClassLoader(Void unused, ClassLoader parent) {",
                "        this.parent = parent;",
                "        if (parallelLoaders.contains(this.getClass())) {",
                "            parallelLockMap = new ConcurrentHashMap<String, Object>();",
                "            package2certs = new ConcurrentHashMap<String, Certificate[]>();",
                "            domains =",
                "                Collections.synchronizedSet(new HashSet<ProtectionDomain>());",
                "            assertionLock = new Object();",
                "        } else {",
                "            // no finer-grained lock; lock on the classloader instance",
                "            parallelLockMap = null;",
                "            package2certs = new Hashtable<String, Certificate[]>();",
                "            domains = new HashSet<ProtectionDomain>();",
                "            assertionLock = this;",
                "        }",
                "    }",
                "",
                "     /**"
            ],
            "minus_lines": []
        },
        "chunk_2": {
            "plus_lines": [
                "     protected ClassLoader(ClassLoader parent) {",
                "        this(checkCreateClassLoader(), parent);",
                "     }"
            ],
            "minus_lines": [
                "     protected ClassLoader(ClassLoader parent) {",
                "        SecurityManager security = System.getSecurityManager();",
                "        if (security != null) {",
                "            security.checkCreateClassLoader();",
                "        }",
                "        this.parent = parent;",
                "        if (parallelLoaders.contains(this.getClass())) {",
                "            parallelLockMap = new ConcurrentHashMap<String, Object>();",
                "            package2certs = new ConcurrentHashMap<String, Certificate[]>();",
                "            domains =",
                "                Collections.synchronizedSet(new HashSet<ProtectionDomain>());",
                "            assertionLock = new Object();",
                "        } else {",
                "            // no finer-grained lock; lock on the classloader instance",
                "            parallelLockMap = null;",
                "            package2certs = new Hashtable<String, Certificate[]>();",
                "            domains = new HashSet<ProtectionDomain>();",
                "            assertionLock = this;",
                "        }",
                "        initialized = true;",
                "     }"
            ]
        },
        "chunk_3": {
            "plus_lines": [
                "     protected ClassLoader() {",
                "        this(checkCreateClassLoader(), getSystemClassLoader());",
                "     }"
            ],
            "minus_lines": [
                "     protected ClassLoader() {",
                "        SecurityManager security = System.getSecurityManager();",
                "        if (security != null) {",
                "            security.checkCreateClassLoader();",
                "        }",
                "        this.parent = getSystemClassLoader();",
                "        if (parallelLoaders.contains(this.getClass())) {",
                "            parallelLockMap = new ConcurrentHashMap<String, Object>();",
                "            package2certs = new ConcurrentHashMap<String, Certificate[]>();",
                "            domains =",
                "                Collections.synchronizedSet(new HashSet<ProtectionDomain>());",
                "            assertionLock = new Object();",
                "        } else {",
                "            // no finer-grained lock; lock on the classloader instance",
                "            parallelLockMap = null;",
                "            package2certs = new Hashtable<String, Certificate[]>();",
                "            domains = new HashSet<ProtectionDomain>();",
                "            assertionLock = this;",
                "        }",
                "        initialized = true;",
                "     }"
            ]
        },
        "chunk_4": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "         protectionDomain = preDefineClass(name, protectionDomain);"
            ]
        },
        "chunk_5": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "",
                "         int len = b.remaining();"
            ]
        },
        "chunk_6": {
            "plus_lines": [],
            "minus_lines": [
                "     protected final void resolveClass(Class<?> c) {",
                "        check();",
                "         resolveClass0(c);"
            ]
        },
        "chunk_7": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "         ClassLoader system = getSystemClassLoader();"
            ]
        },
        "chunk_8": {
            "plus_lines": [],
            "minus_lines": [
                "     {",
                "        check();",
                "         if (!checkName(name))"
            ]
        },
        "chunk_9": {
            "plus_lines": [],
            "minus_lines": [
                " ",
                "    // Check to make sure the class loader has been initialized.",
                "    private void check() {",
                "        if (!initialized) {",
                "            throw new SecurityException(\"ClassLoader object not initialized\");",
                "        }",
                "    }",
                "",
                "     /**"
            ]
        },
        "chunk_10": {
            "plus_lines": [],
            "minus_lines": [
                "     protected final Class<?> findLoadedClass(String name) {",
                "        check();",
                "         if (!checkName(name))"
            ]
        },
        "chunk_11": {
            "plus_lines": [],
            "minus_lines": [
                "     protected final void setSigners(Class<?> c, Object[] signers) {",
                "        check();",
                "         c.setSigners(signers);"
            ]
        }
    }
}
