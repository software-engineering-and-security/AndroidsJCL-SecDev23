{"io/ObjectInputStream.java": {"chunk_0": {"plus_lines": ["      *     <li>each regular class (class is not {@code null}, arrayLength is -1),", "     *     <li>each interface class explicitly referenced in the stream", "     *         (it is not called for interfaces implemented by classes in the stream),", "      *     <li>each interface of a dynamic proxy and the dynamic proxy class itself"], "minus_lines": []}, "chunk_1": {"plus_lines": ["             desc.initNonProxy(readDesc, cl, resolveEx, readClassDesc(false));", "", "            if (cl != null) {", "                // Check that serial filtering has been done on the local class descriptor's superclass,", "                // in case it does not appear in the stream.", "", "                // Find the next super descriptor that has a local class descriptor.", "                // Descriptors for which there is no local class are ignored.", "                ObjectStreamClass superLocal = null;", "                for (ObjectStreamClass sDesc = desc.getSuperDesc(); sDesc != null; sDesc = sDesc.getSuperDesc()) {", "                    if ((superLocal = sDesc.getLocalDesc()) != null) {", "                        break;", "                    }", "                }", "", "                // Scan local descriptor superclasses for a match with the local descriptor of the super found above.", "                // For each super descriptor before the match, invoke the serial filter on the class.", "                // The filter is invoked for each class that has not already been filtered", "                // but would be filtered if the instance had been serialized by this Java runtime.", "                for (ObjectStreamClass lDesc = desc.getLocalDesc().getSuperDesc();", "                     lDesc != null && lDesc != superLocal;", "                     lDesc = lDesc.getSuperDesc()) {", "                    filterCheck(lDesc.forClass(), -1);", "                }", "            }", "         } finally {"], "minus_lines": []}}}