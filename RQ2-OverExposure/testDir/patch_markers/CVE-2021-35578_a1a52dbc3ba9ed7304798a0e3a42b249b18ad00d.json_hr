{
    "src/java.base/share/classes/sun/security/ssl/ECDHClientKeyExchange.java": {
        "chunk_0": {
            "plus_lines": [
                " import java.nio.ByteBuffer;",
                "import java.security.CryptoPrimitive;",
                " import java.security.GeneralSecurityException;"
            ],
            "minus_lines": []
        },
        "chunk_1": {
            "plus_lines": [
                " import java.text.MessageFormat;",
                "import java.util.EnumSet;",
                " import java.util.Locale;"
            ],
            "minus_lines": []
        },
        "chunk_2": {
            "plus_lines": [
                "             try {",
                "                SSLCredentials sslCredentials =",
                "                        namedGroup.decodeCredentials(cke.encodedPoint);",
                "                if (shc.algorithmConstraints != null &&",
                "                        sslCredentials instanceof NamedGroupCredentials) {",
                "                    NamedGroupCredentials namedGroupCredentials =",
                "                            (NamedGroupCredentials) sslCredentials;",
                "                    if (!shc.algorithmConstraints.permits(",
                "                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                            namedGroupCredentials.getPublicKey())) {",
                "                        shc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                            \"ClientKeyExchange for \" + namedGroup +",
                "                            \" does not comply with algorithm constraints\");",
                "                    }",
                "                }",
                " "
            ],
            "minus_lines": [
                "             try {",
                "                NamedGroup ng = namedGroup;  // \"effectively final\" the lambda",
                "                // AlgorithmConstraints are checked internally.",
                "                SSLCredentials sslCredentials = namedGroup.decodeCredentials(",
                "                        cke.encodedPoint, shc.algorithmConstraints,",
                "                        s -> shc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                        \"ClientKeyExchange \" + ng + \": \" + s));",
                " "
            ]
        },
        "chunk_3": {
            "plus_lines": [
                "             try {",
                "                SSLCredentials sslCredentials =",
                "                        namedGroup.decodeCredentials(cke.encodedPoint);",
                "                if (shc.algorithmConstraints != null &&",
                "                        sslCredentials instanceof NamedGroupCredentials) {",
                "                    NamedGroupCredentials namedGroupCredentials =",
                "                            (NamedGroupCredentials) sslCredentials;",
                "                    if (!shc.algorithmConstraints.permits(",
                "                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                            namedGroupCredentials.getPublicKey())) {",
                "                        shc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                            \"ClientKeyExchange for \" + namedGroup +",
                "                            \" does not comply with algorithm constraints\");",
                "                    }",
                "                }",
                " "
            ],
            "minus_lines": [
                "             try {",
                "                NamedGroup ng = namedGroup; // \"effectively final\" the lambda",
                "                // AlgorithmConstraints are checked internally.",
                "                SSLCredentials sslCredentials = namedGroup.decodeCredentials(",
                "                        cke.encodedPoint, shc.algorithmConstraints,",
                "                        s -> shc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                        \"ClientKeyExchange \" + ng + \": \" + s));",
                " "
            ]
        }
    },
    "src/java.base/share/classes/sun/security/ssl/ECDHServerKeyExchange.java": {
        "chunk_4": {
            "plus_lines": [
                " import java.nio.ByteBuffer;",
                "import java.security.CryptoPrimitive;",
                " import java.security.GeneralSecurityException;"
            ],
            "minus_lines": []
        },
        "chunk_5": {
            "plus_lines": [
                " import java.text.MessageFormat;",
                "import java.util.EnumSet;",
                " import java.util.Locale;"
            ],
            "minus_lines": []
        },
        "chunk_6": {
            "plus_lines": [
                "             try {",
                "                sslCredentials =",
                "                        namedGroup.decodeCredentials(publicPoint);",
                "                if (handshakeContext.algorithmConstraints != null &&",
                "                        sslCredentials instanceof NamedGroupCredentials) {",
                "                    NamedGroupCredentials namedGroupCredentials =",
                "                            (NamedGroupCredentials) sslCredentials;",
                "                    if (!handshakeContext.algorithmConstraints.permits(",
                "                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                            namedGroupCredentials.getPublicKey())) {",
                "                        chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                            \"ServerKeyExchange for \" + namedGroup +",
                "                            \" does not comply with algorithm constraints\");",
                "                    }",
                "                }",
                "             } catch (GeneralSecurityException ex) {"
            ],
            "minus_lines": [
                "             try {",
                "                sslCredentials = namedGroup.decodeCredentials(",
                "                    publicPoint, handshakeContext.algorithmConstraints,",
                "                     s -> chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                     \"ServerKeyExchange \" + namedGroup + \": \" + (s)));",
                "             } catch (GeneralSecurityException ex) {"
            ]
        }
    },
    "src/java.base/share/classes/sun/security/ssl/KeyShareExtension.java": {
        "chunk_7": {
            "plus_lines": [
                " import java.nio.ByteBuffer;",
                "import java.security.CryptoPrimitive;",
                " import java.security.GeneralSecurityException;"
            ],
            "minus_lines": []
        },
        "chunk_8": {
            "plus_lines": [
                " import java.util.Collections;",
                "import java.util.EnumSet;",
                " import java.util.LinkedList;"
            ],
            "minus_lines": []
        },
        "chunk_9": {
            "plus_lines": [
                "                         shc.algorithmConstraints, ng)) {",
                "                    if (SSLLogger.isOn &&",
                "                            SSLLogger.isOn(\"ssl,handshake\")) {",
                "                         SSLLogger.fine("
            ],
            "minus_lines": [
                "                         shc.algorithmConstraints, ng)) {",
                "                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {",
                "                         SSLLogger.fine("
            ]
        },
        "chunk_10": {
            "plus_lines": [
                "                     SSLCredentials kaCred =",
                "                        ng.decodeCredentials(entry.keyExchange);",
                "                    if (shc.algorithmConstraints != null &&",
                "                            kaCred instanceof NamedGroupCredentials) {",
                "                        NamedGroupCredentials namedGroupCredentials =",
                "                                (NamedGroupCredentials) kaCred;",
                "                        if (!shc.algorithmConstraints.permits(",
                "                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                namedGroupCredentials.getPublicKey())) {",
                "                            if (SSLLogger.isOn &&",
                "                                    SSLLogger.isOn(\"ssl,handshake\")) {",
                "                                SSLLogger.warning(",
                "                                    \"key share entry of \" + ng + \" does not \" +",
                "                                    \" comply with algorithm constraints\");",
                "                            }",
                "",
                "                            kaCred = null;",
                "                        }",
                "                    }",
                "",
                "                     if (kaCred != null) {"
            ],
            "minus_lines": [
                "                     SSLCredentials kaCred =",
                "                        ng.decodeCredentials(entry.keyExchange,",
                "                        shc.algorithmConstraints,",
                "                        s -> SSLLogger.warning(s));",
                "                     if (kaCred != null) {"
            ]
        },
        "chunk_11": {
            "plus_lines": [
                "                 } catch (GeneralSecurityException ex) {",
                "                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {",
                "                        SSLLogger.warning(",
                "                                \"Cannot decode named group: \" +",
                "                                NamedGroup.nameOf(entry.namedGroupId));",
                "                    }",
                "                 }"
            ],
            "minus_lines": [
                "                 } catch (GeneralSecurityException ex) {",
                "                    SSLLogger.warning(",
                "                        \"Cannot decode named group: \" +",
                "                        NamedGroup.nameOf(entry.namedGroupId));",
                "                 }"
            ]
        },
        "chunk_12": {
            "plus_lines": [
                "             try {",
                "                SSLCredentials kaCred =",
                "                        ng.decodeCredentials(keyShare.keyExchange);",
                "                if (chc.algorithmConstraints != null &&",
                "                        kaCred instanceof NamedGroupCredentials) {",
                "                    NamedGroupCredentials namedGroupCredentials =",
                "                            (NamedGroupCredentials) kaCred;",
                "                    if (!chc.algorithmConstraints.permits(",
                "                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                            namedGroupCredentials.getPublicKey())) {",
                "                        chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                            \"key share entry of \" + ng + \" does not \" +",
                "                            \" comply with algorithm constraints\");",
                "                    }",
                "                }",
                "",
                "                 if (kaCred != null) {"
            ],
            "minus_lines": [
                "             try {",
                "                SSLCredentials kaCred = ng.decodeCredentials(",
                "                    keyShare.keyExchange, chc.algorithmConstraints,",
                "                    s -> chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, s));",
                "                 if (kaCred != null) {"
            ]
        }
    },
    "src/java.base/share/classes/sun/security/ssl/NamedGroup.java": {
        "chunk_13": {
            "plus_lines": [
                " ",
                "    SSLCredentials decodeCredentials(",
                "            byte[] encoded) throws IOException, GeneralSecurityException {",
                "        return spec.decodeCredentials(this, encoded);",
                "     }"
            ],
            "minus_lines": [
                " ",
                "    SSLCredentials decodeCredentials(byte[] encoded,",
                "            AlgorithmConstraints constraints,",
                "            ExceptionSupplier onConstraintFail)",
                "            throws IOException, GeneralSecurityException {",
                "        return spec.decodeCredentials(",
                "                this, encoded, constraints, onConstraintFail);",
                "     }"
            ]
        },
        "chunk_14": {
            "plus_lines": [],
            "minus_lines": [
                " ",
                "    interface ExceptionSupplier {",
                "        void apply(String s) throws SSLException;",
                "    }",
                "",
                "     // A list of operations related to named groups."
            ]
        },
        "chunk_15": {
            "plus_lines": [],
            "minus_lines": [
                "     private interface NamedGroupScheme {",
                "        default void checkConstraints(PublicKey publicKey,",
                "                AlgorithmConstraints constraints,",
                "                ExceptionSupplier onConstraintFail) throws SSLException {",
                "            if (!constraints.permits(",
                "                    EnumSet.of(CryptoPrimitive.KEY_AGREEMENT), publicKey)) {",
                "                onConstraintFail.apply(\"key share entry does not \"",
                "                        + \"comply with algorithm constraints\");",
                "            }",
                "        }",
                "",
                "         byte[] encodePossessionPublicKey("
            ]
        },
        "chunk_16": {
            "plus_lines": [
                " ",
                "        SSLCredentials decodeCredentials(NamedGroup ng,",
                "                byte[] encoded) throws IOException, GeneralSecurityException;",
                " "
            ],
            "minus_lines": [
                " ",
                "        SSLCredentials decodeCredentials(",
                "                NamedGroup ng, byte[] encoded,",
                "                AlgorithmConstraints constraints,",
                "                ExceptionSupplier onConstraintFail",
                "            ) throws IOException, GeneralSecurityException;",
                " "
            ]
        },
        "chunk_17": {
            "plus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng,",
                "                byte[] encoded) throws IOException, GeneralSecurityException {",
                "             if (scheme != null) {"
            ],
            "minus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng, byte[] encoded,",
                "                    AlgorithmConstraints constraints,",
                "                    ExceptionSupplier onConstraintFail",
                "                ) throws IOException, GeneralSecurityException {",
                "             if (scheme != null) {"
            ]
        },
        "chunk_18": {
            "plus_lines": [
                "             if (scheme != null) {",
                "                return scheme.decodeCredentials(ng, encoded);",
                "             }"
            ],
            "minus_lines": [
                "             if (scheme != null) {",
                "                return scheme.decodeCredentials(",
                "                        ng, encoded, constraints, onConstraintFail);",
                "             }"
            ]
        },
        "chunk_19": {
            "plus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng,",
                "                byte[] encoded) throws IOException, GeneralSecurityException {",
                "            return DHKeyExchange.DHECredentials.valueOf(ng, encoded);",
                "         }"
            ],
            "minus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng, byte[] encoded,",
                "                AlgorithmConstraints constraints,",
                "                ExceptionSupplier onConstraintFail",
                "            ) throws IOException, GeneralSecurityException {",
                "",
                "            DHKeyExchange.DHECredentials result",
                "                    = DHKeyExchange.DHECredentials.valueOf(ng, encoded);",
                "",
                "            checkConstraints(result.getPublicKey(), constraints,",
                "                    onConstraintFail);",
                "",
                "            return result;",
                "         }"
            ]
        },
        "chunk_20": {
            "plus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng,",
                "                byte[] encoded) throws IOException, GeneralSecurityException {",
                "            return ECDHKeyExchange.ECDHECredentials.valueOf(ng, encoded);",
                "         }"
            ],
            "minus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng, byte[] encoded,",
                "                AlgorithmConstraints constraints,",
                "                ExceptionSupplier onConstraintFail",
                "            ) throws IOException, GeneralSecurityException {",
                "",
                "            ECDHKeyExchange.ECDHECredentials result",
                "                    = ECDHKeyExchange.ECDHECredentials.valueOf(ng, encoded);",
                "",
                "            checkConstraints(result.getPublicKey(), constraints,",
                "                    onConstraintFail);",
                "",
                "            return result;",
                "         }"
            ]
        },
        "chunk_21": {
            "plus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng,",
                "                byte[] encoded) throws IOException, GeneralSecurityException {",
                "            return XDHKeyExchange.XDHECredentials.valueOf(ng, encoded);",
                "         }"
            ],
            "minus_lines": [
                "         @Override",
                "        public SSLCredentials decodeCredentials(NamedGroup ng, byte[] encoded,",
                "                AlgorithmConstraints constraints,",
                "                ExceptionSupplier onConstraintFail",
                "            ) throws IOException, GeneralSecurityException {",
                "",
                "            XDHKeyExchange.XDHECredentials result",
                "                    = XDHKeyExchange.XDHECredentials.valueOf(ng, encoded);",
                "",
                "            checkConstraints(result.getPublicKey(), constraints,",
                "                    onConstraintFail);",
                "",
                "            return result;",
                "         }"
            ]
        }
    },
    "src/java.base/share/classes/sun/security/ssl/SSLLogger.java": {
        "chunk_22": {
            "plus_lines": [
                "     private static void log(Level level, String msg, Object... params) {",
                "        if (logger != null && logger.isLoggable(level)) {",
                "             if (params == null || params.length == 0) {"
            ],
            "minus_lines": [
                "     private static void log(Level level, String msg, Object... params) {",
                "        if (logger.isLoggable(level)) {",
                "             if (params == null || params.length == 0) {"
            ]
        }
    }
}
