{
    "lang/System.java": {
        "chunk_0": {
            "plus_lines": [
                " ",
                "import jdk.internal.util.StaticProperty;",
                "",
                " /**"
            ],
            "minus_lines": []
        },
        "chunk_1": {
            "plus_lines": [
                "         lineSeparator = props.getProperty(\"line.separator\");",
                "        StaticProperty.jdkSerialFilter();   // Load StaticProperty to cache the property values",
                "         sun.misc.Version.init();"
            ],
            "minus_lines": []
        }
    },
    "util/StaticProperty.java": {
        "chunk_2": {
            "plus_lines": [
                "@@ -0,0 +1,58 @@",
                "/*",
                " * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.",
                " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.",
                " *",
                " * This code is free software; you can redistribute it and/or modify it",
                " * under the terms of the GNU General Public License version 2 only, as",
                " * published by the Free Software Foundation.  Oracle designates this",
                " * particular file as subject to the \"Classpath\" exception as provided",
                " * by Oracle in the LICENSE file that accompanied this code.",
                " *",
                " * This code is distributed in the hope that it will be useful, but WITHOUT",
                " * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",
                " * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License",
                " * version 2 for more details (a copy is included in the LICENSE file that",
                " * accompanied this code).",
                " *",
                " * You should have received a copy of the GNU General Public License version",
                " * 2 along with this work; if not, write to the Free Software Foundation,",
                " * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.",
                " *",
                " * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA",
                " * or visit www.oracle.com if you need additional information or have any",
                " * questions.",
                " */",
                "",
                "package jdk.internal.util;",
                "",
                "/**",
                " * System Property access for internal use only.",
                " * Read-only access to System property values initialized during Phase 1",
                " * are cached.  Setting, clearing, or modifying the value using",
                " * {@link System#setProperty) or {@link System#getProperties()} is ignored.",
                " * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked",
                " * in these access methods. The caller of these methods should take care to ensure",
                " * that the returned property is not made accessible to untrusted code.</strong>",
                " */",
                "public final class StaticProperty {",
                "",
                "    // The class static initialization is triggered to initialize these final",
                "    // fields during init Phase 1 and before a security manager is set.",
                "    private static final String JDK_SERIAL_FILTER = System.getProperty(\"jdk.serialFilter\");",
                "",
                "    private StaticProperty() {}",
                "",
                "    /**",
                "     *",
                "     * Return the {@code jdk.serialFilter} system property.",
                "     *",
                "     * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked",
                "     * in this method. The caller of this method should take care to ensure",
                "     * that the returned property is not made accessible to untrusted code.</strong>",
                "     *",
                "     * @return the {@code user.name} system property",
                "     */",
                "    public static String jdkSerialFilter() {",
                "        return JDK_SERIAL_FILTER;",
                "    }",
                "}"
            ],
            "minus_lines": []
        }
    },
    "misc/ObjectInputFilter.java": {
        "chunk_3": {
            "plus_lines": [
                " ",
                "import jdk.internal.util.StaticProperty;",
                "",
                " /**"
            ],
            "minus_lines": []
        },
        "chunk_4": {
            "plus_lines": [
                "                         public ObjectInputFilter run() {",
                "                            String props = StaticProperty.jdkSerialFilter();",
                "                             if (props == null) {"
            ],
            "minus_lines": [
                "                         public ObjectInputFilter run() {",
                "                            String props = System.getProperty(SERIAL_FILTER_PROPNAME);",
                "                             if (props == null) {"
            ]
        }
    },
    "security/java.security-linux": {
        "chunk_5": {
            "plus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified on the command",
                "# line, it supersedes the security property value defined here.",
                " #"
            ],
            "minus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified, it supersedes",
                "# the security property value defined here.",
                " #"
            ]
        }
    },
    "security/java.security-macosx": {
        "chunk_6": {
            "plus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified on the command",
                "# line, it supersedes the security property value defined here.",
                " #"
            ],
            "minus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified, it supersedes",
                "# the security property value defined here.",
                " #"
            ]
        }
    },
    "security/java.security-solaris": {
        "chunk_7": {
            "plus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified on the command",
                "# line, it supersedes the security property value defined here.",
                " #"
            ],
            "minus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified, it supersedes",
                "# the security property value defined here.",
                " #"
            ]
        }
    },
    "security/java.security-windows": {
        "chunk_8": {
            "plus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified on the command",
                "# line, it supersedes the security property value defined here.",
                " #"
            ],
            "minus_lines": [
                " #",
                "# If the system property jdk.serialFilter is also specified, it supersedes",
                "# the security property value defined here.",
                " #"
            ]
        }
    },
    "serialFilter/GlobalFilterTest.java": {
        "chunk_9": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_10": {
            "plus_lines": [
                " /* @test",
                " * @bug 8231422",
                "  * @build GlobalFilterTest SerialFilterTest"
            ],
            "minus_lines": []
        },
        "chunk_11": {
            "plus_lines": [
                "  * @run testng/othervm GlobalFilterTest",
                " * @run testng/othervm -Djdk.serialFilter=java.**",
                " *          -Dexpected-jdk.serialFilter=java.** GlobalFilterTest",
                "  * @run testng/othervm/policy=security.policy GlobalFilterTest"
            ],
            "minus_lines": [
                "  * @run testng/othervm GlobalFilterTest",
                " * @run testng/othervm -Djdk.serialFilter=java.** GlobalFilterTest",
                "  * @run testng/othervm/policy=security.policy GlobalFilterTest"
            ]
        },
        "chunk_12": {
            "plus_lines": [
                " public class GlobalFilterTest {",
                "    private static final String serialPropName = \"jdk.serialFilter\";",
                "    private static final String badSerialFilter = \"java.lang.StringBuffer;!*\";",
                "    private static final String origSerialFilterProperty =",
                "            System.setProperty(serialPropName, badSerialFilter);",
                " "
            ],
            "minus_lines": []
        },
        "chunk_13": {
            "plus_lines": [
                "         String globalFilter =",
                "                System.getProperty(\"expected-\" + serialPropName,",
                "                        Security.getProperty(serialPropName));",
                "         if (globalFilter == null) {"
            ],
            "minus_lines": [
                "         String globalFilter =",
                "                System.getProperty(\"jdk.serialFilter\",",
                "                        Security.getProperty(\"jdk.serialFilter\"));",
                "         if (globalFilter == null) {"
            ]
        },
        "chunk_14": {
            "plus_lines": [
                "     static void globalFilter() {",
                "        ObjectInputFilter filter = ObjectInputFilter.Config.getSerialFilter();",
                "",
                "        // Check that the System.setProperty(jdk.serialFilter) DOES NOT affect the filter.",
                "        String asSetSystemProp = System.getProperty(serialPropName,",
                "                Security.getProperty(serialPropName));",
                "        Assert.assertNotEquals(Objects.toString(filter, null), asSetSystemProp,",
                "                \"System.setProperty(\\\"jdk.serialfilter\\\", ...) should not change filter: \" +",
                "                asSetSystemProp);",
                "",
                "         String pattern ="
            ],
            "minus_lines": []
        },
        "chunk_15": {
            "plus_lines": [
                "         String pattern =",
                "               System.getProperty(\"expected-\" + serialPropName,",
                "                       Security.getProperty(serialPropName));",
                "         System.out.printf(\"global pattern: %s, filter: %s%n\", pattern, filter);"
            ],
            "minus_lines": [
                "         String pattern =",
                "                System.getProperty(\"jdk.serialFilter\",",
                "                        Security.getProperty(\"jdk.serialFilter\"));",
                "        ObjectInputFilter filter = ObjectInputFilter.Config.getSerialFilter();",
                "         System.out.printf(\"global pattern: %s, filter: %s%n\", pattern, filter);"
            ]
        },
        "chunk_16": {
            "plus_lines": [
                "         System.out.printf(\"global pattern: %s, filter: %s%n\", pattern, filter);",
                "        Assert.assertEquals(Objects.toString(filter, null), pattern,",
                "                 \"process-wide filter pattern does not match\");"
            ],
            "minus_lines": [
                "         System.out.printf(\"global pattern: %s, filter: %s%n\", pattern, filter);",
                "        Assert.assertEquals(pattern, Objects.toString(filter, null),",
                "                 \"process-wide filter pattern does not match\");"
            ]
        }
    },
    "serialFilter/security.policy": {
        "chunk_17": {
            "plus_lines": [
                "         // Permissions needed to run the test",
                "        permission java.util.PropertyPermission \"*\", \"read,write\";",
                "         permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";"
            ],
            "minus_lines": [
                "         // Permissions needed to run the test",
                "        permission java.util.PropertyPermission \"*\", \"read\";",
                "         permission java.io.FilePermission \"<<ALL FILES>>\", \"read,write,delete\";"
            ]
        }
    }
}
