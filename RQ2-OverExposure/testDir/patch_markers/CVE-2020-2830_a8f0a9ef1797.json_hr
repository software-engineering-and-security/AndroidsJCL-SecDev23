{
    "util/Scanner.java": {
        "chunk_0": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_1": {
            "plus_lines": [
                "         // Scanner will do the right thing",
                "        String digit = \"((?i)[\"+radixDigits+\"\\\\p{javaDigit}])\";",
                "         String groupedNumeral = \"(\"+non0Digit+digit+\"?\"+digit+\"?(\"+"
            ],
            "minus_lines": [
                "         // Scanner will do the right thing",
                "        String digit = \"((?i)[\"+radixDigits+\"]|\\\\p{javaDigit})\";",
                "         String groupedNumeral = \"(\"+non0Digit+digit+\"?\"+digit+\"?(\"+"
            ]
        },
        "chunk_2": {
            "plus_lines": [
                "         // \\\\p{javaDigit} may not be perfect, see above",
                "        String digit = \"(([0-9\\\\p{javaDigit}]))\";",
                "         String exponent = \"([eE][+-]?\"+digit+\"+)?\";"
            ],
            "minus_lines": [
                "         // \\\\p{javaDigit} may not be perfect, see above",
                "        String digit = \"([0-9]|(\\\\p{javaDigit}))\";",
                "         String exponent = \"([eE][+-]?\"+digit+\"+)?\";"
            ]
        },
        "chunk_3": {
            "plus_lines": [
                "         // metacharacters such as dot or parenthesis",
                "        groupSeparator =   \"\\\\x{\" + Integer.toHexString(dfs.getGroupingSeparator()) + \"}\";",
                "        decimalSeparator = \"\\\\x{\" + Integer.toHexString(dfs.getDecimalSeparator()) + \"}\";",
                " "
            ],
            "minus_lines": [
                "         // metacharacters such as dot or parenthesis",
                "        groupSeparator =   \"\\\\\" + dfs.getGroupingSeparator();",
                "        decimalSeparator = \"\\\\\" + dfs.getDecimalSeparator();",
                " "
            ]
        },
        "chunk_4": {
            "plus_lines": [
                "         // to avoid potential conflict with metacharacters",
                "        nanString = Pattern.quote(dfs.getNaN());",
                "        infinityString = Pattern.quote(dfs.getInfinity());",
                "         positivePrefix = df.getPositivePrefix();"
            ],
            "minus_lines": [
                "         // to avoid potential conflict with metacharacters",
                "        nanString = \"\\\\Q\" + dfs.getNaN() + \"\\\\E\";",
                "        infinityString = \"\\\\Q\" + dfs.getInfinity() + \"\\\\E\";",
                "         positivePrefix = df.getPositivePrefix();"
            ]
        },
        "chunk_5": {
            "plus_lines": [
                "         if (positivePrefix.length() > 0)",
                "            positivePrefix = Pattern.quote(positivePrefix);",
                "         negativePrefix = df.getNegativePrefix();"
            ],
            "minus_lines": [
                "         if (positivePrefix.length() > 0)",
                "            positivePrefix = \"\\\\Q\" + positivePrefix + \"\\\\E\";",
                "         negativePrefix = df.getNegativePrefix();"
            ]
        },
        "chunk_6": {
            "plus_lines": [
                "         if (negativePrefix.length() > 0)",
                "            negativePrefix = Pattern.quote(negativePrefix);",
                "         positiveSuffix = df.getPositiveSuffix();"
            ],
            "minus_lines": [
                "         if (negativePrefix.length() > 0)",
                "            negativePrefix = \"\\\\Q\" + negativePrefix + \"\\\\E\";",
                "         positiveSuffix = df.getPositiveSuffix();"
            ]
        },
        "chunk_7": {
            "plus_lines": [
                "         if (positiveSuffix.length() > 0)",
                "            positiveSuffix = Pattern.quote(positiveSuffix);",
                "         negativeSuffix = df.getNegativeSuffix();"
            ],
            "minus_lines": [
                "         if (positiveSuffix.length() > 0)",
                "            positiveSuffix = \"\\\\Q\" + positiveSuffix + \"\\\\E\";",
                "         negativeSuffix = df.getNegativeSuffix();"
            ]
        },
        "chunk_8": {
            "plus_lines": [
                "         if (negativeSuffix.length() > 0)",
                "            negativeSuffix = Pattern.quote(negativeSuffix);",
                " "
            ],
            "minus_lines": [
                "         if (negativeSuffix.length() > 0)",
                "            negativeSuffix = \"\\\\Q\" + negativeSuffix + \"\\\\E\";",
                " "
            ]
        }
    }
}
