{
    "ssl/ECDHClientKeyExchange.java": {
        "chunk_0": {
            "plus_lines": [
                "                 // check constraints of ECPublicKey",
                "                if (constraints != null &&",
                "                        !constraints.permits(",
                "                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                peerPublicKey)) {",
                "                     throw new SSLHandshakeException("
            ],
            "minus_lines": [
                "                 // check constraints of ECPublicKey",
                "                if (!constraints.permits(",
                "                        EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                        peerPublicKey)) {",
                "                     throw new SSLHandshakeException("
            ]
        },
        "chunk_1": {
            "plus_lines": [
                "                 // check constraints of peer ECPublicKey",
                "                if (shc.algorithmConstraints != null &&",
                "                        !shc.algorithmConstraints.permits(",
                "                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                peerPublicKey)) {",
                "                     throw new SSLHandshakeException("
            ],
            "minus_lines": [
                "                 // check constraints of peer ECPublicKey",
                "                if (!shc.algorithmConstraints.permits(",
                "                        EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                        peerPublicKey)) {",
                "                     throw new SSLHandshakeException("
            ]
        },
        "chunk_2": {
            "plus_lines": [
                "                 // check constraints of peer ECPublicKey",
                "                if (shc.algorithmConstraints != null &&",
                "                        !shc.algorithmConstraints.permits(",
                "                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                peerPublicKey)) {",
                "                     throw new SSLHandshakeException("
            ],
            "minus_lines": [
                "                 // check constraints of peer ECPublicKey",
                "                if (!shc.algorithmConstraints.permits(",
                "                        EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                        peerPublicKey)) {",
                "                     throw new SSLHandshakeException("
            ]
        }
    },
    "ssl/ECDHServerKeyExchange.java": {
        "chunk_3": {
            "plus_lines": [
                "             // check constraints of EC PublicKey",
                "            if (chc.algorithmConstraints != null &&",
                "                    !chc.algorithmConstraints.permits(",
                "                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                            skem.publicKey)) {",
                "                 throw chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,"
            ],
            "minus_lines": [
                "             // check constraints of EC PublicKey",
                "            if (!chc.algorithmConstraints.permits(",
                "                    EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                    skem.publicKey)) {",
                "                 throw chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,"
            ]
        }
    },
    "ssl/KeyShareExtension.java": {
        "chunk_4": {
            "plus_lines": [
                "                         shc.algorithmConstraints, ng)) {",
                "                    if (SSLLogger.isOn &&",
                "                            SSLLogger.isOn(\"ssl,handshake\")) {",
                "                         SSLLogger.fine("
            ],
            "minus_lines": [
                "                         shc.algorithmConstraints, ng)) {",
                "                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {",
                "                         SSLLogger.fine("
            ]
        },
        "chunk_5": {
            "plus_lines": [
                "                         if (ecdhec != null) {",
                "                            if (shc.algorithmConstraints != null &&",
                "                                    !shc.algorithmConstraints.permits(",
                "                                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                            ecdhec.popPublicKey)) {",
                "                                if (SSLLogger.isOn &&",
                "                                        SSLLogger.isOn(\"ssl,handshake\")) {",
                "                                    SSLLogger.warning(",
                "                                            \"ECDHE key share entry does not \" +",
                "                                            \"comply to algorithm constraints\");",
                "                                }",
                "                             } else {"
            ],
            "minus_lines": [
                "                         if (ecdhec != null) {",
                "                            if (!shc.algorithmConstraints.permits(",
                "                                    EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                    ecdhec.popPublicKey)) {",
                "                                SSLLogger.warning(",
                "                                        \"ECDHE key share entry does not \" +",
                "                                        \"comply to algorithm constraints\");",
                "                             } else {"
            ]
        },
        "chunk_6": {
            "plus_lines": [
                "                     } catch (IOException | GeneralSecurityException ex) {",
                "                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {",
                "                            SSLLogger.warning(",
                "                                    \"Cannot decode named group: \" +",
                "                                    NamedGroup.nameOf(entry.namedGroupId));",
                "                        }",
                "                     }"
            ],
            "minus_lines": [
                "                     } catch (IOException | GeneralSecurityException ex) {",
                "                        SSLLogger.warning(",
                "                                \"Cannot decode named group: \" +",
                "                                NamedGroup.nameOf(entry.namedGroupId));",
                "                     }"
            ]
        },
        "chunk_7": {
            "plus_lines": [
                "                         if (dhec != null) {",
                "                            if (shc.algorithmConstraints != null &&",
                "                                    !shc.algorithmConstraints.permits(",
                "                                            EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                            dhec.popPublicKey)) {",
                "                                if (SSLLogger.isOn &&",
                "                                        SSLLogger.isOn(\"ssl,handshake\")) {",
                "                                    SSLLogger.warning(",
                "                                            \"DHE key share entry does not \" +",
                "                                            \"comply to algorithm constraints\");",
                "                                }",
                "                             } else {"
            ],
            "minus_lines": [
                "                         if (dhec != null) {",
                "                            if (!shc.algorithmConstraints.permits(",
                "                                    EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                    dhec.popPublicKey)) {",
                "                                SSLLogger.warning(",
                "                                        \"DHE key share entry does not \" +",
                "                                        \"comply to algorithm constraints\");",
                "                             } else {"
            ]
        },
        "chunk_8": {
            "plus_lines": [
                "                     } catch (IOException | GeneralSecurityException ex) {",
                "                        if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {",
                "                            SSLLogger.warning(",
                "                                    \"Cannot decode named group: \" +",
                "                                    NamedGroup.nameOf(entry.namedGroupId));",
                "                        }",
                "                     }"
            ],
            "minus_lines": [
                "                     } catch (IOException | GeneralSecurityException ex) {",
                "                        SSLLogger.warning(",
                "                                \"Cannot decode named group: \" +",
                "                                NamedGroup.nameOf(entry.namedGroupId));",
                "                     }"
            ]
        },
        "chunk_9": {
            "plus_lines": [
                "                     if (ecdhec != null) {",
                "                        if (chc.algorithmConstraints != null &&",
                "                                !chc.algorithmConstraints.permits(",
                "                                        EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                        ecdhec.popPublicKey)) {",
                "                            throw chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                                     \"ECDHE key share entry does not \" +"
            ],
            "minus_lines": [
                "                     if (ecdhec != null) {",
                "                        if (!chc.algorithmConstraints.permits(",
                "                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                ecdhec.popPublicKey)) {",
                "                            throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,",
                "                                     \"ECDHE key share entry does not \" +"
            ]
        },
        "chunk_10": {
            "plus_lines": [
                "                     if (dhec != null) {",
                "                        if (chc.algorithmConstraints != null &&",
                "                                !chc.algorithmConstraints.permits(",
                "                                        EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                        dhec.popPublicKey)) {",
                "                            throw chc.conContext.fatal(Alert.INSUFFICIENT_SECURITY,",
                "                                     \"DHE key share entry does not \" +"
            ],
            "minus_lines": [
                "                     if (dhec != null) {",
                "                        if (!chc.algorithmConstraints.permits(",
                "                                EnumSet.of(CryptoPrimitive.KEY_AGREEMENT),",
                "                                dhec.popPublicKey)) {",
                "                            throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,",
                "                                     \"DHE key share entry does not \" +"
            ]
        }
    },
    "ssl/SSLLogger.java": {
        "chunk_11": {
            "plus_lines": [
                "     private static void log(Level level, String msg, Object... params) {",
                "        if (logger != null && logger.isLoggable(level)) {",
                "             if (params == null || params.length == 0) {"
            ],
            "minus_lines": [
                "     private static void log(Level level, String msg, Object... params) {",
                "        if (logger.isLoggable(level)) {",
                "             if (params == null || params.length == 0) {"
            ]
        }
    }
}
