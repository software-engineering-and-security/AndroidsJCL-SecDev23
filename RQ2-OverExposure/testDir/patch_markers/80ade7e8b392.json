{"x509/AVA.java": {"chunk_0": {"plus_lines": ["         }", "        oid = derval.data.getOID();", "         value = derval.data.getDerValue();"], "minus_lines": ["         }", "        oid = X500Name.intern(derval.data.getOID());", "         value = derval.data.getDerValue();"]}}, "x509/X500Name.java": {"chunk_1": {"plus_lines": [" /*", " * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."], "minus_lines": [" /*", " * Copyright (c) 1996, 2014, Oracle and/or its affiliates. All rights reserved.", "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."]}, "chunk_2": {"plus_lines": [], "minus_lines": ["     /*", "     * Maybe return a preallocated OID, to reduce storage costs", "     * and speed recognition of common X.500 attributes.", "     */", "    static ObjectIdentifier intern(ObjectIdentifier oid) {", "        ObjectIdentifier interned = internedOIDs.putIfAbsent(oid, oid);", "        return (interned == null) ? oid : interned;", "    }", "", "    private static final Map<ObjectIdentifier,ObjectIdentifier> internedOIDs", "                        = new HashMap<ObjectIdentifier,ObjectIdentifier>();", "", "    /*", "      * Selected OIDs from X.520"]}, "chunk_3": {"plus_lines": [" ", "    // OID for the \"CN=\" attribute, denoting a person's common name.", "    public static final ObjectIdentifier commonName_oid =", "            ObjectIdentifier.newInternal(commonName_data);", "", "    // OID for the \"SERIALNUMBER=\" attribute, denoting a serial number for.", "    // a name. Do not confuse with PKCS#9 issuerAndSerialNumber or the", "    // certificate serial number.", "    public static final ObjectIdentifier SERIALNUMBER_OID =", "            ObjectIdentifier.newInternal(SERIALNUMBER_DATA);", "", "    // OID for the \"C=\" attribute, denoting a country.", "    public static final ObjectIdentifier countryName_oid =", "            ObjectIdentifier.newInternal(countryName_data);", "", "    // OID for the \"L=\" attribute, denoting a locality (such as a city).", "    public static final ObjectIdentifier localityName_oid =", "            ObjectIdentifier.newInternal(localityName_data);", " "], "minus_lines": [" ", "    public static final ObjectIdentifier commonName_oid;", "    public static final ObjectIdentifier countryName_oid;", "    public static final ObjectIdentifier localityName_oid;", "    public static final ObjectIdentifier orgName_oid;", "    public static final ObjectIdentifier orgUnitName_oid;", "    public static final ObjectIdentifier stateName_oid;", "    public static final ObjectIdentifier streetAddress_oid;", "    public static final ObjectIdentifier title_oid;", "    public static final ObjectIdentifier DNQUALIFIER_OID;", "    public static final ObjectIdentifier SURNAME_OID;", "    public static final ObjectIdentifier GIVENNAME_OID;", "    public static final ObjectIdentifier INITIALS_OID;", "    public static final ObjectIdentifier GENERATIONQUALIFIER_OID;", "    public static final ObjectIdentifier ipAddress_oid;", "    public static final ObjectIdentifier DOMAIN_COMPONENT_OID;", "    public static final ObjectIdentifier userid_oid;", "    public static final ObjectIdentifier SERIALNUMBER_OID;", " "]}, "chunk_4": {"plus_lines": [" ", "    // OID for the \"O=\" attribute, denoting an organization name.", "    public static final ObjectIdentifier orgName_oid =", "            ObjectIdentifier.newInternal(orgName_data);", " "], "minus_lines": [" ", "    static {", "    /** OID for the \"CN=\" attribute, denoting a person's common name. */", "        commonName_oid = intern(ObjectIdentifier.newInternal(commonName_data));", " "]}, "chunk_5": {"plus_lines": [" ", "    // OID for the \"OU=\" attribute, denoting an organizational unit name.", "    public static final ObjectIdentifier orgUnitName_oid =", "            ObjectIdentifier.newInternal(orgUnitName_data);", " "], "minus_lines": [" ", "    /** OID for the \"SERIALNUMBER=\" attribute, denoting a serial number for.", "        a name. Do not confuse with PKCS#9 issuerAndSerialNumber or the", "        certificate serial number. */", "        SERIALNUMBER_OID = intern(ObjectIdentifier.newInternal(SERIALNUMBER_DATA));", "", "    /** OID for the \"C=\" attribute, denoting a country. */", "        countryName_oid = intern(ObjectIdentifier.newInternal(countryName_data));", " "]}, "chunk_6": {"plus_lines": [" ", "    // OID for the \"S=\" attribute, denoting a state (such as Delaware).", "    public static final ObjectIdentifier stateName_oid =", "            ObjectIdentifier.newInternal(stateName_data);", " "], "minus_lines": [" ", "    /** OID for the \"L=\" attribute, denoting a locality (such as a city) */", "        localityName_oid = intern(ObjectIdentifier.newInternal(localityName_data));", "", "    /** OID for the \"O=\" attribute, denoting an organization name */", "        orgName_oid = intern(ObjectIdentifier.newInternal(orgName_data));", " "]}, "chunk_7": {"plus_lines": [" ", "    // OID for the \"STREET=\" attribute, denoting a street address.", "    public static final ObjectIdentifier streetAddress_oid =", "            ObjectIdentifier.newInternal(streetAddress_data);", " "], "minus_lines": [" ", "    /** OID for the \"OU=\" attribute, denoting an organizational unit name */", "        orgUnitName_oid = intern(ObjectIdentifier.newInternal(orgUnitName_data));", " "]}, "chunk_8": {"plus_lines": [" ", "    // OID for the \"T=\" attribute, denoting a person's title.", "    public static final ObjectIdentifier title_oid =", "            ObjectIdentifier.newInternal(title_data);", " "], "minus_lines": [" ", "    /** OID for the \"S=\" attribute, denoting a state (such as Delaware) */", "        stateName_oid = intern(ObjectIdentifier.newInternal(stateName_data));", " "]}, "chunk_9": {"plus_lines": [" ", "    // OID for the \"DNQUALIFIER=\" or \"DNQ=\" attribute, denoting DN", "    // disambiguating information.", "    public static final ObjectIdentifier DNQUALIFIER_OID =", "            ObjectIdentifier.newInternal(DNQUALIFIER_DATA);", " "], "minus_lines": [" ", "    /** OID for the \"STREET=\" attribute, denoting a street address. */", "        streetAddress_oid = intern(ObjectIdentifier.newInternal(streetAddress_data));", "", "    /** OID for the \"T=\" attribute, denoting a person's title. */", "        title_oid = intern(ObjectIdentifier.newInternal(title_data));", " "]}, "chunk_10": {"plus_lines": [" ", "    // OID for the \"SURNAME=\" attribute, denoting a person's surname.", "    public static final ObjectIdentifier SURNAME_OID =", "            ObjectIdentifier.newInternal(SURNAME_DATA);", " "], "minus_lines": [" ", "    /** OID for the \"DNQUALIFIER=\" or \"DNQ=\" attribute, denoting DN", "        disambiguating information.*/", "        DNQUALIFIER_OID = intern(ObjectIdentifier.newInternal(DNQUALIFIER_DATA));", " "]}, "chunk_11": {"plus_lines": [" ", "    // OID for the \"GIVENNAME=\" attribute, denoting a person's given name.", "    public static final ObjectIdentifier GIVENNAME_OID =", "            ObjectIdentifier.newInternal(GIVENNAME_DATA);", " "], "minus_lines": [" ", "    /** OID for the \"SURNAME=\" attribute, denoting a person's surname.*/", "        SURNAME_OID = intern(ObjectIdentifier.newInternal(SURNAME_DATA));", " "]}, "chunk_12": {"plus_lines": [" ", "    // OID for the \"INITIALS=\" attribute, denoting a person's initials.", "    public static final ObjectIdentifier INITIALS_OID =", "            ObjectIdentifier.newInternal(INITIALS_DATA);", " "], "minus_lines": [" ", "    /** OID for the \"GIVENNAME=\" attribute, denoting a person's given name.*/", "        GIVENNAME_OID = intern(ObjectIdentifier.newInternal(GIVENNAME_DATA));", "", "    /** OID for the \"INITIALS=\" attribute, denoting a person's initials.*/", "        INITIALS_OID = intern(ObjectIdentifier.newInternal(INITIALS_DATA));", " "]}, "chunk_13": {"plus_lines": [" ", "    // OID for the \"GENERATION=\" attribute, denoting Jr., II, etc.", "    public static final ObjectIdentifier GENERATIONQUALIFIER_OID =", "            ObjectIdentifier.newInternal(GENERATIONQUALIFIER_DATA);", " "], "minus_lines": [" ", "    /** OID for the \"GENERATION=\" attribute, denoting Jr., II, etc.*/", "        GENERATIONQUALIFIER_OID =", "            intern(ObjectIdentifier.newInternal(GENERATIONQUALIFIER_DATA));", " "]}, "chunk_14": {"plus_lines": [" ", "    // OIDs from other sources which show up in X.500 names we", "    // expect to deal with often.", "    //", "    // OID for \"IP=\" IP address attributes, used with SKIP.", "    public static final ObjectIdentifier ipAddress_oid =", "            ObjectIdentifier.newInternal(ipAddress_data);", " "], "minus_lines": [" ", "    /*", "     * OIDs from other sources which show up in X.500 names we", "     * expect to deal with often", "     */", "    /** OID for \"IP=\" IP address attributes, used with SKIP. */", "        ipAddress_oid = intern(ObjectIdentifier.newInternal(ipAddress_data));", " "]}, "chunk_15": {"plus_lines": [" ", "    // Domain component OID from RFC 1274, RFC 2247, RFC 5280.", "    //", "    // OID for \"DC=\" domain component attributes, used with DNSNames in DN", "    // format.", "    public static final ObjectIdentifier DOMAIN_COMPONENT_OID =", "            ObjectIdentifier.newInternal(DOMAIN_COMPONENT_DATA);", " "], "minus_lines": [" ", "    /*", "     * Domain component OID from RFC 1274, RFC 2247, RFC 5280", "     */", " "]}, "chunk_16": {"plus_lines": [" ", "    // OID for \"UID=\" denoting a user id, defined in RFCs 1274 & 2798.", "    public static final ObjectIdentifier userid_oid =", "            ObjectIdentifier.newInternal(userid_data);", " "], "minus_lines": [" ", "    /*", "     * OID for \"DC=\" domain component attributes, used with DNSNames in DN", "     * format", "     */", "        DOMAIN_COMPONENT_OID =", "            intern(ObjectIdentifier.newInternal(DOMAIN_COMPONENT_DATA));", "", "    /** OID for \"UID=\" denoting a user id, defined in RFCs 1274 & 2798. */", "        userid_oid = intern(ObjectIdentifier.newInternal(userid_data));", "    }", " "]}}}