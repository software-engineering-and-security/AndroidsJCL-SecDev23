{
    "src/java.base/share/classes/java/util/Hashtable.java": {
        "chunk_0": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 1994, 2021, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_1": {
            "plus_lines": [
                "      */",
                "    private void readObject(ObjectInputStream s)",
                "             throws IOException, ClassNotFoundException {"
            ],
            "minus_lines": [
                "      */",
                "    private void readObject(java.io.ObjectInputStream s)",
                "             throws IOException, ClassNotFoundException {"
            ]
        },
        "chunk_2": {
            "plus_lines": [
                "      */",
                "    void readHashtable(ObjectInputStream s)",
                "             throws IOException, ClassNotFoundException {"
            ],
            "minus_lines": [
                "      */",
                "    void readHashtable(java.io.ObjectInputStream s)",
                "             throws IOException, ClassNotFoundException {"
            ]
        },
        "chunk_3": {
            "plus_lines": [],
            "minus_lines": [
                "             throws IOException, ClassNotFoundException {",
                "        // Read in the threshold and loadFactor",
                "        s.defaultReadObject();",
                " "
            ]
        },
        "chunk_4": {
            "plus_lines": [
                " ",
                "        ObjectInputStream.GetField fields = s.readFields();",
                "",
                "        // Read and validate loadFactor (ignore threshold - it will be re-computed)",
                "        float lf = fields.get(\"loadFactor\", 0.75f);",
                "        if (lf <= 0 || Float.isNaN(lf))",
                "            throw new StreamCorruptedException(\"Illegal load factor: \" + lf);",
                "        lf = Math.min(Math.max(0.25f, lf), 4.0f);",
                " "
            ],
            "minus_lines": [
                " ",
                "        // Validate loadFactor (ignore threshold - it will be re-computed)",
                "        if (loadFactor <= 0 || Float.isNaN(loadFactor))",
                "            throw new StreamCorruptedException(\"Illegal Load: \" + loadFactor);",
                " "
            ]
        },
        "chunk_5": {
            "plus_lines": [
                "         // (this is the invariant enforced with auto-growth)",
                "        origlength = Math.max(origlength, (int)(elements / lf) + 1);",
                " "
            ],
            "minus_lines": [
                "         // (this is the invariant enforced with auto-growth)",
                "        origlength = Math.max(origlength, (int)(elements / loadFactor) + 1);",
                " "
            ]
        },
        "chunk_6": {
            "plus_lines": [
                "         // Guard against the length ending up zero, that's not valid.",
                "        int length = (int)((elements + elements / 20) / lf) + 3;",
                "         if (length > elements && (length & 1) == 0)"
            ],
            "minus_lines": [
                "         // Guard against the length ending up zero, that's not valid.",
                "        int length = (int)((elements + elements / 20) / loadFactor) + 3;",
                "         if (length > elements && (length & 1) == 0)"
            ]
        },
        "chunk_7": {
            "plus_lines": [
                "         SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, length);",
                "        Hashtable.UnsafeHolder.putLoadFactor(this, lf);",
                "         table = new Entry<?,?>[length];"
            ],
            "minus_lines": []
        },
        "chunk_8": {
            "plus_lines": [
                "         table = new Entry<?,?>[length];",
                "        threshold = (int)Math.min(length * lf, MAX_ARRAY_SIZE + 1);",
                "         count = 0;"
            ],
            "minus_lines": [
                "         table = new Entry<?,?>[length];",
                "        threshold = (int)Math.min(length * loadFactor, MAX_ARRAY_SIZE + 1);",
                "         count = 0;"
            ]
        },
        "chunk_9": {
            "plus_lines": [
                " ",
                "    // Support for resetting final field during deserializing",
                "    private static final class UnsafeHolder {",
                "        private UnsafeHolder() { throw new InternalError(); }",
                "        private static final jdk.internal.misc.Unsafe unsafe",
                "                = jdk.internal.misc.Unsafe.getUnsafe();",
                "        private static final long LF_OFFSET",
                "                = unsafe.objectFieldOffset(Hashtable.class, \"loadFactor\");",
                "        static void putLoadFactor(Hashtable<?, ?> table, float lf) {",
                "            unsafe.putFloat(table, LF_OFFSET, lf);",
                "        }",
                "    }",
                "",
                "     /**"
            ],
            "minus_lines": []
        }
    },
    "src/java.base/share/classes/java/util/IdentityHashMap.java": {
        "chunk_10": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2000, 2021, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_11": {
            "plus_lines": [
                " ",
                "import java.io.ObjectInputStream;",
                "import java.io.ObjectOutputStream;",
                " import java.lang.reflect.Array;"
            ],
            "minus_lines": []
        },
        "chunk_12": {
            "plus_lines": [
                "      */",
                "    private void writeObject(ObjectOutputStream s)",
                "         throws java.io.IOException  {"
            ],
            "minus_lines": [
                "      */",
                "    private void writeObject(java.io.ObjectOutputStream s)",
                "         throws java.io.IOException  {"
            ]
        },
        "chunk_13": {
            "plus_lines": [
                "         throws java.io.IOException  {",
                "        // Write out size (number of mappings) and any hidden stuff",
                "         s.defaultWriteObject();"
            ],
            "minus_lines": [
                "         throws java.io.IOException  {",
                "        // Write out and any hidden stuff",
                "         s.defaultWriteObject();"
            ]
        },
        "chunk_14": {
            "plus_lines": [
                " ",
                "        // Write out size again (maintained for backward compatibility)",
                "         s.writeInt(size);"
            ],
            "minus_lines": [
                " ",
                "        // Write out size (number of Mappings)",
                "         s.writeInt(size);"
            ]
        },
        "chunk_15": {
            "plus_lines": [
                "      */",
                "    private void readObject(ObjectInputStream s)",
                "         throws java.io.IOException, ClassNotFoundException  {"
            ],
            "minus_lines": [
                "      */",
                "    private void readObject(java.io.ObjectInputStream s)",
                "         throws java.io.IOException, ClassNotFoundException  {"
            ]
        },
        "chunk_16": {
            "plus_lines": [
                "         throws java.io.IOException, ClassNotFoundException  {",
                "        // Size (number of mappings) is written to the stream twice",
                "        // Read first size value and ignore it",
                "        s.readFields();",
                " "
            ],
            "minus_lines": [
                "         throws java.io.IOException, ClassNotFoundException  {",
                "        // Read in any hidden stuff",
                "        s.defaultReadObject();",
                " "
            ]
        },
        "chunk_17": {
            "plus_lines": [
                " ",
                "        // Read second size value, validate and assign to size field",
                "         int size = s.readInt();"
            ],
            "minus_lines": [
                " ",
                "        // Read in size (number of Mappings)",
                "         int size = s.readInt();"
            ]
        },
        "chunk_18": {
            "plus_lines": [
                "         int cap = capacity(size);",
                "        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Object[].class, cap*2);",
                "        this.size = size;",
                "         init(cap);"
            ],
            "minus_lines": [
                "         int cap = capacity(size);",
                "        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Object[].class, cap);",
                "         init(cap);"
            ]
        }
    },
    "Hashtable/DeserializedLength.java": {
        "chunk_19": {
            "plus_lines": [
                " /*",
                " * Copyright (c) 2014, 2021, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ],
            "minus_lines": [
                " /*",
                " * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.",
                "  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER."
            ]
        },
        "chunk_20": {
            "plus_lines": [
                "         for (int elements : new int[]{10, 50, 500, 5000}) {",
                "            for (float loadFactor : new float[]{0.25f, 0.5f, 0.75f, 1.0f, 2.5f}) {",
                "                 ok &= testDeserializedLength(elements, loadFactor);"
            ],
            "minus_lines": [
                "         for (int elements : new int[]{10, 50, 500, 5000}) {",
                "            for (float loadFactor : new float[]{0.15f, 0.5f, 0.75f, 1.0f, 2.5f}) {",
                "                 ok &= testDeserializedLength(elements, loadFactor);"
            ]
        }
    }
}
