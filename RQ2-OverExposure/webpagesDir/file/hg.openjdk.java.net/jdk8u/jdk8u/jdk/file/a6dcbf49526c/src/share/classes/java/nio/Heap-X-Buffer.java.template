<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<link rel="icon" href="/jdk8u/jdk8u/jdk/static/nanoduke.ico" type="image/png" />
<meta name="robots" content="index, nofollow" />
<link rel="stylesheet" href="/jdk8u/jdk8u/jdk/static/style-paper.css" type="text/css" />
<script type="text/javascript" src="/jdk8u/jdk8u/jdk/static/mercurial.js"></script>

<title>jdk8u/jdk8u/jdk: a6dcbf49526c src/share/classes/java/nio/Heap-X-Buffer.java.template</title>
</head>
<body>

<div class="container">
<div class="menu">
<div class="logo">
<img src="/jdk8u/jdk8u/jdk/static/duke_pipes.png" width=75 height=90 border=0 alt="Duke!" />
</div>
<ul>
<li><a href="/jdk8u/jdk8u/jdk/shortlog/a6dcbf49526c">log</a></li>
<li><a href="/jdk8u/jdk8u/jdk/graph/a6dcbf49526c">graph</a></li>
<li><a href="/jdk8u/jdk8u/jdk/tags">tags</a></li>
<li><a href="/jdk8u/jdk8u/jdk/branches">branches</a></li>
</ul>
<ul>
<li><a href="/jdk8u/jdk8u/jdk/rev/a6dcbf49526c">changeset</a></li>
<li><a href="/jdk8u/jdk8u/jdk/file/a6dcbf49526c/src/share/classes/java/nio/">browse</a></li>
</ul>
<ul>
<li class="active">file</li>
<li><a href="/jdk8u/jdk8u/jdk/file/tip/src/share/classes/java/nio/Heap-X-Buffer.java.template">latest</a></li>
<li><a href="/jdk8u/jdk8u/jdk/diff/a6dcbf49526c/src/share/classes/java/nio/Heap-X-Buffer.java.template">diff</a></li>
<li><a href="/jdk8u/jdk8u/jdk/comparison/a6dcbf49526c/src/share/classes/java/nio/Heap-X-Buffer.java.template">comparison</a></li>
<li><a href="/jdk8u/jdk8u/jdk/annotate/a6dcbf49526c/src/share/classes/java/nio/Heap-X-Buffer.java.template">annotate</a></li>
<li><a href="/jdk8u/jdk8u/jdk/log/a6dcbf49526c/src/share/classes/java/nio/Heap-X-Buffer.java.template">file log</a></li>
<li><a href="/jdk8u/jdk8u/jdk/raw-file/a6dcbf49526c/src/share/classes/java/nio/Heap-X-Buffer.java.template">raw</a></li>
</ul>
<ul>
<li><a href="/jdk8u/jdk8u/jdk/help">help</a></li>
</ul>
</div>

<div class="main">
<h2 class="breadcrumb"><a href="/">OpenJDK</a> / <a href="/jdk8u">jdk8u</a> / <a href="/jdk8u/jdk8u">jdk8u</a> / <a href="/jdk8u/jdk8u/jdk">jdk</a> </h2>
<h3>view src/share/classes/java/nio/Heap-X-Buffer.java.template @ 13895:a6dcbf49526c</h3>

<form class="search" action="/jdk8u/jdk8u/jdk/log">

<p><input name="rev" id="search1" type="text" size="30" /></p>
<div id="hint">Find changesets by keywords (author, files, the commit message), revision
number or hash, or <a href="/jdk8u/jdk8u/jdk/help/revsets">revset expression</a>.</div>
</form>

<div class="description">8234841: Enhance buffering of byte buffers
Reviewed-by: alanb, ahgross, rhalade, psandoz</div>

<table id="changesetEntry">
<tr>
 <th class="author">author</th>
 <td class="author">&#114;&#111;&#98;&#109;</td>
</tr>
<tr>
 <th class="date">date</th>
 <td class="date age">Mon, 30 Mar 2020 05:13:42 +0100</td>
</tr>
<tr>
 <th class="author">parents</th>
 <td class="author"><a href="/jdk8u/jdk8u/jdk/file/f5fa8182f5af/src/share/classes/java/nio/Heap-X-Buffer.java.template">f5fa8182f5af</a> </td>
</tr>
<tr>
 <th class="author">children</th>
 <td class="author"><a href="/jdk8u/jdk8u/jdk/file/6fe9792e7893/src/share/classes/java/nio/Heap-X-Buffer.java.template">6fe9792e7893</a> </td>
</tr>
</table>

<div class="overflow">
<div class="sourcefirst linewraptoggle">line wrap: <a class="linewraplink" href="javascript:toggleLinewrap()">on</a></div>
<div class="sourcefirst"> line source</div>
<pre class="sourcelines stripes4 wrap">
<span id="l1">/*</span><a href="#l1"></a>
<span id="l2"> * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</span><a href="#l2"></a>
<span id="l3"> * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l3"></a>
<span id="l4"> *</span><a href="#l4"></a>
<span id="l5"> * This code is free software; you can redistribute it and/or modify it</span><a href="#l5"></a>
<span id="l6"> * under the terms of the GNU General Public License version 2 only, as</span><a href="#l6"></a>
<span id="l7"> * published by the Free Software Foundation.  Oracle designates this</span><a href="#l7"></a>
<span id="l8"> * particular file as subject to the &quot;Classpath&quot; exception as provided</span><a href="#l8"></a>
<span id="l9"> * by Oracle in the LICENSE file that accompanied this code.</span><a href="#l9"></a>
<span id="l10"> *</span><a href="#l10"></a>
<span id="l11"> * This code is distributed in the hope that it will be useful, but WITHOUT</span><a href="#l11"></a>
<span id="l12"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span><a href="#l12"></a>
<span id="l13"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span><a href="#l13"></a>
<span id="l14"> * version 2 for more details (a copy is included in the LICENSE file that</span><a href="#l14"></a>
<span id="l15"> * accompanied this code).</span><a href="#l15"></a>
<span id="l16"> *</span><a href="#l16"></a>
<span id="l17"> * You should have received a copy of the GNU General Public License version</span><a href="#l17"></a>
<span id="l18"> * 2 along with this work; if not, write to the Free Software Foundation,</span><a href="#l18"></a>
<span id="l19"> * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span><a href="#l19"></a>
<span id="l20"> *</span><a href="#l20"></a>
<span id="l21"> * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span><a href="#l21"></a>
<span id="l22"> * or visit www.oracle.com if you need additional information or have any</span><a href="#l22"></a>
<span id="l23"> * questions.</span><a href="#l23"></a>
<span id="l24"> */</span><a href="#l24"></a>
<span id="l25"></span><a href="#l25"></a>
<span id="l26">#warn This file is preprocessed before being compiled</span><a href="#l26"></a>
<span id="l27"></span><a href="#l27"></a>
<span id="l28">package java.nio;</span><a href="#l28"></a>
<span id="l29"></span><a href="#l29"></a>
<span id="l30"></span><a href="#l30"></a>
<span id="l31">/**</span><a href="#l31"></a>
<span id="l32">#if[rw]</span><a href="#l32"></a>
<span id="l33"> * A read/write Heap$Type$Buffer.</span><a href="#l33"></a>
<span id="l34">#else[rw]</span><a href="#l34"></a>
<span id="l35"> * A read-only Heap$Type$Buffer.  This class extends the corresponding</span><a href="#l35"></a>
<span id="l36"> * read/write class, overriding the mutation methods to throw a {@link</span><a href="#l36"></a>
<span id="l37"> * ReadOnlyBufferException} and overriding the view-buffer methods to return an</span><a href="#l37"></a>
<span id="l38"> * instance of this class rather than of the superclass.</span><a href="#l38"></a>
<span id="l39">#end[rw]</span><a href="#l39"></a>
<span id="l40"> */</span><a href="#l40"></a>
<span id="l41"></span><a href="#l41"></a>
<span id="l42">class Heap$Type$Buffer$RW$</span><a href="#l42"></a>
<span id="l43">    extends {#if[ro]?Heap}$Type$Buffer</span><a href="#l43"></a>
<span id="l44">{</span><a href="#l44"></a>
<span id="l45"></span><a href="#l45"></a>
<span id="l46">    // For speed these fields are actually declared in X-Buffer;</span><a href="#l46"></a>
<span id="l47">    // these declarations are here as documentation</span><a href="#l47"></a>
<span id="l48">    /*</span><a href="#l48"></a>
<span id="l49">#if[rw]</span><a href="#l49"></a>
<span id="l50">    protected final $type$[] hb;</span><a href="#l50"></a>
<span id="l51">    protected final int offset;</span><a href="#l51"></a>
<span id="l52">#end[rw]</span><a href="#l52"></a>
<span id="l53">    */</span><a href="#l53"></a>
<span id="l54"></span><a href="#l54"></a>
<span id="l55">    Heap$Type$Buffer$RW$(int cap, int lim) {            // package-private</span><a href="#l55"></a>
<span id="l56">#if[rw]</span><a href="#l56"></a>
<span id="l57">        super(-1, 0, lim, cap, new $type$[cap], 0);</span><a href="#l57"></a>
<span id="l58">        /*</span><a href="#l58"></a>
<span id="l59">        hb = new $type$[cap];</span><a href="#l59"></a>
<span id="l60">        offset = 0;</span><a href="#l60"></a>
<span id="l61">        */</span><a href="#l61"></a>
<span id="l62">#else[rw]</span><a href="#l62"></a>
<span id="l63">        super(cap, lim);</span><a href="#l63"></a>
<span id="l64">        this.isReadOnly = true;</span><a href="#l64"></a>
<span id="l65">#end[rw]</span><a href="#l65"></a>
<span id="l66">    }</span><a href="#l66"></a>
<span id="l67"></span><a href="#l67"></a>
<span id="l68">    Heap$Type$Buffer$RW$($type$[] buf, int off, int len) { // package-private</span><a href="#l68"></a>
<span id="l69">#if[rw]</span><a href="#l69"></a>
<span id="l70">        super(-1, off, off + len, buf.length, buf, 0);</span><a href="#l70"></a>
<span id="l71">        /*</span><a href="#l71"></a>
<span id="l72">        hb = buf;</span><a href="#l72"></a>
<span id="l73">        offset = 0;</span><a href="#l73"></a>
<span id="l74">        */</span><a href="#l74"></a>
<span id="l75">#else[rw]</span><a href="#l75"></a>
<span id="l76">        super(buf, off, len);</span><a href="#l76"></a>
<span id="l77">        this.isReadOnly = true;</span><a href="#l77"></a>
<span id="l78">#end[rw]</span><a href="#l78"></a>
<span id="l79">    }</span><a href="#l79"></a>
<span id="l80"></span><a href="#l80"></a>
<span id="l81">    protected Heap$Type$Buffer$RW$($type$[] buf,</span><a href="#l81"></a>
<span id="l82">                                   int mark, int pos, int lim, int cap,</span><a href="#l82"></a>
<span id="l83">                                   int off)</span><a href="#l83"></a>
<span id="l84">    {</span><a href="#l84"></a>
<span id="l85">#if[rw]</span><a href="#l85"></a>
<span id="l86">        super(mark, pos, lim, cap, buf, off);</span><a href="#l86"></a>
<span id="l87">        /*</span><a href="#l87"></a>
<span id="l88">        hb = buf;</span><a href="#l88"></a>
<span id="l89">        offset = off;</span><a href="#l89"></a>
<span id="l90">        */</span><a href="#l90"></a>
<span id="l91">#else[rw]</span><a href="#l91"></a>
<span id="l92">        super(buf, mark, pos, lim, cap, off);</span><a href="#l92"></a>
<span id="l93">        this.isReadOnly = true;</span><a href="#l93"></a>
<span id="l94">#end[rw]</span><a href="#l94"></a>
<span id="l95">    }</span><a href="#l95"></a>
<span id="l96"></span><a href="#l96"></a>
<span id="l97">    public $Type$Buffer slice() {</span><a href="#l97"></a>
<span id="l98">        int pos = this.position();</span><a href="#l98"></a>
<span id="l99">        int lim = this.limit();</span><a href="#l99"></a>
<span id="l100">        int rem = (pos &lt;= lim ? lim - pos : 0);</span><a href="#l100"></a>
<span id="l101">        return new Heap$Type$Buffer$RW$(hb,</span><a href="#l101"></a>
<span id="l102">                                        -1,</span><a href="#l102"></a>
<span id="l103">                                        0,</span><a href="#l103"></a>
<span id="l104">                                        rem,</span><a href="#l104"></a>
<span id="l105">                                        rem,</span><a href="#l105"></a>
<span id="l106">                                        pos + offset);</span><a href="#l106"></a>
<span id="l107">    }</span><a href="#l107"></a>
<span id="l108"></span><a href="#l108"></a>
<span id="l109">    public $Type$Buffer duplicate() {</span><a href="#l109"></a>
<span id="l110">        return new Heap$Type$Buffer$RW$(hb,</span><a href="#l110"></a>
<span id="l111">                                        this.markValue(),</span><a href="#l111"></a>
<span id="l112">                                        this.position(),</span><a href="#l112"></a>
<span id="l113">                                        this.limit(),</span><a href="#l113"></a>
<span id="l114">                                        this.capacity(),</span><a href="#l114"></a>
<span id="l115">                                        offset);</span><a href="#l115"></a>
<span id="l116">    }</span><a href="#l116"></a>
<span id="l117"></span><a href="#l117"></a>
<span id="l118">    public $Type$Buffer asReadOnlyBuffer() {</span><a href="#l118"></a>
<span id="l119">#if[rw]</span><a href="#l119"></a>
<span id="l120">        return new Heap$Type$BufferR(hb,</span><a href="#l120"></a>
<span id="l121">                                     this.markValue(),</span><a href="#l121"></a>
<span id="l122">                                     this.position(),</span><a href="#l122"></a>
<span id="l123">                                     this.limit(),</span><a href="#l123"></a>
<span id="l124">                                     this.capacity(),</span><a href="#l124"></a>
<span id="l125">                                     offset);</span><a href="#l125"></a>
<span id="l126">#else[rw]</span><a href="#l126"></a>
<span id="l127">        return duplicate();</span><a href="#l127"></a>
<span id="l128">#end[rw]</span><a href="#l128"></a>
<span id="l129">    }</span><a href="#l129"></a>
<span id="l130"></span><a href="#l130"></a>
<span id="l131">#if[rw]</span><a href="#l131"></a>
<span id="l132"></span><a href="#l132"></a>
<span id="l133">    protected int ix(int i) {</span><a href="#l133"></a>
<span id="l134">        return i + offset;</span><a href="#l134"></a>
<span id="l135">    }</span><a href="#l135"></a>
<span id="l136"></span><a href="#l136"></a>
<span id="l137">    public $type$ get() {</span><a href="#l137"></a>
<span id="l138">        return hb[ix(nextGetIndex())];</span><a href="#l138"></a>
<span id="l139">    }</span><a href="#l139"></a>
<span id="l140"></span><a href="#l140"></a>
<span id="l141">    public $type$ get(int i) {</span><a href="#l141"></a>
<span id="l142">        return hb[ix(checkIndex(i))];</span><a href="#l142"></a>
<span id="l143">    }</span><a href="#l143"></a>
<span id="l144"></span><a href="#l144"></a>
<span id="l145">#if[streamableType]</span><a href="#l145"></a>
<span id="l146">    $type$ getUnchecked(int i) {</span><a href="#l146"></a>
<span id="l147">	return hb[ix(i)];</span><a href="#l147"></a>
<span id="l148">    }</span><a href="#l148"></a>
<span id="l149">#end[streamableType]</span><a href="#l149"></a>
<span id="l150"></span><a href="#l150"></a>
<span id="l151">    public $Type$Buffer get($type$[] dst, int offset, int length) {</span><a href="#l151"></a>
<span id="l152">        checkBounds(offset, length, dst.length);</span><a href="#l152"></a>
<span id="l153">        int pos = position();</span><a href="#l153"></a>
<span id="l154">        if (length &gt; limit() - pos)</span><a href="#l154"></a>
<span id="l155">            throw new BufferUnderflowException();</span><a href="#l155"></a>
<span id="l156">        System.arraycopy(hb, ix(pos), dst, offset, length);</span><a href="#l156"></a>
<span id="l157">        position(pos + length);</span><a href="#l157"></a>
<span id="l158">        return this;</span><a href="#l158"></a>
<span id="l159">    }</span><a href="#l159"></a>
<span id="l160"></span><a href="#l160"></a>
<span id="l161">    public boolean isDirect() {</span><a href="#l161"></a>
<span id="l162">        return false;</span><a href="#l162"></a>
<span id="l163">    }</span><a href="#l163"></a>
<span id="l164"></span><a href="#l164"></a>
<span id="l165">#end[rw]</span><a href="#l165"></a>
<span id="l166"></span><a href="#l166"></a>
<span id="l167">    public boolean isReadOnly() {</span><a href="#l167"></a>
<span id="l168">        return {#if[rw]?false:true};</span><a href="#l168"></a>
<span id="l169">    }</span><a href="#l169"></a>
<span id="l170"></span><a href="#l170"></a>
<span id="l171">    public $Type$Buffer put($type$ x) {</span><a href="#l171"></a>
<span id="l172">#if[rw]</span><a href="#l172"></a>
<span id="l173">        hb[ix(nextPutIndex())] = x;</span><a href="#l173"></a>
<span id="l174">        return this;</span><a href="#l174"></a>
<span id="l175">#else[rw]</span><a href="#l175"></a>
<span id="l176">        throw new ReadOnlyBufferException();</span><a href="#l176"></a>
<span id="l177">#end[rw]</span><a href="#l177"></a>
<span id="l178">    }</span><a href="#l178"></a>
<span id="l179"></span><a href="#l179"></a>
<span id="l180">    public $Type$Buffer put(int i, $type$ x) {</span><a href="#l180"></a>
<span id="l181">#if[rw]</span><a href="#l181"></a>
<span id="l182">        hb[ix(checkIndex(i))] = x;</span><a href="#l182"></a>
<span id="l183">        return this;</span><a href="#l183"></a>
<span id="l184">#else[rw]</span><a href="#l184"></a>
<span id="l185">        throw new ReadOnlyBufferException();</span><a href="#l185"></a>
<span id="l186">#end[rw]</span><a href="#l186"></a>
<span id="l187">    }</span><a href="#l187"></a>
<span id="l188"></span><a href="#l188"></a>
<span id="l189">    public $Type$Buffer put($type$[] src, int offset, int length) {</span><a href="#l189"></a>
<span id="l190">#if[rw]</span><a href="#l190"></a>
<span id="l191">        checkBounds(offset, length, src.length);</span><a href="#l191"></a>
<span id="l192">        int pos = position();</span><a href="#l192"></a>
<span id="l193">        if (length &gt; limit() - pos)</span><a href="#l193"></a>
<span id="l194">            throw new BufferOverflowException();</span><a href="#l194"></a>
<span id="l195">        System.arraycopy(src, offset, hb, ix(pos), length);</span><a href="#l195"></a>
<span id="l196">        position(pos + length);</span><a href="#l196"></a>
<span id="l197">        return this;</span><a href="#l197"></a>
<span id="l198">#else[rw]</span><a href="#l198"></a>
<span id="l199">        throw new ReadOnlyBufferException();</span><a href="#l199"></a>
<span id="l200">#end[rw]</span><a href="#l200"></a>
<span id="l201">    }</span><a href="#l201"></a>
<span id="l202"></span><a href="#l202"></a>
<span id="l203">    public $Type$Buffer put($Type$Buffer src) {</span><a href="#l203"></a>
<span id="l204">#if[rw]</span><a href="#l204"></a>
<span id="l205">        if (src instanceof Heap$Type$Buffer) {</span><a href="#l205"></a>
<span id="l206">            if (src == this)</span><a href="#l206"></a>
<span id="l207">                throw new IllegalArgumentException();</span><a href="#l207"></a>
<span id="l208">            Heap$Type$Buffer sb = (Heap$Type$Buffer)src;</span><a href="#l208"></a>
<span id="l209">            int pos = position();</span><a href="#l209"></a>
<span id="l210">            int sbpos = sb.position();</span><a href="#l210"></a>
<span id="l211">            int n = sb.limit() - sbpos;</span><a href="#l211"></a>
<span id="l212">            if (n &gt; limit() - pos)</span><a href="#l212"></a>
<span id="l213">                throw new BufferOverflowException();</span><a href="#l213"></a>
<span id="l214">            System.arraycopy(sb.hb, sb.ix(sbpos),</span><a href="#l214"></a>
<span id="l215">                             hb, ix(pos), n);</span><a href="#l215"></a>
<span id="l216">            sb.position(sbpos + n);</span><a href="#l216"></a>
<span id="l217">            position(pos + n);</span><a href="#l217"></a>
<span id="l218">        } else if (src.isDirect()) {</span><a href="#l218"></a>
<span id="l219">            int n = src.remaining();</span><a href="#l219"></a>
<span id="l220">            int pos = position();</span><a href="#l220"></a>
<span id="l221">            if (n &gt; limit() - pos)</span><a href="#l221"></a>
<span id="l222">                throw new BufferOverflowException();</span><a href="#l222"></a>
<span id="l223">            src.get(hb, ix(pos), n);</span><a href="#l223"></a>
<span id="l224">            position(pos + n);</span><a href="#l224"></a>
<span id="l225">        } else {</span><a href="#l225"></a>
<span id="l226">            super.put(src);</span><a href="#l226"></a>
<span id="l227">        }</span><a href="#l227"></a>
<span id="l228">        return this;</span><a href="#l228"></a>
<span id="l229">#else[rw]</span><a href="#l229"></a>
<span id="l230">        throw new ReadOnlyBufferException();</span><a href="#l230"></a>
<span id="l231">#end[rw]</span><a href="#l231"></a>
<span id="l232">    }</span><a href="#l232"></a>
<span id="l233"></span><a href="#l233"></a>
<span id="l234">    public $Type$Buffer compact() {</span><a href="#l234"></a>
<span id="l235">#if[rw]</span><a href="#l235"></a>
<span id="l236">        int pos = position();</span><a href="#l236"></a>
<span id="l237">        int rem = limit() - pos;</span><a href="#l237"></a>
<span id="l238">        System.arraycopy(hb, ix(pos), hb, ix(0), rem);</span><a href="#l238"></a>
<span id="l239">        position(rem);</span><a href="#l239"></a>
<span id="l240">        limit(capacity());</span><a href="#l240"></a>
<span id="l241">        discardMark();</span><a href="#l241"></a>
<span id="l242">        return this;</span><a href="#l242"></a>
<span id="l243">#else[rw]</span><a href="#l243"></a>
<span id="l244">        throw new ReadOnlyBufferException();</span><a href="#l244"></a>
<span id="l245">#end[rw]</span><a href="#l245"></a>
<span id="l246">    }</span><a href="#l246"></a>
<span id="l247"></span><a href="#l247"></a>
<span id="l248"></span><a href="#l248"></a>
<span id="l249"></span><a href="#l249"></a>
<span id="l250">#if[byte]</span><a href="#l250"></a>
<span id="l251"></span><a href="#l251"></a>
<span id="l252">    byte _get(int i) {                          // package-private</span><a href="#l252"></a>
<span id="l253">        return hb[i];</span><a href="#l253"></a>
<span id="l254">    }</span><a href="#l254"></a>
<span id="l255"></span><a href="#l255"></a>
<span id="l256">    void _put(int i, byte b) {                  // package-private</span><a href="#l256"></a>
<span id="l257">#if[rw]</span><a href="#l257"></a>
<span id="l258">        hb[i] = b;</span><a href="#l258"></a>
<span id="l259">#else[rw]</span><a href="#l259"></a>
<span id="l260">        throw new ReadOnlyBufferException();</span><a href="#l260"></a>
<span id="l261">#end[rw]</span><a href="#l261"></a>
<span id="l262">    }</span><a href="#l262"></a>
<span id="l263"></span><a href="#l263"></a>
<span id="l264">    // char</span><a href="#l264"></a>
<span id="l265"></span><a href="#l265"></a>
<span id="l266">#if[rw]</span><a href="#l266"></a>
<span id="l267"></span><a href="#l267"></a>
<span id="l268">    public char getChar() {</span><a href="#l268"></a>
<span id="l269">        return Bits.getChar(this, ix(nextGetIndex(2)), bigEndian);</span><a href="#l269"></a>
<span id="l270">    }</span><a href="#l270"></a>
<span id="l271"></span><a href="#l271"></a>
<span id="l272">    public char getChar(int i) {</span><a href="#l272"></a>
<span id="l273">        return Bits.getChar(this, ix(checkIndex(i, 2)), bigEndian);</span><a href="#l273"></a>
<span id="l274">    }</span><a href="#l274"></a>
<span id="l275"></span><a href="#l275"></a>
<span id="l276">#end[rw]</span><a href="#l276"></a>
<span id="l277"></span><a href="#l277"></a>
<span id="l278">    public $Type$Buffer putChar(char x) {</span><a href="#l278"></a>
<span id="l279">#if[rw]</span><a href="#l279"></a>
<span id="l280">        Bits.putChar(this, ix(nextPutIndex(2)), x, bigEndian);</span><a href="#l280"></a>
<span id="l281">        return this;</span><a href="#l281"></a>
<span id="l282">#else[rw]</span><a href="#l282"></a>
<span id="l283">        throw new ReadOnlyBufferException();</span><a href="#l283"></a>
<span id="l284">#end[rw]</span><a href="#l284"></a>
<span id="l285">    }</span><a href="#l285"></a>
<span id="l286"></span><a href="#l286"></a>
<span id="l287">    public $Type$Buffer putChar(int i, char x) {</span><a href="#l287"></a>
<span id="l288">#if[rw]</span><a href="#l288"></a>
<span id="l289">        Bits.putChar(this, ix(checkIndex(i, 2)), x, bigEndian);</span><a href="#l289"></a>
<span id="l290">        return this;</span><a href="#l290"></a>
<span id="l291">#else[rw]</span><a href="#l291"></a>
<span id="l292">        throw new ReadOnlyBufferException();</span><a href="#l292"></a>
<span id="l293">#end[rw]</span><a href="#l293"></a>
<span id="l294">    }</span><a href="#l294"></a>
<span id="l295"></span><a href="#l295"></a>
<span id="l296">    public CharBuffer asCharBuffer() {</span><a href="#l296"></a>
<span id="l297">        int pos = position();</span><a href="#l297"></a>
<span id="l298">        int size = (limit() - pos) &gt;&gt; 1;</span><a href="#l298"></a>
<span id="l299">        int off = offset + pos;</span><a href="#l299"></a>
<span id="l300">        return (bigEndian</span><a href="#l300"></a>
<span id="l301">                ? (CharBuffer)(new ByteBufferAsCharBuffer$RW$B(this,</span><a href="#l301"></a>
<span id="l302">                                                               -1,</span><a href="#l302"></a>
<span id="l303">                                                               0,</span><a href="#l303"></a>
<span id="l304">                                                               size,</span><a href="#l304"></a>
<span id="l305">                                                               size,</span><a href="#l305"></a>
<span id="l306">                                                               off))</span><a href="#l306"></a>
<span id="l307">                : (CharBuffer)(new ByteBufferAsCharBuffer$RW$L(this,</span><a href="#l307"></a>
<span id="l308">                                                               -1,</span><a href="#l308"></a>
<span id="l309">                                                               0,</span><a href="#l309"></a>
<span id="l310">                                                               size,</span><a href="#l310"></a>
<span id="l311">                                                               size,</span><a href="#l311"></a>
<span id="l312">                                                               off)));</span><a href="#l312"></a>
<span id="l313">    }</span><a href="#l313"></a>
<span id="l314"></span><a href="#l314"></a>
<span id="l315"></span><a href="#l315"></a>
<span id="l316">    // short</span><a href="#l316"></a>
<span id="l317"></span><a href="#l317"></a>
<span id="l318">#if[rw]</span><a href="#l318"></a>
<span id="l319"></span><a href="#l319"></a>
<span id="l320">    public short getShort() {</span><a href="#l320"></a>
<span id="l321">        return Bits.getShort(this, ix(nextGetIndex(2)), bigEndian);</span><a href="#l321"></a>
<span id="l322">    }</span><a href="#l322"></a>
<span id="l323"></span><a href="#l323"></a>
<span id="l324">    public short getShort(int i) {</span><a href="#l324"></a>
<span id="l325">        return Bits.getShort(this, ix(checkIndex(i, 2)), bigEndian);</span><a href="#l325"></a>
<span id="l326">    }</span><a href="#l326"></a>
<span id="l327"></span><a href="#l327"></a>
<span id="l328">#end[rw]</span><a href="#l328"></a>
<span id="l329"></span><a href="#l329"></a>
<span id="l330">    public $Type$Buffer putShort(short x) {</span><a href="#l330"></a>
<span id="l331">#if[rw]</span><a href="#l331"></a>
<span id="l332">        Bits.putShort(this, ix(nextPutIndex(2)), x, bigEndian);</span><a href="#l332"></a>
<span id="l333">        return this;</span><a href="#l333"></a>
<span id="l334">#else[rw]</span><a href="#l334"></a>
<span id="l335">        throw new ReadOnlyBufferException();</span><a href="#l335"></a>
<span id="l336">#end[rw]</span><a href="#l336"></a>
<span id="l337">    }</span><a href="#l337"></a>
<span id="l338"></span><a href="#l338"></a>
<span id="l339">    public $Type$Buffer putShort(int i, short x) {</span><a href="#l339"></a>
<span id="l340">#if[rw]</span><a href="#l340"></a>
<span id="l341">        Bits.putShort(this, ix(checkIndex(i, 2)), x, bigEndian);</span><a href="#l341"></a>
<span id="l342">        return this;</span><a href="#l342"></a>
<span id="l343">#else[rw]</span><a href="#l343"></a>
<span id="l344">        throw new ReadOnlyBufferException();</span><a href="#l344"></a>
<span id="l345">#end[rw]</span><a href="#l345"></a>
<span id="l346">    }</span><a href="#l346"></a>
<span id="l347"></span><a href="#l347"></a>
<span id="l348">    public ShortBuffer asShortBuffer() {</span><a href="#l348"></a>
<span id="l349">        int pos = position();</span><a href="#l349"></a>
<span id="l350">        int size = (limit() - pos) &gt;&gt; 1;</span><a href="#l350"></a>
<span id="l351">        int off = offset + pos;</span><a href="#l351"></a>
<span id="l352">        return (bigEndian</span><a href="#l352"></a>
<span id="l353">                ? (ShortBuffer)(new ByteBufferAsShortBuffer$RW$B(this,</span><a href="#l353"></a>
<span id="l354">                                                                 -1,</span><a href="#l354"></a>
<span id="l355">                                                                 0,</span><a href="#l355"></a>
<span id="l356">                                                                 size,</span><a href="#l356"></a>
<span id="l357">                                                                 size,</span><a href="#l357"></a>
<span id="l358">                                                                 off))</span><a href="#l358"></a>
<span id="l359">                : (ShortBuffer)(new ByteBufferAsShortBuffer$RW$L(this,</span><a href="#l359"></a>
<span id="l360">                                                                 -1,</span><a href="#l360"></a>
<span id="l361">                                                                 0,</span><a href="#l361"></a>
<span id="l362">                                                                 size,</span><a href="#l362"></a>
<span id="l363">                                                                 size,</span><a href="#l363"></a>
<span id="l364">                                                                 off)));</span><a href="#l364"></a>
<span id="l365">    }</span><a href="#l365"></a>
<span id="l366"></span><a href="#l366"></a>
<span id="l367"></span><a href="#l367"></a>
<span id="l368">    // int</span><a href="#l368"></a>
<span id="l369"></span><a href="#l369"></a>
<span id="l370">#if[rw]</span><a href="#l370"></a>
<span id="l371"></span><a href="#l371"></a>
<span id="l372">    public int getInt() {</span><a href="#l372"></a>
<span id="l373">        return Bits.getInt(this, ix(nextGetIndex(4)), bigEndian);</span><a href="#l373"></a>
<span id="l374">    }</span><a href="#l374"></a>
<span id="l375"></span><a href="#l375"></a>
<span id="l376">    public int getInt(int i) {</span><a href="#l376"></a>
<span id="l377">        return Bits.getInt(this, ix(checkIndex(i, 4)), bigEndian);</span><a href="#l377"></a>
<span id="l378">    }</span><a href="#l378"></a>
<span id="l379"></span><a href="#l379"></a>
<span id="l380">#end[rw]</span><a href="#l380"></a>
<span id="l381"></span><a href="#l381"></a>
<span id="l382">    public $Type$Buffer putInt(int x) {</span><a href="#l382"></a>
<span id="l383">#if[rw]</span><a href="#l383"></a>
<span id="l384">        Bits.putInt(this, ix(nextPutIndex(4)), x, bigEndian);</span><a href="#l384"></a>
<span id="l385">        return this;</span><a href="#l385"></a>
<span id="l386">#else[rw]</span><a href="#l386"></a>
<span id="l387">        throw new ReadOnlyBufferException();</span><a href="#l387"></a>
<span id="l388">#end[rw]</span><a href="#l388"></a>
<span id="l389">    }</span><a href="#l389"></a>
<span id="l390"></span><a href="#l390"></a>
<span id="l391">    public $Type$Buffer putInt(int i, int x) {</span><a href="#l391"></a>
<span id="l392">#if[rw]</span><a href="#l392"></a>
<span id="l393">        Bits.putInt(this, ix(checkIndex(i, 4)), x, bigEndian);</span><a href="#l393"></a>
<span id="l394">        return this;</span><a href="#l394"></a>
<span id="l395">#else[rw]</span><a href="#l395"></a>
<span id="l396">        throw new ReadOnlyBufferException();</span><a href="#l396"></a>
<span id="l397">#end[rw]</span><a href="#l397"></a>
<span id="l398">    }</span><a href="#l398"></a>
<span id="l399"></span><a href="#l399"></a>
<span id="l400">    public IntBuffer asIntBuffer() {</span><a href="#l400"></a>
<span id="l401">        int pos = position();</span><a href="#l401"></a>
<span id="l402">        int size = (limit() - pos) &gt;&gt; 2;</span><a href="#l402"></a>
<span id="l403">        int off = offset + pos;</span><a href="#l403"></a>
<span id="l404">        return (bigEndian</span><a href="#l404"></a>
<span id="l405">                ? (IntBuffer)(new ByteBufferAsIntBuffer$RW$B(this,</span><a href="#l405"></a>
<span id="l406">                                                             -1,</span><a href="#l406"></a>
<span id="l407">                                                             0,</span><a href="#l407"></a>
<span id="l408">                                                             size,</span><a href="#l408"></a>
<span id="l409">                                                             size,</span><a href="#l409"></a>
<span id="l410">                                                             off))</span><a href="#l410"></a>
<span id="l411">                : (IntBuffer)(new ByteBufferAsIntBuffer$RW$L(this,</span><a href="#l411"></a>
<span id="l412">                                                             -1,</span><a href="#l412"></a>
<span id="l413">                                                             0,</span><a href="#l413"></a>
<span id="l414">                                                             size,</span><a href="#l414"></a>
<span id="l415">                                                             size,</span><a href="#l415"></a>
<span id="l416">                                                             off)));</span><a href="#l416"></a>
<span id="l417">    }</span><a href="#l417"></a>
<span id="l418"></span><a href="#l418"></a>
<span id="l419"></span><a href="#l419"></a>
<span id="l420">    // long</span><a href="#l420"></a>
<span id="l421"></span><a href="#l421"></a>
<span id="l422">#if[rw]</span><a href="#l422"></a>
<span id="l423"></span><a href="#l423"></a>
<span id="l424">    public long getLong() {</span><a href="#l424"></a>
<span id="l425">        return Bits.getLong(this, ix(nextGetIndex(8)), bigEndian);</span><a href="#l425"></a>
<span id="l426">    }</span><a href="#l426"></a>
<span id="l427"></span><a href="#l427"></a>
<span id="l428">    public long getLong(int i) {</span><a href="#l428"></a>
<span id="l429">        return Bits.getLong(this, ix(checkIndex(i, 8)), bigEndian);</span><a href="#l429"></a>
<span id="l430">    }</span><a href="#l430"></a>
<span id="l431"></span><a href="#l431"></a>
<span id="l432">#end[rw]</span><a href="#l432"></a>
<span id="l433"></span><a href="#l433"></a>
<span id="l434">    public $Type$Buffer putLong(long x) {</span><a href="#l434"></a>
<span id="l435">#if[rw]</span><a href="#l435"></a>
<span id="l436">        Bits.putLong(this, ix(nextPutIndex(8)), x, bigEndian);</span><a href="#l436"></a>
<span id="l437">        return this;</span><a href="#l437"></a>
<span id="l438">#else[rw]</span><a href="#l438"></a>
<span id="l439">        throw new ReadOnlyBufferException();</span><a href="#l439"></a>
<span id="l440">#end[rw]</span><a href="#l440"></a>
<span id="l441">    }</span><a href="#l441"></a>
<span id="l442"></span><a href="#l442"></a>
<span id="l443">    public $Type$Buffer putLong(int i, long x) {</span><a href="#l443"></a>
<span id="l444">#if[rw]</span><a href="#l444"></a>
<span id="l445">        Bits.putLong(this, ix(checkIndex(i, 8)), x, bigEndian);</span><a href="#l445"></a>
<span id="l446">        return this;</span><a href="#l446"></a>
<span id="l447">#else[rw]</span><a href="#l447"></a>
<span id="l448">        throw new ReadOnlyBufferException();</span><a href="#l448"></a>
<span id="l449">#end[rw]</span><a href="#l449"></a>
<span id="l450">    }</span><a href="#l450"></a>
<span id="l451"></span><a href="#l451"></a>
<span id="l452">    public LongBuffer asLongBuffer() {</span><a href="#l452"></a>
<span id="l453">        int pos = position();</span><a href="#l453"></a>
<span id="l454">        int size = (limit() - pos) &gt;&gt; 3;</span><a href="#l454"></a>
<span id="l455">        int off = offset + pos;</span><a href="#l455"></a>
<span id="l456">        return (bigEndian</span><a href="#l456"></a>
<span id="l457">                ? (LongBuffer)(new ByteBufferAsLongBuffer$RW$B(this,</span><a href="#l457"></a>
<span id="l458">                                                               -1,</span><a href="#l458"></a>
<span id="l459">                                                               0,</span><a href="#l459"></a>
<span id="l460">                                                               size,</span><a href="#l460"></a>
<span id="l461">                                                               size,</span><a href="#l461"></a>
<span id="l462">                                                               off))</span><a href="#l462"></a>
<span id="l463">                : (LongBuffer)(new ByteBufferAsLongBuffer$RW$L(this,</span><a href="#l463"></a>
<span id="l464">                                                               -1,</span><a href="#l464"></a>
<span id="l465">                                                               0,</span><a href="#l465"></a>
<span id="l466">                                                               size,</span><a href="#l466"></a>
<span id="l467">                                                               size,</span><a href="#l467"></a>
<span id="l468">                                                               off)));</span><a href="#l468"></a>
<span id="l469">    }</span><a href="#l469"></a>
<span id="l470"></span><a href="#l470"></a>
<span id="l471"></span><a href="#l471"></a>
<span id="l472">    // float</span><a href="#l472"></a>
<span id="l473"></span><a href="#l473"></a>
<span id="l474">#if[rw]</span><a href="#l474"></a>
<span id="l475"></span><a href="#l475"></a>
<span id="l476">    public float getFloat() {</span><a href="#l476"></a>
<span id="l477">        return Bits.getFloat(this, ix(nextGetIndex(4)), bigEndian);</span><a href="#l477"></a>
<span id="l478">    }</span><a href="#l478"></a>
<span id="l479"></span><a href="#l479"></a>
<span id="l480">    public float getFloat(int i) {</span><a href="#l480"></a>
<span id="l481">        return Bits.getFloat(this, ix(checkIndex(i, 4)), bigEndian);</span><a href="#l481"></a>
<span id="l482">    }</span><a href="#l482"></a>
<span id="l483"></span><a href="#l483"></a>
<span id="l484">#end[rw]</span><a href="#l484"></a>
<span id="l485"></span><a href="#l485"></a>
<span id="l486">    public $Type$Buffer putFloat(float x) {</span><a href="#l486"></a>
<span id="l487">#if[rw]</span><a href="#l487"></a>
<span id="l488">        Bits.putFloat(this, ix(nextPutIndex(4)), x, bigEndian);</span><a href="#l488"></a>
<span id="l489">        return this;</span><a href="#l489"></a>
<span id="l490">#else[rw]</span><a href="#l490"></a>
<span id="l491">        throw new ReadOnlyBufferException();</span><a href="#l491"></a>
<span id="l492">#end[rw]</span><a href="#l492"></a>
<span id="l493">    }</span><a href="#l493"></a>
<span id="l494"></span><a href="#l494"></a>
<span id="l495">    public $Type$Buffer putFloat(int i, float x) {</span><a href="#l495"></a>
<span id="l496">#if[rw]</span><a href="#l496"></a>
<span id="l497">        Bits.putFloat(this, ix(checkIndex(i, 4)), x, bigEndian);</span><a href="#l497"></a>
<span id="l498">        return this;</span><a href="#l498"></a>
<span id="l499">#else[rw]</span><a href="#l499"></a>
<span id="l500">        throw new ReadOnlyBufferException();</span><a href="#l500"></a>
<span id="l501">#end[rw]</span><a href="#l501"></a>
<span id="l502">    }</span><a href="#l502"></a>
<span id="l503"></span><a href="#l503"></a>
<span id="l504">    public FloatBuffer asFloatBuffer() {</span><a href="#l504"></a>
<span id="l505">        int pos = position();</span><a href="#l505"></a>
<span id="l506">        int size = (limit() - pos) &gt;&gt; 2;</span><a href="#l506"></a>
<span id="l507">        int off = offset + pos;</span><a href="#l507"></a>
<span id="l508">        return (bigEndian</span><a href="#l508"></a>
<span id="l509">                ? (FloatBuffer)(new ByteBufferAsFloatBuffer$RW$B(this,</span><a href="#l509"></a>
<span id="l510">                                                                 -1,</span><a href="#l510"></a>
<span id="l511">                                                                 0,</span><a href="#l511"></a>
<span id="l512">                                                                 size,</span><a href="#l512"></a>
<span id="l513">                                                                 size,</span><a href="#l513"></a>
<span id="l514">                                                                 off))</span><a href="#l514"></a>
<span id="l515">                : (FloatBuffer)(new ByteBufferAsFloatBuffer$RW$L(this,</span><a href="#l515"></a>
<span id="l516">                                                                 -1,</span><a href="#l516"></a>
<span id="l517">                                                                 0,</span><a href="#l517"></a>
<span id="l518">                                                                 size,</span><a href="#l518"></a>
<span id="l519">                                                                 size,</span><a href="#l519"></a>
<span id="l520">                                                                 off)));</span><a href="#l520"></a>
<span id="l521">    }</span><a href="#l521"></a>
<span id="l522"></span><a href="#l522"></a>
<span id="l523"></span><a href="#l523"></a>
<span id="l524">    // double</span><a href="#l524"></a>
<span id="l525"></span><a href="#l525"></a>
<span id="l526">#if[rw]</span><a href="#l526"></a>
<span id="l527"></span><a href="#l527"></a>
<span id="l528">    public double getDouble() {</span><a href="#l528"></a>
<span id="l529">        return Bits.getDouble(this, ix(nextGetIndex(8)), bigEndian);</span><a href="#l529"></a>
<span id="l530">    }</span><a href="#l530"></a>
<span id="l531"></span><a href="#l531"></a>
<span id="l532">    public double getDouble(int i) {</span><a href="#l532"></a>
<span id="l533">        return Bits.getDouble(this, ix(checkIndex(i, 8)), bigEndian);</span><a href="#l533"></a>
<span id="l534">    }</span><a href="#l534"></a>
<span id="l535"></span><a href="#l535"></a>
<span id="l536">#end[rw]</span><a href="#l536"></a>
<span id="l537"></span><a href="#l537"></a>
<span id="l538">    public $Type$Buffer putDouble(double x) {</span><a href="#l538"></a>
<span id="l539">#if[rw]</span><a href="#l539"></a>
<span id="l540">        Bits.putDouble(this, ix(nextPutIndex(8)), x, bigEndian);</span><a href="#l540"></a>
<span id="l541">        return this;</span><a href="#l541"></a>
<span id="l542">#else[rw]</span><a href="#l542"></a>
<span id="l543">        throw new ReadOnlyBufferException();</span><a href="#l543"></a>
<span id="l544">#end[rw]</span><a href="#l544"></a>
<span id="l545">    }</span><a href="#l545"></a>
<span id="l546"></span><a href="#l546"></a>
<span id="l547">    public $Type$Buffer putDouble(int i, double x) {</span><a href="#l547"></a>
<span id="l548">#if[rw]</span><a href="#l548"></a>
<span id="l549">        Bits.putDouble(this, ix(checkIndex(i, 8)), x, bigEndian);</span><a href="#l549"></a>
<span id="l550">        return this;</span><a href="#l550"></a>
<span id="l551">#else[rw]</span><a href="#l551"></a>
<span id="l552">        throw new ReadOnlyBufferException();</span><a href="#l552"></a>
<span id="l553">#end[rw]</span><a href="#l553"></a>
<span id="l554">    }</span><a href="#l554"></a>
<span id="l555"></span><a href="#l555"></a>
<span id="l556">    public DoubleBuffer asDoubleBuffer() {</span><a href="#l556"></a>
<span id="l557">        int pos = position();</span><a href="#l557"></a>
<span id="l558">        int size = (limit() - pos) &gt;&gt; 3;</span><a href="#l558"></a>
<span id="l559">        int off = offset + pos;</span><a href="#l559"></a>
<span id="l560">        return (bigEndian</span><a href="#l560"></a>
<span id="l561">                ? (DoubleBuffer)(new ByteBufferAsDoubleBuffer$RW$B(this,</span><a href="#l561"></a>
<span id="l562">                                                                   -1,</span><a href="#l562"></a>
<span id="l563">                                                                   0,</span><a href="#l563"></a>
<span id="l564">                                                                   size,</span><a href="#l564"></a>
<span id="l565">                                                                   size,</span><a href="#l565"></a>
<span id="l566">                                                                   off))</span><a href="#l566"></a>
<span id="l567">                : (DoubleBuffer)(new ByteBufferAsDoubleBuffer$RW$L(this,</span><a href="#l567"></a>
<span id="l568">                                                                   -1,</span><a href="#l568"></a>
<span id="l569">                                                                   0,</span><a href="#l569"></a>
<span id="l570">                                                                   size,</span><a href="#l570"></a>
<span id="l571">                                                                   size,</span><a href="#l571"></a>
<span id="l572">                                                                   off)));</span><a href="#l572"></a>
<span id="l573">    }</span><a href="#l573"></a>
<span id="l574"></span><a href="#l574"></a>
<span id="l575"></span><a href="#l575"></a>
<span id="l576">#end[byte]</span><a href="#l576"></a>
<span id="l577"></span><a href="#l577"></a>
<span id="l578"></span><a href="#l578"></a>
<span id="l579">#if[char]</span><a href="#l579"></a>
<span id="l580"></span><a href="#l580"></a>
<span id="l581">    String toString(int start, int end) {               // package-private</span><a href="#l581"></a>
<span id="l582">        try {</span><a href="#l582"></a>
<span id="l583">            return new String(hb, start + offset, end - start);</span><a href="#l583"></a>
<span id="l584">        } catch (StringIndexOutOfBoundsException x) {</span><a href="#l584"></a>
<span id="l585">            throw new IndexOutOfBoundsException();</span><a href="#l585"></a>
<span id="l586">        }</span><a href="#l586"></a>
<span id="l587">    }</span><a href="#l587"></a>
<span id="l588"></span><a href="#l588"></a>
<span id="l589"></span><a href="#l589"></a>
<span id="l590">    // --- Methods to support CharSequence ---</span><a href="#l590"></a>
<span id="l591"></span><a href="#l591"></a>
<span id="l592">    public CharBuffer subSequence(int start, int end) {</span><a href="#l592"></a>
<span id="l593">        if ((start &lt; 0)</span><a href="#l593"></a>
<span id="l594">            || (end &gt; length())</span><a href="#l594"></a>
<span id="l595">            || (start &gt; end))</span><a href="#l595"></a>
<span id="l596">            throw new IndexOutOfBoundsException();</span><a href="#l596"></a>
<span id="l597">        int pos = position();</span><a href="#l597"></a>
<span id="l598">        return new HeapCharBuffer$RW$(hb,</span><a href="#l598"></a>
<span id="l599">                                      -1,</span><a href="#l599"></a>
<span id="l600">                                      pos + start,</span><a href="#l600"></a>
<span id="l601">                                      pos + end,</span><a href="#l601"></a>
<span id="l602">                                      capacity(),</span><a href="#l602"></a>
<span id="l603">                                      offset);</span><a href="#l603"></a>
<span id="l604">    }</span><a href="#l604"></a>
<span id="l605"></span><a href="#l605"></a>
<span id="l606">#end[char]</span><a href="#l606"></a>
<span id="l607"></span><a href="#l607"></a>
<span id="l608"></span><a href="#l608"></a>
<span id="l609">#if[!byte]</span><a href="#l609"></a>
<span id="l610"></span><a href="#l610"></a>
<span id="l611">    public ByteOrder order() {</span><a href="#l611"></a>
<span id="l612">        return ByteOrder.nativeOrder();</span><a href="#l612"></a>
<span id="l613">    }</span><a href="#l613"></a>
<span id="l614"></span><a href="#l614"></a>
<span id="l615">#end[!byte]</span><a href="#l615"></a>
<span id="l616"></span><a href="#l616"></a>
<span id="l617">}</span><a href="#l617"></a></pre>
<div class="sourcelast"></div>
</div>
</div>
</div>



<div class="container"><div class="main footer">
&copy 2007, <script>document.write(new Date().getFullYear())</script> Oracle and/or its affiliates<br/>
<a href="http://openjdk.java.net/legal/tou/">Terms of Use</a>
&#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
&#183; <a href="https://openjdk.java.net/legal/openjdk-trademark-notice.html">Trademarks</a>
</div></div>

</body>
</html>

