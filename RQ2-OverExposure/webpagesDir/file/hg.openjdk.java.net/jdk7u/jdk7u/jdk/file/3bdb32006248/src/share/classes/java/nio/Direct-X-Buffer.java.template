<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<link rel="icon" href="/jdk7u/jdk7u/jdk/static/nanoduke.ico" type="image/png" />
<meta name="robots" content="index, nofollow" />
<link rel="stylesheet" href="/jdk7u/jdk7u/jdk/static/style-paper.css" type="text/css" />
<script type="text/javascript" src="/jdk7u/jdk7u/jdk/static/mercurial.js"></script>

<title>jdk7u/jdk7u/jdk: 3bdb32006248 src/share/classes/java/nio/Direct-X-Buffer.java.template</title>
</head>
<body>

<div class="container">
<div class="menu">
<div class="logo">
<img src="/jdk7u/jdk7u/jdk/static/duke_pipes.png" width=75 height=90 border=0 alt="Duke!" />
</div>
<ul>
<li><a href="/jdk7u/jdk7u/jdk/shortlog/3bdb32006248">log</a></li>
<li><a href="/jdk7u/jdk7u/jdk/graph/3bdb32006248">graph</a></li>
<li><a href="/jdk7u/jdk7u/jdk/tags">tags</a></li>
<li><a href="/jdk7u/jdk7u/jdk/branches">branches</a></li>
</ul>
<ul>
<li><a href="/jdk7u/jdk7u/jdk/rev/3bdb32006248">changeset</a></li>
<li><a href="/jdk7u/jdk7u/jdk/file/3bdb32006248/src/share/classes/java/nio/">browse</a></li>
</ul>
<ul>
<li class="active">file</li>
<li><a href="/jdk7u/jdk7u/jdk/file/tip/src/share/classes/java/nio/Direct-X-Buffer.java.template">latest</a></li>
<li><a href="/jdk7u/jdk7u/jdk/diff/3bdb32006248/src/share/classes/java/nio/Direct-X-Buffer.java.template">diff</a></li>
<li><a href="/jdk7u/jdk7u/jdk/comparison/3bdb32006248/src/share/classes/java/nio/Direct-X-Buffer.java.template">comparison</a></li>
<li><a href="/jdk7u/jdk7u/jdk/annotate/3bdb32006248/src/share/classes/java/nio/Direct-X-Buffer.java.template">annotate</a></li>
<li><a href="/jdk7u/jdk7u/jdk/log/3bdb32006248/src/share/classes/java/nio/Direct-X-Buffer.java.template">file log</a></li>
<li><a href="/jdk7u/jdk7u/jdk/raw-file/3bdb32006248/src/share/classes/java/nio/Direct-X-Buffer.java.template">raw</a></li>
</ul>
<ul>
<li><a href="/jdk7u/jdk7u/jdk/help">help</a></li>
</ul>
</div>

<div class="main">
<h2 class="breadcrumb"><a href="/">OpenJDK</a> / <a href="/jdk7u">jdk7u</a> / <a href="/jdk7u/jdk7u">jdk7u</a> / <a href="/jdk7u/jdk7u/jdk">jdk</a> </h2>
<h3>view src/share/classes/java/nio/Direct-X-Buffer.java.template @ 9004:3bdb32006248</h3>

<form class="search" action="/jdk7u/jdk7u/jdk/log">

<p><input name="rev" id="search1" type="text" size="30" /></p>
<div id="hint">Find changesets by keywords (author, files, the commit message), revision
number or hash, or <a href="/jdk7u/jdk7u/jdk/help/revsets">revset expression</a>.</div>
</form>

<div class="description">8234841: Enhance buffering of byte buffers
Reviewed-by: alanb, ahgross, rhalade, psandoz</div>

<table id="changesetEntry">
<tr>
 <th class="author">author</th>
 <td class="author">&#114;&#111;&#98;&#109;</td>
</tr>
<tr>
 <th class="date">date</th>
 <td class="date age">Mon, 30 Mar 2020 05:13:42 +0100</td>
</tr>
<tr>
 <th class="author">parents</th>
 <td class="author"><a href="/jdk7u/jdk7u/jdk/file/fcdc53161daa/src/share/classes/java/nio/Direct-X-Buffer.java.template">fcdc53161daa</a> </td>
</tr>
<tr>
 <th class="author">children</th>
 <td class="author"></td>
</tr>
</table>

<div class="overflow">
<div class="sourcefirst linewraptoggle">line wrap: <a class="linewraplink" href="javascript:toggleLinewrap()">on</a></div>
<div class="sourcefirst"> line source</div>
<pre class="sourcelines stripes4 wrap">
<span id="l1">/*</span><a href="#l1"></a>
<span id="l2"> * Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.</span><a href="#l2"></a>
<span id="l3"> * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l3"></a>
<span id="l4"> *</span><a href="#l4"></a>
<span id="l5"> * This code is free software; you can redistribute it and/or modify it</span><a href="#l5"></a>
<span id="l6"> * under the terms of the GNU General Public License version 2 only, as</span><a href="#l6"></a>
<span id="l7"> * published by the Free Software Foundation.  Oracle designates this</span><a href="#l7"></a>
<span id="l8"> * particular file as subject to the &quot;Classpath&quot; exception as provided</span><a href="#l8"></a>
<span id="l9"> * by Oracle in the LICENSE file that accompanied this code.</span><a href="#l9"></a>
<span id="l10"> *</span><a href="#l10"></a>
<span id="l11"> * This code is distributed in the hope that it will be useful, but WITHOUT</span><a href="#l11"></a>
<span id="l12"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span><a href="#l12"></a>
<span id="l13"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span><a href="#l13"></a>
<span id="l14"> * version 2 for more details (a copy is included in the LICENSE file that</span><a href="#l14"></a>
<span id="l15"> * accompanied this code).</span><a href="#l15"></a>
<span id="l16"> *</span><a href="#l16"></a>
<span id="l17"> * You should have received a copy of the GNU General Public License version</span><a href="#l17"></a>
<span id="l18"> * 2 along with this work; if not, write to the Free Software Foundation,</span><a href="#l18"></a>
<span id="l19"> * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span><a href="#l19"></a>
<span id="l20"> *</span><a href="#l20"></a>
<span id="l21"> * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span><a href="#l21"></a>
<span id="l22"> * or visit www.oracle.com if you need additional information or have any</span><a href="#l22"></a>
<span id="l23"> * questions.</span><a href="#l23"></a>
<span id="l24"> */</span><a href="#l24"></a>
<span id="l25"></span><a href="#l25"></a>
<span id="l26">#warn This file is preprocessed before being compiled</span><a href="#l26"></a>
<span id="l27"></span><a href="#l27"></a>
<span id="l28">package java.nio;</span><a href="#l28"></a>
<span id="l29"></span><a href="#l29"></a>
<span id="l30">import java.io.FileDescriptor;</span><a href="#l30"></a>
<span id="l31">import sun.misc.Cleaner;</span><a href="#l31"></a>
<span id="l32">import sun.misc.Unsafe;</span><a href="#l32"></a>
<span id="l33">import sun.misc.VM;</span><a href="#l33"></a>
<span id="l34">import sun.nio.ch.DirectBuffer;</span><a href="#l34"></a>
<span id="l35"></span><a href="#l35"></a>
<span id="l36"></span><a href="#l36"></a>
<span id="l37">class Direct$Type$Buffer$RW$$BO$</span><a href="#l37"></a>
<span id="l38">#if[rw]</span><a href="#l38"></a>
<span id="l39">    extends {#if[byte]?Mapped$Type$Buffer:$Type$Buffer}</span><a href="#l39"></a>
<span id="l40">#else[rw]</span><a href="#l40"></a>
<span id="l41">    extends Direct$Type$Buffer$BO$</span><a href="#l41"></a>
<span id="l42">#end[rw]</span><a href="#l42"></a>
<span id="l43">    implements DirectBuffer</span><a href="#l43"></a>
<span id="l44">{</span><a href="#l44"></a>
<span id="l45"></span><a href="#l45"></a>
<span id="l46">#if[rw]</span><a href="#l46"></a>
<span id="l47"></span><a href="#l47"></a>
<span id="l48">    // Cached unsafe-access object</span><a href="#l48"></a>
<span id="l49">    protected static final Unsafe unsafe = Bits.unsafe();</span><a href="#l49"></a>
<span id="l50"></span><a href="#l50"></a>
<span id="l51">    // Cached array base offset</span><a href="#l51"></a>
<span id="l52">    private static final long arrayBaseOffset = (long)unsafe.arrayBaseOffset($type$[].class);</span><a href="#l52"></a>
<span id="l53"></span><a href="#l53"></a>
<span id="l54">    // Cached unaligned-access capability</span><a href="#l54"></a>
<span id="l55">    protected static final boolean unaligned = Bits.unaligned();</span><a href="#l55"></a>
<span id="l56"></span><a href="#l56"></a>
<span id="l57">    // Base address, used in all indexing calculations</span><a href="#l57"></a>
<span id="l58">    // NOTE: moved up to Buffer.java for speed in JNI GetDirectBufferAddress</span><a href="#l58"></a>
<span id="l59">    //    protected long address;</span><a href="#l59"></a>
<span id="l60"></span><a href="#l60"></a>
<span id="l61">    // An object attached to this buffer. If this buffer is a view of another</span><a href="#l61"></a>
<span id="l62">    // buffer then we use this field to keep a reference to that buffer to</span><a href="#l62"></a>
<span id="l63">    // ensure that its memory isn't freed before we are done with it.</span><a href="#l63"></a>
<span id="l64">    private final Object att;</span><a href="#l64"></a>
<span id="l65"></span><a href="#l65"></a>
<span id="l66">    public Object attachment() {</span><a href="#l66"></a>
<span id="l67">        return att;</span><a href="#l67"></a>
<span id="l68">    }</span><a href="#l68"></a>
<span id="l69"></span><a href="#l69"></a>
<span id="l70">#if[byte]</span><a href="#l70"></a>
<span id="l71"></span><a href="#l71"></a>
<span id="l72">    private static class Deallocator</span><a href="#l72"></a>
<span id="l73">        implements Runnable</span><a href="#l73"></a>
<span id="l74">    {</span><a href="#l74"></a>
<span id="l75"></span><a href="#l75"></a>
<span id="l76">        private static Unsafe unsafe = Unsafe.getUnsafe();</span><a href="#l76"></a>
<span id="l77"></span><a href="#l77"></a>
<span id="l78">        private long address;</span><a href="#l78"></a>
<span id="l79">        private long size;</span><a href="#l79"></a>
<span id="l80">        private int capacity;</span><a href="#l80"></a>
<span id="l81"></span><a href="#l81"></a>
<span id="l82">        private Deallocator(long address, long size, int capacity) {</span><a href="#l82"></a>
<span id="l83">            assert (address != 0);</span><a href="#l83"></a>
<span id="l84">            this.address = address;</span><a href="#l84"></a>
<span id="l85">            this.size = size;</span><a href="#l85"></a>
<span id="l86">            this.capacity = capacity;</span><a href="#l86"></a>
<span id="l87">        }</span><a href="#l87"></a>
<span id="l88"></span><a href="#l88"></a>
<span id="l89">        public void run() {</span><a href="#l89"></a>
<span id="l90">            if (address == 0) {</span><a href="#l90"></a>
<span id="l91">                // Paranoia</span><a href="#l91"></a>
<span id="l92">                return;</span><a href="#l92"></a>
<span id="l93">            }</span><a href="#l93"></a>
<span id="l94">            unsafe.freeMemory(address);</span><a href="#l94"></a>
<span id="l95">            address = 0;</span><a href="#l95"></a>
<span id="l96">            Bits.unreserveMemory(size, capacity);</span><a href="#l96"></a>
<span id="l97">        }</span><a href="#l97"></a>
<span id="l98"></span><a href="#l98"></a>
<span id="l99">    }</span><a href="#l99"></a>
<span id="l100"></span><a href="#l100"></a>
<span id="l101">    private final Cleaner cleaner;</span><a href="#l101"></a>
<span id="l102"></span><a href="#l102"></a>
<span id="l103">    public Cleaner cleaner() { return cleaner; }</span><a href="#l103"></a>
<span id="l104"></span><a href="#l104"></a>
<span id="l105">#else[byte]</span><a href="#l105"></a>
<span id="l106"></span><a href="#l106"></a>
<span id="l107">    public Cleaner cleaner() { return null; }</span><a href="#l107"></a>
<span id="l108"></span><a href="#l108"></a>
<span id="l109">#end[byte]</span><a href="#l109"></a>
<span id="l110"></span><a href="#l110"></a>
<span id="l111">#end[rw]</span><a href="#l111"></a>
<span id="l112"></span><a href="#l112"></a>
<span id="l113">#if[byte]</span><a href="#l113"></a>
<span id="l114"></span><a href="#l114"></a>
<span id="l115">    // Primary constructor</span><a href="#l115"></a>
<span id="l116">    //</span><a href="#l116"></a>
<span id="l117">    Direct$Type$Buffer$RW$(int cap) {                   // package-private</span><a href="#l117"></a>
<span id="l118">#if[rw]</span><a href="#l118"></a>
<span id="l119">        super(-1, 0, cap, cap);</span><a href="#l119"></a>
<span id="l120">        boolean pa = VM.isDirectMemoryPageAligned();</span><a href="#l120"></a>
<span id="l121">        int ps = Bits.pageSize();</span><a href="#l121"></a>
<span id="l122">        long size = Math.max(1L, (long)cap + (pa ? ps : 0));</span><a href="#l122"></a>
<span id="l123">        Bits.reserveMemory(size, cap);</span><a href="#l123"></a>
<span id="l124"></span><a href="#l124"></a>
<span id="l125">        long base = 0;</span><a href="#l125"></a>
<span id="l126">        try {</span><a href="#l126"></a>
<span id="l127">            base = unsafe.allocateMemory(size);</span><a href="#l127"></a>
<span id="l128">        } catch (OutOfMemoryError x) {</span><a href="#l128"></a>
<span id="l129">            Bits.unreserveMemory(size, cap);</span><a href="#l129"></a>
<span id="l130">            throw x;</span><a href="#l130"></a>
<span id="l131">        }</span><a href="#l131"></a>
<span id="l132">        unsafe.setMemory(base, size, (byte) 0);</span><a href="#l132"></a>
<span id="l133">        if (pa &amp;&amp; (base % ps != 0)) {</span><a href="#l133"></a>
<span id="l134">            // Round up to page boundary</span><a href="#l134"></a>
<span id="l135">            address = base + ps - (base &amp; (ps - 1));</span><a href="#l135"></a>
<span id="l136">        } else {</span><a href="#l136"></a>
<span id="l137">            address = base;</span><a href="#l137"></a>
<span id="l138">        }</span><a href="#l138"></a>
<span id="l139">        cleaner = Cleaner.create(this, new Deallocator(base, size, cap));</span><a href="#l139"></a>
<span id="l140">        att = null;</span><a href="#l140"></a>
<span id="l141">#else[rw]</span><a href="#l141"></a>
<span id="l142">        super(cap);</span><a href="#l142"></a>
<span id="l143">#end[rw]</span><a href="#l143"></a>
<span id="l144">    }</span><a href="#l144"></a>
<span id="l145"></span><a href="#l145"></a>
<span id="l146">#if[rw]</span><a href="#l146"></a>
<span id="l147"></span><a href="#l147"></a>
<span id="l148">    // Invoked to construct a direct ByteBuffer referring to the block of</span><a href="#l148"></a>
<span id="l149">    // memory. A given arbitrary object may also be attached to the buffer.</span><a href="#l149"></a>
<span id="l150">    //</span><a href="#l150"></a>
<span id="l151">    Direct$Type$Buffer(long addr, int cap, Object ob) {</span><a href="#l151"></a>
<span id="l152">        super(-1, 0, cap, cap);</span><a href="#l152"></a>
<span id="l153">        address = addr;</span><a href="#l153"></a>
<span id="l154">        cleaner = null;</span><a href="#l154"></a>
<span id="l155">        att = ob;</span><a href="#l155"></a>
<span id="l156">    }</span><a href="#l156"></a>
<span id="l157"></span><a href="#l157"></a>
<span id="l158"></span><a href="#l158"></a>
<span id="l159">    // Invoked only by JNI: NewDirectByteBuffer(void*, long)</span><a href="#l159"></a>
<span id="l160">    //</span><a href="#l160"></a>
<span id="l161">    private Direct$Type$Buffer(long addr, int cap) {</span><a href="#l161"></a>
<span id="l162">        super(-1, 0, cap, cap);</span><a href="#l162"></a>
<span id="l163">        address = addr;</span><a href="#l163"></a>
<span id="l164">        cleaner = null;</span><a href="#l164"></a>
<span id="l165">        att = null;</span><a href="#l165"></a>
<span id="l166">    }</span><a href="#l166"></a>
<span id="l167"></span><a href="#l167"></a>
<span id="l168">#end[rw]</span><a href="#l168"></a>
<span id="l169"></span><a href="#l169"></a>
<span id="l170">    // For memory-mapped buffers -- invoked by FileChannelImpl via reflection</span><a href="#l170"></a>
<span id="l171">    //</span><a href="#l171"></a>
<span id="l172">    protected Direct$Type$Buffer$RW$(int cap, long addr,</span><a href="#l172"></a>
<span id="l173">                                     FileDescriptor fd,</span><a href="#l173"></a>
<span id="l174">                                     Runnable unmapper)</span><a href="#l174"></a>
<span id="l175">    {</span><a href="#l175"></a>
<span id="l176">#if[rw]</span><a href="#l176"></a>
<span id="l177">        super(-1, 0, cap, cap, fd);</span><a href="#l177"></a>
<span id="l178">        address = addr;</span><a href="#l178"></a>
<span id="l179">        cleaner = Cleaner.create(this, unmapper);</span><a href="#l179"></a>
<span id="l180">        att = null;</span><a href="#l180"></a>
<span id="l181">#else[rw]</span><a href="#l181"></a>
<span id="l182">        super(cap, addr, fd, unmapper);</span><a href="#l182"></a>
<span id="l183">#end[rw]</span><a href="#l183"></a>
<span id="l184">    }</span><a href="#l184"></a>
<span id="l185"></span><a href="#l185"></a>
<span id="l186">#end[byte]</span><a href="#l186"></a>
<span id="l187"></span><a href="#l187"></a>
<span id="l188">    // For duplicates and slices</span><a href="#l188"></a>
<span id="l189">    //</span><a href="#l189"></a>
<span id="l190">    Direct$Type$Buffer$RW$$BO$(DirectBuffer db,         // package-private</span><a href="#l190"></a>
<span id="l191">                               int mark, int pos, int lim, int cap,</span><a href="#l191"></a>
<span id="l192">                               int off)</span><a href="#l192"></a>
<span id="l193">    {</span><a href="#l193"></a>
<span id="l194">#if[rw]</span><a href="#l194"></a>
<span id="l195">        super(mark, pos, lim, cap);</span><a href="#l195"></a>
<span id="l196">        address = db.address() + off;</span><a href="#l196"></a>
<span id="l197">#if[byte]</span><a href="#l197"></a>
<span id="l198">        cleaner = null;</span><a href="#l198"></a>
<span id="l199">#end[byte]</span><a href="#l199"></a>
<span id="l200">        att = db;</span><a href="#l200"></a>
<span id="l201">#else[rw]</span><a href="#l201"></a>
<span id="l202">        super(db, mark, pos, lim, cap, off);</span><a href="#l202"></a>
<span id="l203">#end[rw]</span><a href="#l203"></a>
<span id="l204">    }</span><a href="#l204"></a>
<span id="l205"></span><a href="#l205"></a>
<span id="l206">    public $Type$Buffer slice() {</span><a href="#l206"></a>
<span id="l207">        int pos = this.position();</span><a href="#l207"></a>
<span id="l208">        int lim = this.limit();</span><a href="#l208"></a>
<span id="l209">        int rem = (pos &lt;= lim ? lim - pos : 0);</span><a href="#l209"></a>
<span id="l210">        int off = (pos &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l210"></a>
<span id="l211">        assert (off &gt;= 0);</span><a href="#l211"></a>
<span id="l212">        return new Direct$Type$Buffer$RW$$BO$(this, -1, 0, rem, rem, off);</span><a href="#l212"></a>
<span id="l213">    }</span><a href="#l213"></a>
<span id="l214"></span><a href="#l214"></a>
<span id="l215">    public $Type$Buffer duplicate() {</span><a href="#l215"></a>
<span id="l216">        return new Direct$Type$Buffer$RW$$BO$(this,</span><a href="#l216"></a>
<span id="l217">                                              this.markValue(),</span><a href="#l217"></a>
<span id="l218">                                              this.position(),</span><a href="#l218"></a>
<span id="l219">                                              this.limit(),</span><a href="#l219"></a>
<span id="l220">                                              this.capacity(),</span><a href="#l220"></a>
<span id="l221">                                              0);</span><a href="#l221"></a>
<span id="l222">    }</span><a href="#l222"></a>
<span id="l223"></span><a href="#l223"></a>
<span id="l224">    public $Type$Buffer asReadOnlyBuffer() {</span><a href="#l224"></a>
<span id="l225">#if[rw]</span><a href="#l225"></a>
<span id="l226">        return new Direct$Type$BufferR$BO$(this,</span><a href="#l226"></a>
<span id="l227">                                           this.markValue(),</span><a href="#l227"></a>
<span id="l228">                                           this.position(),</span><a href="#l228"></a>
<span id="l229">                                           this.limit(),</span><a href="#l229"></a>
<span id="l230">                                           this.capacity(),</span><a href="#l230"></a>
<span id="l231">                                           0);</span><a href="#l231"></a>
<span id="l232">#else[rw]</span><a href="#l232"></a>
<span id="l233">        return duplicate();</span><a href="#l233"></a>
<span id="l234">#end[rw]</span><a href="#l234"></a>
<span id="l235">    }</span><a href="#l235"></a>
<span id="l236"></span><a href="#l236"></a>
<span id="l237">#if[rw]</span><a href="#l237"></a>
<span id="l238"></span><a href="#l238"></a>
<span id="l239">    public long address() {</span><a href="#l239"></a>
<span id="l240">        return address;</span><a href="#l240"></a>
<span id="l241">    }</span><a href="#l241"></a>
<span id="l242"></span><a href="#l242"></a>
<span id="l243">    private long ix(int i) {</span><a href="#l243"></a>
<span id="l244">        return address + ((long)i &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l244"></a>
<span id="l245">    }</span><a href="#l245"></a>
<span id="l246"></span><a href="#l246"></a>
<span id="l247">    public $type$ get() {</span><a href="#l247"></a>
<span id="l248">        return $fromBits$($swap$(unsafe.get$Swaptype$(ix(nextGetIndex()))));</span><a href="#l248"></a>
<span id="l249">    }</span><a href="#l249"></a>
<span id="l250"></span><a href="#l250"></a>
<span id="l251">    public $type$ get(int i) {</span><a href="#l251"></a>
<span id="l252">        return $fromBits$($swap$(unsafe.get$Swaptype$(ix(checkIndex(i)))));</span><a href="#l252"></a>
<span id="l253">    }</span><a href="#l253"></a>
<span id="l254"></span><a href="#l254"></a>
<span id="l255">    public $Type$Buffer get($type$[] dst, int offset, int length) {</span><a href="#l255"></a>
<span id="l256">#if[rw]</span><a href="#l256"></a>
<span id="l257">        if (((long)length &lt;&lt; $LG_BYTES_PER_VALUE$) &gt; Bits.JNI_COPY_TO_ARRAY_THRESHOLD) {</span><a href="#l257"></a>
<span id="l258">            checkBounds(offset, length, dst.length);</span><a href="#l258"></a>
<span id="l259">            int pos = position();</span><a href="#l259"></a>
<span id="l260">            int lim = limit();</span><a href="#l260"></a>
<span id="l261">            assert (pos &lt;= lim);</span><a href="#l261"></a>
<span id="l262">            int rem = (pos &lt;= lim ? lim - pos : 0);</span><a href="#l262"></a>
<span id="l263">            if (length &gt; rem)</span><a href="#l263"></a>
<span id="l264">                throw new BufferUnderflowException();</span><a href="#l264"></a>
<span id="l265"></span><a href="#l265"></a>
<span id="l266">#if[!byte]</span><a href="#l266"></a>
<span id="l267">            if (order() != ByteOrder.nativeOrder())</span><a href="#l267"></a>
<span id="l268">                Bits.copyTo$Memtype$Array(ix(pos), dst,</span><a href="#l268"></a>
<span id="l269">                                          (long)offset &lt;&lt; $LG_BYTES_PER_VALUE$,</span><a href="#l269"></a>
<span id="l270">                                          (long)length &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l270"></a>
<span id="l271">            else</span><a href="#l271"></a>
<span id="l272">#end[!byte]</span><a href="#l272"></a>
<span id="l273">                Bits.copyToArray(ix(pos), dst, arrayBaseOffset,</span><a href="#l273"></a>
<span id="l274">                                 (long)offset &lt;&lt; $LG_BYTES_PER_VALUE$,</span><a href="#l274"></a>
<span id="l275">                                 (long)length &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l275"></a>
<span id="l276">            position(pos + length);</span><a href="#l276"></a>
<span id="l277">        } else {</span><a href="#l277"></a>
<span id="l278">            super.get(dst, offset, length);</span><a href="#l278"></a>
<span id="l279">        }</span><a href="#l279"></a>
<span id="l280">        return this;</span><a href="#l280"></a>
<span id="l281">#else[rw]</span><a href="#l281"></a>
<span id="l282">        throw new ReadOnlyBufferException();</span><a href="#l282"></a>
<span id="l283">#end[rw]</span><a href="#l283"></a>
<span id="l284">    }</span><a href="#l284"></a>
<span id="l285"></span><a href="#l285"></a>
<span id="l286">#end[rw]</span><a href="#l286"></a>
<span id="l287"></span><a href="#l287"></a>
<span id="l288">    public $Type$Buffer put($type$ x) {</span><a href="#l288"></a>
<span id="l289">#if[rw]</span><a href="#l289"></a>
<span id="l290">        unsafe.put$Swaptype$(ix(nextPutIndex()), $swap$($toBits$(x)));</span><a href="#l290"></a>
<span id="l291">        return this;</span><a href="#l291"></a>
<span id="l292">#else[rw]</span><a href="#l292"></a>
<span id="l293">        throw new ReadOnlyBufferException();</span><a href="#l293"></a>
<span id="l294">#end[rw]</span><a href="#l294"></a>
<span id="l295">    }</span><a href="#l295"></a>
<span id="l296"></span><a href="#l296"></a>
<span id="l297">    public $Type$Buffer put(int i, $type$ x) {</span><a href="#l297"></a>
<span id="l298">#if[rw]</span><a href="#l298"></a>
<span id="l299">        unsafe.put$Swaptype$(ix(checkIndex(i)), $swap$($toBits$(x)));</span><a href="#l299"></a>
<span id="l300">        return this;</span><a href="#l300"></a>
<span id="l301">#else[rw]</span><a href="#l301"></a>
<span id="l302">        throw new ReadOnlyBufferException();</span><a href="#l302"></a>
<span id="l303">#end[rw]</span><a href="#l303"></a>
<span id="l304">    }</span><a href="#l304"></a>
<span id="l305"></span><a href="#l305"></a>
<span id="l306">    public $Type$Buffer put($Type$Buffer src) {</span><a href="#l306"></a>
<span id="l307">#if[rw]</span><a href="#l307"></a>
<span id="l308">        if (src instanceof Direct$Type$Buffer$BO$) {</span><a href="#l308"></a>
<span id="l309">            if (src == this)</span><a href="#l309"></a>
<span id="l310">                throw new IllegalArgumentException();</span><a href="#l310"></a>
<span id="l311">            Direct$Type$Buffer$RW$$BO$ sb = (Direct$Type$Buffer$RW$$BO$)src;</span><a href="#l311"></a>
<span id="l312"></span><a href="#l312"></a>
<span id="l313">            int spos = sb.position();</span><a href="#l313"></a>
<span id="l314">            int slim = sb.limit();</span><a href="#l314"></a>
<span id="l315">            assert (spos &lt;= slim);</span><a href="#l315"></a>
<span id="l316">            int srem = (spos &lt;= slim ? slim - spos : 0);</span><a href="#l316"></a>
<span id="l317"></span><a href="#l317"></a>
<span id="l318">            int pos = position();</span><a href="#l318"></a>
<span id="l319">            int lim = limit();</span><a href="#l319"></a>
<span id="l320">            assert (pos &lt;= lim);</span><a href="#l320"></a>
<span id="l321">            int rem = (pos &lt;= lim ? lim - pos : 0);</span><a href="#l321"></a>
<span id="l322"></span><a href="#l322"></a>
<span id="l323">            if (srem &gt; rem)</span><a href="#l323"></a>
<span id="l324">                throw new BufferOverflowException();</span><a href="#l324"></a>
<span id="l325">            unsafe.copyMemory(sb.ix(spos), ix(pos), (long)srem &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l325"></a>
<span id="l326">            sb.position(spos + srem);</span><a href="#l326"></a>
<span id="l327">            position(pos + srem);</span><a href="#l327"></a>
<span id="l328">        } else if (src.hb != null) {</span><a href="#l328"></a>
<span id="l329"></span><a href="#l329"></a>
<span id="l330">            int spos = src.position();</span><a href="#l330"></a>
<span id="l331">            int slim = src.limit();</span><a href="#l331"></a>
<span id="l332">            assert (spos &lt;= slim);</span><a href="#l332"></a>
<span id="l333">            int srem = (spos &lt;= slim ? slim - spos : 0);</span><a href="#l333"></a>
<span id="l334"></span><a href="#l334"></a>
<span id="l335">            put(src.hb, src.offset + spos, srem);</span><a href="#l335"></a>
<span id="l336">            src.position(spos + srem);</span><a href="#l336"></a>
<span id="l337"></span><a href="#l337"></a>
<span id="l338">        } else {</span><a href="#l338"></a>
<span id="l339">            super.put(src);</span><a href="#l339"></a>
<span id="l340">        }</span><a href="#l340"></a>
<span id="l341">        return this;</span><a href="#l341"></a>
<span id="l342">#else[rw]</span><a href="#l342"></a>
<span id="l343">        throw new ReadOnlyBufferException();</span><a href="#l343"></a>
<span id="l344">#end[rw]</span><a href="#l344"></a>
<span id="l345">    }</span><a href="#l345"></a>
<span id="l346"></span><a href="#l346"></a>
<span id="l347">    public $Type$Buffer put($type$[] src, int offset, int length) {</span><a href="#l347"></a>
<span id="l348">#if[rw]</span><a href="#l348"></a>
<span id="l349">        if (((long)length &lt;&lt; $LG_BYTES_PER_VALUE$) &gt; Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {</span><a href="#l349"></a>
<span id="l350">            checkBounds(offset, length, src.length);</span><a href="#l350"></a>
<span id="l351">            int pos = position();</span><a href="#l351"></a>
<span id="l352">            int lim = limit();</span><a href="#l352"></a>
<span id="l353">            assert (pos &lt;= lim);</span><a href="#l353"></a>
<span id="l354">            int rem = (pos &lt;= lim ? lim - pos : 0);</span><a href="#l354"></a>
<span id="l355">            if (length &gt; rem)</span><a href="#l355"></a>
<span id="l356">                throw new BufferOverflowException();</span><a href="#l356"></a>
<span id="l357"></span><a href="#l357"></a>
<span id="l358">#if[!byte]</span><a href="#l358"></a>
<span id="l359">            if (order() != ByteOrder.nativeOrder())</span><a href="#l359"></a>
<span id="l360">                Bits.copyFrom$Memtype$Array(src,</span><a href="#l360"></a>
<span id="l361">                                            (long)offset &lt;&lt; $LG_BYTES_PER_VALUE$,</span><a href="#l361"></a>
<span id="l362">                                            ix(pos),</span><a href="#l362"></a>
<span id="l363">                                            (long)length &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l363"></a>
<span id="l364">            else</span><a href="#l364"></a>
<span id="l365">#end[!byte]</span><a href="#l365"></a>
<span id="l366">                Bits.copyFromArray(src, arrayBaseOffset,</span><a href="#l366"></a>
<span id="l367">                                   (long)offset &lt;&lt; $LG_BYTES_PER_VALUE$,</span><a href="#l367"></a>
<span id="l368">                                   ix(pos),</span><a href="#l368"></a>
<span id="l369">                                   (long)length &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l369"></a>
<span id="l370">            position(pos + length);</span><a href="#l370"></a>
<span id="l371">        } else {</span><a href="#l371"></a>
<span id="l372">            super.put(src, offset, length);</span><a href="#l372"></a>
<span id="l373">        }</span><a href="#l373"></a>
<span id="l374">        return this;</span><a href="#l374"></a>
<span id="l375">#else[rw]</span><a href="#l375"></a>
<span id="l376">        throw new ReadOnlyBufferException();</span><a href="#l376"></a>
<span id="l377">#end[rw]</span><a href="#l377"></a>
<span id="l378">    }</span><a href="#l378"></a>
<span id="l379"></span><a href="#l379"></a>
<span id="l380">    public $Type$Buffer compact() {</span><a href="#l380"></a>
<span id="l381">#if[rw]</span><a href="#l381"></a>
<span id="l382">        int pos = position();</span><a href="#l382"></a>
<span id="l383">        int lim = limit();</span><a href="#l383"></a>
<span id="l384">        assert (pos &lt;= lim);</span><a href="#l384"></a>
<span id="l385">        int rem = (pos &lt;= lim ? lim - pos : 0);</span><a href="#l385"></a>
<span id="l386"></span><a href="#l386"></a>
<span id="l387">        unsafe.copyMemory(ix(pos), ix(0), (long)rem &lt;&lt; $LG_BYTES_PER_VALUE$);</span><a href="#l387"></a>
<span id="l388">        position(rem);</span><a href="#l388"></a>
<span id="l389">        limit(capacity());</span><a href="#l389"></a>
<span id="l390">        discardMark();</span><a href="#l390"></a>
<span id="l391">        return this;</span><a href="#l391"></a>
<span id="l392">#else[rw]</span><a href="#l392"></a>
<span id="l393">        throw new ReadOnlyBufferException();</span><a href="#l393"></a>
<span id="l394">#end[rw]</span><a href="#l394"></a>
<span id="l395">    }</span><a href="#l395"></a>
<span id="l396"></span><a href="#l396"></a>
<span id="l397">    public boolean isDirect() {</span><a href="#l397"></a>
<span id="l398">        return true;</span><a href="#l398"></a>
<span id="l399">    }</span><a href="#l399"></a>
<span id="l400"></span><a href="#l400"></a>
<span id="l401">    public boolean isReadOnly() {</span><a href="#l401"></a>
<span id="l402">        return {#if[rw]?false:true};</span><a href="#l402"></a>
<span id="l403">    }</span><a href="#l403"></a>
<span id="l404"></span><a href="#l404"></a>
<span id="l405"></span><a href="#l405"></a>
<span id="l406">#if[char]</span><a href="#l406"></a>
<span id="l407"></span><a href="#l407"></a>
<span id="l408">    public String toString(int start, int end) {</span><a href="#l408"></a>
<span id="l409">        if ((end &gt; limit()) || (start &gt; end))</span><a href="#l409"></a>
<span id="l410">            throw new IndexOutOfBoundsException();</span><a href="#l410"></a>
<span id="l411">        try {</span><a href="#l411"></a>
<span id="l412">            int len = end - start;</span><a href="#l412"></a>
<span id="l413">            char[] ca = new char[len];</span><a href="#l413"></a>
<span id="l414">            CharBuffer cb = CharBuffer.wrap(ca);</span><a href="#l414"></a>
<span id="l415">            CharBuffer db = this.duplicate();</span><a href="#l415"></a>
<span id="l416">            db.position(start);</span><a href="#l416"></a>
<span id="l417">            db.limit(end);</span><a href="#l417"></a>
<span id="l418">            cb.put(db);</span><a href="#l418"></a>
<span id="l419">            return new String(ca);</span><a href="#l419"></a>
<span id="l420">        } catch (StringIndexOutOfBoundsException x) {</span><a href="#l420"></a>
<span id="l421">            throw new IndexOutOfBoundsException();</span><a href="#l421"></a>
<span id="l422">        }</span><a href="#l422"></a>
<span id="l423">    }</span><a href="#l423"></a>
<span id="l424"></span><a href="#l424"></a>
<span id="l425"></span><a href="#l425"></a>
<span id="l426">    // --- Methods to support CharSequence ---</span><a href="#l426"></a>
<span id="l427"></span><a href="#l427"></a>
<span id="l428">    public CharBuffer subSequence(int start, int end) {</span><a href="#l428"></a>
<span id="l429">        int pos = position();</span><a href="#l429"></a>
<span id="l430">        int lim = limit();</span><a href="#l430"></a>
<span id="l431">        assert (pos &lt;= lim);</span><a href="#l431"></a>
<span id="l432">        pos = (pos &lt;= lim ? pos : lim);</span><a href="#l432"></a>
<span id="l433">        int len = lim - pos;</span><a href="#l433"></a>
<span id="l434"></span><a href="#l434"></a>
<span id="l435">        if ((start &lt; 0) || (end &gt; len) || (start &gt; end))</span><a href="#l435"></a>
<span id="l436">            throw new IndexOutOfBoundsException();</span><a href="#l436"></a>
<span id="l437">        return new DirectCharBuffer$RW$$BO$(this,</span><a href="#l437"></a>
<span id="l438">                                            -1,</span><a href="#l438"></a>
<span id="l439">                                            pos + start,</span><a href="#l439"></a>
<span id="l440">                                            pos + end,</span><a href="#l440"></a>
<span id="l441">                                            capacity(),</span><a href="#l441"></a>
<span id="l442">                                            offset);</span><a href="#l442"></a>
<span id="l443">    }</span><a href="#l443"></a>
<span id="l444"></span><a href="#l444"></a>
<span id="l445">#end[char]</span><a href="#l445"></a>
<span id="l446"></span><a href="#l446"></a>
<span id="l447"></span><a href="#l447"></a>
<span id="l448"></span><a href="#l448"></a>
<span id="l449">#if[!byte]</span><a href="#l449"></a>
<span id="l450"></span><a href="#l450"></a>
<span id="l451">    public ByteOrder order() {</span><a href="#l451"></a>
<span id="l452">#if[boS]</span><a href="#l452"></a>
<span id="l453">        return ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN)</span><a href="#l453"></a>
<span id="l454">                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);</span><a href="#l454"></a>
<span id="l455">#end[boS]</span><a href="#l455"></a>
<span id="l456">#if[boU]</span><a href="#l456"></a>
<span id="l457">        return ((ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN)</span><a href="#l457"></a>
<span id="l458">                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);</span><a href="#l458"></a>
<span id="l459">#end[boU]</span><a href="#l459"></a>
<span id="l460">    }</span><a href="#l460"></a>
<span id="l461"></span><a href="#l461"></a>
<span id="l462">#end[!byte]</span><a href="#l462"></a>
<span id="l463"></span><a href="#l463"></a>
<span id="l464"></span><a href="#l464"></a>
<span id="l465"></span><a href="#l465"></a>
<span id="l466">#if[byte]</span><a href="#l466"></a>
<span id="l467"></span><a href="#l467"></a>
<span id="l468">    byte _get(int i) {                          // package-private</span><a href="#l468"></a>
<span id="l469">        return unsafe.getByte(address + i);</span><a href="#l469"></a>
<span id="l470">    }</span><a href="#l470"></a>
<span id="l471"></span><a href="#l471"></a>
<span id="l472">    void _put(int i, byte b) {                  // package-private</span><a href="#l472"></a>
<span id="l473">#if[rw]</span><a href="#l473"></a>
<span id="l474">        unsafe.putByte(address + i, b);</span><a href="#l474"></a>
<span id="l475">#else[rw]</span><a href="#l475"></a>
<span id="l476">        throw new ReadOnlyBufferException();</span><a href="#l476"></a>
<span id="l477">#end[rw]</span><a href="#l477"></a>
<span id="l478">    }</span><a href="#l478"></a>
<span id="l479"></span><a href="#l479"></a>
<span id="l480">    // #BIN</span><a href="#l480"></a>
<span id="l481">    //</span><a href="#l481"></a>
<span id="l482">    // Binary-data access methods  for short, char, int, long, float,</span><a href="#l482"></a>
<span id="l483">    // and double will be inserted here</span><a href="#l483"></a>
<span id="l484"></span><a href="#l484"></a>
<span id="l485">#end[byte]</span><a href="#l485"></a>
<span id="l486"></span><a href="#l486"></a>
<span id="l487">}</span><a href="#l487"></a></pre>
<div class="sourcelast"></div>
</div>
</div>
</div>



<div class="container"><div class="main footer">
&copy 2007, <script>document.write(new Date().getFullYear())</script> Oracle and/or its affiliates<br/>
<a href="http://openjdk.java.net/legal/tou/">Terms of Use</a>
&#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
&#183; <a href="https://openjdk.java.net/legal/openjdk-trademark-notice.html">Trademarks</a>
</div></div>

</body>
</html>

