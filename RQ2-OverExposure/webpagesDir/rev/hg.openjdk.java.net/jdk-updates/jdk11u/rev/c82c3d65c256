<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
<head>
<link rel="icon" href="/jdk-updates/jdk11u/static/nanoduke.ico" type="image/png" />
<meta name="robots" content="index, nofollow" />
<link rel="stylesheet" href="/jdk-updates/jdk11u/static/style-paper.css" type="text/css" />
<script type="text/javascript" src="/jdk-updates/jdk11u/static/mercurial.js"></script>

<title>jdk-updates/jdk11u: c82c3d65c256</title>
</head>
<body>
<div class="container">
<div class="menu">
<div class="logo">
<img src="/jdk-updates/jdk11u/static/duke_pipes.png" width=75 height=90 border=0 alt="Duke!" />
</div>
<ul>
 <li><a href="/jdk-updates/jdk11u/shortlog/c82c3d65c256">log</a></li>
 <li><a href="/jdk-updates/jdk11u/graph/c82c3d65c256">graph</a></li>
 <li><a href="/jdk-updates/jdk11u/tags">tags</a></li>
 <li><a href="/jdk-updates/jdk11u/bookmarks">bookmarks</a></li>
 <li><a href="/jdk-updates/jdk11u/branches">branches</a></li>
</ul>
<ul>
 <li class="active">changeset</li>
 <li><a href="/jdk-updates/jdk11u/raw-rev/c82c3d65c256">raw</a></li>
 <li><a href="/jdk-updates/jdk11u/file/c82c3d65c256">browse</a></li>
</ul>
<ul>
 
<li>
<a href="/jdk-updates/jdk11u/archive/c82c3d65c256.zip">zip</a>
</li>
<li>
<a href="/jdk-updates/jdk11u/archive/c82c3d65c256.tar.gz">gz</a>
</li>
<li>
<a href="/jdk-updates/jdk11u/archive/c82c3d65c256.tar.bz2">bz2</a>
</li>
</ul>
<ul>
 <li><a href="/jdk-updates/jdk11u/help">help</a></li>
</ul>
</div>

<div class="main">

<h2 class="breadcrumb"><a href="/">OpenJDK</a> / <a href="/jdk-updates">jdk-updates</a> / <a href="/jdk-updates/jdk11u">jdk11u</a> </h2>
<h3>changeset 53970:c82c3d65c256   </h3>

<form class="search" action="/jdk-updates/jdk11u/log">

<p><input name="rev" id="search1" type="text" size="30" /></p>
<div id="hint">Find changesets by keywords (author, files, the commit message), revision
number or hash, or <a href="/jdk-updates/jdk11u/help/revsets">revset expression</a>.</div>
</form>

<div class="description">8249906: Enhance opening JARs
8258247: Couple of issues in fix for JDK-8249906
8259428: AlgorithmId.getEncodedParams() should return copy
Reviewed-by: mbalao</div>

<table id="changesetEntry">
<tr>
 <th class="author">author</th>
 <td class="author">&#97;&#118;&#111;&#105;&#116;&#121;&#108;&#111;&#118;</td>
</tr>
<tr>
 <th class="date">date</th>
 <td class="date age">Tue, 02 Mar 2021 17:14:31 +0300</td></tr>
<tr>
 <th class="author">parents</th>
 <td class="author"><a href="/jdk-updates/jdk11u/rev/cbf26c2d36dc">cbf26c2d36dc</a> </td>
</tr>
<tr>
 <th class="author">children</th>
 <td class="author"> <a href="/jdk-updates/jdk11u/rev/15862747ee15">15862747ee15</a></td>
</tr>
<tr>
 <th class="files">files</th>
 <td class="files"><a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/java/security/cert/CertPathHelperImpl.java">src/java.base/share/classes/java/security/cert/CertPathHelperImpl.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/java/security/cert/TrustAnchor.java">src/java.base/share/classes/java/security/cert/TrustAnchor.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/pkcs/SignerInfo.java">src/java.base/share/classes/sun/security/pkcs/SignerInfo.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/AlgorithmChecker.java">src/java.base/share/classes/sun/security/provider/certpath/AlgorithmChecker.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/CertPathConstraintsParameters.java">src/java.base/share/classes/sun/security/provider/certpath/CertPathConstraintsParameters.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/CertPathHelper.java">src/java.base/share/classes/sun/security/provider/certpath/CertPathHelper.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java">src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/OCSP.java">src/java.base/share/classes/sun/security/provider/certpath/OCSP.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/OCSPResponse.java">src/java.base/share/classes/sun/security/provider/certpath/OCSPResponse.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/PKIX.java">src/java.base/share/classes/sun/security/provider/certpath/PKIX.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/PKIXCertPathValidator.java">src/java.base/share/classes/sun/security/provider/certpath/PKIXCertPathValidator.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/provider/certpath/RevocationChecker.java">src/java.base/share/classes/sun/security/provider/certpath/RevocationChecker.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/ssl/SSLContextImpl.java">src/java.base/share/classes/sun/security/ssl/SSLContextImpl.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java">src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/util/AnchorCertificates.java">src/java.base/share/classes/sun/security/util/AnchorCertificates.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/util/ConstraintsParameters.java">src/java.base/share/classes/sun/security/util/ConstraintsParameters.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/util/DisabledAlgorithmConstraints.java">src/java.base/share/classes/sun/security/util/DisabledAlgorithmConstraints.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/util/JarConstraintsParameters.java">src/java.base/share/classes/sun/security/util/JarConstraintsParameters.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/util/ManifestEntryVerifier.java">src/java.base/share/classes/sun/security/util/ManifestEntryVerifier.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java">src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/validator/PKIXValidator.java">src/java.base/share/classes/sun/security/validator/PKIXValidator.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/validator/SimpleValidator.java">src/java.base/share/classes/sun/security/validator/SimpleValidator.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/src/java.base/share/classes/sun/security/x509/AlgorithmId.java">src/java.base/share/classes/sun/security/x509/AlgorithmId.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/test/jdk/java/security/cert/X509Certificate/GetSigAlgParams.java">test/jdk/java/security/cert/X509Certificate/GetSigAlgParams.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/test/jdk/sun/security/pkcs/pkcs8/PKCS8Test.java">test/jdk/sun/security/pkcs/pkcs8/PKCS8Test.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/test/jdk/sun/security/tools/jarsigner/TimestampCheck.java">test/jdk/sun/security/tools/jarsigner/TimestampCheck.java</a> <a href="/jdk-updates/jdk11u/file/c82c3d65c256/test/jdk/sun/security/x509/AlgorithmId/AlgorithmIdEqualsHashCode.java">test/jdk/sun/security/x509/AlgorithmId/AlgorithmIdEqualsHashCode.java</a> </td>
</tr>
<tr>
  <th class="diffstat">diffstat</th>
  <td class="diffstat">
     27 files changed, 907 insertions(+), 531 deletions(-)

    <a id="diffstatexpand" href="javascript:toggleDiffstat()"/>[<tt>+</tt>]</a>
    <div id="diffstatdetails" style="display:none;">
      <a href="javascript:toggleDiffstat()"/>[<tt>-</tt>]</a>
      <p>
      <table class="stripes2">  <tr>
    <td class="diffstat-file"><a href="#l1.1">src/java.base/share/classes/java/security/cert/CertPathHelperImpl.java</a></td>
    <td class="diffstat-total" align="right">6</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:2.23214285714%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.446428571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l2.1">src/java.base/share/classes/java/security/cert/TrustAnchor.java</a></td>
    <td class="diffstat-total" align="right">23</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:9.82142857143%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.446428571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l3.1">src/java.base/share/classes/sun/security/pkcs/SignerInfo.java</a></td>
    <td class="diffstat-total" align="right">143</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:33.9285714286%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:29.9107142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l4.1">src/java.base/share/classes/sun/security/provider/certpath/AlgorithmChecker.java</a></td>
    <td class="diffstat-total" align="right">135</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:20.5357142857%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:39.7321428571%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l5.1">src/java.base/share/classes/sun/security/provider/certpath/CertPathConstraintsParameters.java</a></td>
    <td class="diffstat-total" align="right">125</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:55.8035714286%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.0%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l6.1">src/java.base/share/classes/sun/security/provider/certpath/CertPathHelper.java</a></td>
    <td class="diffstat-total" align="right">11</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:4.01785714286%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.892857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l7.1">src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java</a></td>
    <td class="diffstat-total" align="right">25</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:7.58928571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:3.57142857143%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l8.1">src/java.base/share/classes/sun/security/provider/certpath/OCSP.java</a></td>
    <td class="diffstat-total" align="right">3</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.892857142857%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.446428571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l9.1">src/java.base/share/classes/sun/security/provider/certpath/OCSPResponse.java</a></td>
    <td class="diffstat-total" align="right">9</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:3.125%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.892857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l10.1">src/java.base/share/classes/sun/security/provider/certpath/PKIX.java</a></td>
    <td class="diffstat-total" align="right">23</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:6.25%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:4.01785714286%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l11.1">src/java.base/share/classes/sun/security/provider/certpath/PKIXCertPathValidator.java</a></td>
    <td class="diffstat-total" align="right">19</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:1.33928571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:7.14285714286%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l12.1">src/java.base/share/classes/sun/security/provider/certpath/RevocationChecker.java</a></td>
    <td class="diffstat-total" align="right">5</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:1.33928571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.892857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l13.1">src/java.base/share/classes/sun/security/ssl/SSLContextImpl.java</a></td>
    <td class="diffstat-total" align="right">2</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.446428571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.446428571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l14.1">src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java</a></td>
    <td class="diffstat-total" align="right">3</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.446428571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.892857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l15.1">src/java.base/share/classes/sun/security/util/AnchorCertificates.java</a></td>
    <td class="diffstat-total" align="right">25</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:8.48214285714%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:2.67857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l16.1">src/java.base/share/classes/sun/security/util/ConstraintsParameters.java</a></td>
    <td class="diffstat-total" align="right">181</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:12.5%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:68.3035714286%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l17.1">src/java.base/share/classes/sun/security/util/DisabledAlgorithmConstraints.java</a></td>
    <td class="diffstat-total" align="right">224</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:57.5892857143%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:42.4107142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l18.1">src/java.base/share/classes/sun/security/util/JarConstraintsParameters.java</a></td>
    <td class="diffstat-total" align="right">188</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:83.9285714286%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.0%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l19.1">src/java.base/share/classes/sun/security/util/ManifestEntryVerifier.java</a></td>
    <td class="diffstat-total" align="right">60</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:24.1071428571%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:2.67857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l20.1">src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java</a></td>
    <td class="diffstat-total" align="right">68</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:11.1607142857%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:19.1964285714%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l21.1">src/java.base/share/classes/sun/security/validator/PKIXValidator.java</a></td>
    <td class="diffstat-total" align="right">2</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.446428571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.446428571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l22.1">src/java.base/share/classes/sun/security/validator/SimpleValidator.java</a></td>
    <td class="diffstat-total" align="right">2</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.446428571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.446428571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l23.1">src/java.base/share/classes/sun/security/x509/AlgorithmId.java</a></td>
    <td class="diffstat-total" align="right">52</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:16.0714285714%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:7.14285714286%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l24.1">test/jdk/java/security/cert/X509Certificate/GetSigAlgParams.java</a></td>
    <td class="diffstat-total" align="right">47</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:20.9821428571%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.0%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l25.1">test/jdk/sun/security/pkcs/pkcs8/PKCS8Test.java</a></td>
    <td class="diffstat-total" align="right">4</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.892857142857%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:0.892857142857%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l26.1">test/jdk/sun/security/tools/jarsigner/TimestampCheck.java</a></td>
    <td class="diffstat-total" align="right">5</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:0.892857142857%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:1.33928571429%;">&nbsp;</span>
    </td>
  </tr>
  <tr>
    <td class="diffstat-file"><a href="#l27.1">test/jdk/sun/security/x509/AlgorithmId/AlgorithmIdEqualsHashCode.java</a></td>
    <td class="diffstat-total" align="right">48</td>
    <td class="diffstat-graph">
      <span class="diffstat-add" style="width:19.6428571429%;">&nbsp;</span>
      <span class="diffstat-remove" style="width:1.78571428571%;">&nbsp;</span>
    </td>
  </tr>
</table>
    </div>
  </td>
</tr>
</table>

<div class="overflow">
<div class="sourcefirst linewraptoggle">line wrap: <a class="linewraplink" href="javascript:toggleLinewrap()">on</a></div>
<div class="sourcefirst"> line diff</div>
<div class="stripes2 diffblocks">
<div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l1.1" class="minusline">--- a/src/java.base/share/classes/java/security/cert/CertPathHelperImpl.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l1.1"></a>
<span id="l1.2" class="plusline">+++ b/src/java.base/share/classes/java/security/cert/CertPathHelperImpl.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l1.2"></a>
<span id="l1.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l1.3"></a>
<span id="l1.4"> /*</span><a href="#l1.4"></a>
<span id="l1.5" class="minusline">- * Copyright (c) 2002, 2009, Oracle and/or its affiliates. All rights reserved.</span><a href="#l1.5"></a>
<span id="l1.6" class="plusline">+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l1.6"></a>
<span id="l1.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l1.7"></a>
<span id="l1.8">  *</span><a href="#l1.8"></a>
<span id="l1.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l1.9"></a>
<span id="l1.10" class="atline">@@ -63,4 +63,8 @@</span><a href="#l1.10"></a>
<span id="l1.11">     protected void implSetDateAndTime(X509CRLSelector sel, Date date, long skew) {</span><a href="#l1.11"></a>
<span id="l1.12">         sel.setDateAndTime(date, skew);</span><a href="#l1.12"></a>
<span id="l1.13">     }</span><a href="#l1.13"></a>
<span id="l1.14" class="plusline">+</span><a href="#l1.14"></a>
<span id="l1.15" class="plusline">+    protected boolean implIsJdkCA(TrustAnchor anchor) {</span><a href="#l1.15"></a>
<span id="l1.16" class="plusline">+        return anchor.isJdkCA();</span><a href="#l1.16"></a>
<span id="l1.17" class="plusline">+    }</span><a href="#l1.17"></a>
<span id="l1.18"> }</span><a href="#l1.18"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l2.1" class="minusline">--- a/src/java.base/share/classes/java/security/cert/TrustAnchor.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l2.1"></a>
<span id="l2.2" class="plusline">+++ b/src/java.base/share/classes/java/security/cert/TrustAnchor.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l2.2"></a>
<span id="l2.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l2.3"></a>
<span id="l2.4"> /*</span><a href="#l2.4"></a>
<span id="l2.5" class="minusline">- * Copyright (c) 2001, 2014, Oracle and/or its affiliates. All rights reserved.</span><a href="#l2.5"></a>
<span id="l2.6" class="plusline">+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l2.6"></a>
<span id="l2.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l2.7"></a>
<span id="l2.8">  *</span><a href="#l2.8"></a>
<span id="l2.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l2.9"></a>
<span id="l2.10" class="atline">@@ -30,6 +30,7 @@</span><a href="#l2.10"></a>
<span id="l2.11"> </span><a href="#l2.11"></a>
<span id="l2.12"> import javax.security.auth.x500.X500Principal;</span><a href="#l2.12"></a>
<span id="l2.13"> </span><a href="#l2.13"></a>
<span id="l2.14" class="plusline">+import sun.security.util.AnchorCertificates;</span><a href="#l2.14"></a>
<span id="l2.15"> import sun.security.x509.NameConstraintsExtension;</span><a href="#l2.15"></a>
<span id="l2.16"> import sun.security.x509.X500Name;</span><a href="#l2.16"></a>
<span id="l2.17"> </span><a href="#l2.17"></a>
<span id="l2.18" class="atline">@@ -68,6 +69,12 @@</span><a href="#l2.18"></a>
<span id="l2.19">     private final X509Certificate trustedCert;</span><a href="#l2.19"></a>
<span id="l2.20">     private byte[] ncBytes;</span><a href="#l2.20"></a>
<span id="l2.21">     private NameConstraintsExtension nc;</span><a href="#l2.21"></a>
<span id="l2.22" class="plusline">+    private boolean jdkCA;</span><a href="#l2.22"></a>
<span id="l2.23" class="plusline">+    private boolean hasJdkCABeenChecked;</span><a href="#l2.23"></a>
<span id="l2.24" class="plusline">+</span><a href="#l2.24"></a>
<span id="l2.25" class="plusline">+    static {</span><a href="#l2.25"></a>
<span id="l2.26" class="plusline">+        CertPathHelperImpl.initialize();</span><a href="#l2.26"></a>
<span id="l2.27" class="plusline">+    }</span><a href="#l2.27"></a>
<span id="l2.28"> </span><a href="#l2.28"></a>
<span id="l2.29">     /**</span><a href="#l2.29"></a>
<span id="l2.30">      * Creates an instance of {@code TrustAnchor} with the specified</span><a href="#l2.30"></a>
<span id="l2.31" class="atline">@@ -330,4 +337,18 @@</span><a href="#l2.31"></a>
<span id="l2.32">             sb.append(&quot;  Name Constraints: &quot; + nc.toString() + &quot;\n&quot;);</span><a href="#l2.32"></a>
<span id="l2.33">         return sb.toString();</span><a href="#l2.33"></a>
<span id="l2.34">     }</span><a href="#l2.34"></a>
<span id="l2.35" class="plusline">+</span><a href="#l2.35"></a>
<span id="l2.36" class="plusline">+    /**</span><a href="#l2.36"></a>
<span id="l2.37" class="plusline">+     * Returns true if anchor is a JDK CA (a root CA that is included by</span><a href="#l2.37"></a>
<span id="l2.38" class="plusline">+     * default in the cacerts keystore).</span><a href="#l2.38"></a>
<span id="l2.39" class="plusline">+     */</span><a href="#l2.39"></a>
<span id="l2.40" class="plusline">+    synchronized boolean isJdkCA() {</span><a href="#l2.40"></a>
<span id="l2.41" class="plusline">+        if (!hasJdkCABeenChecked) {</span><a href="#l2.41"></a>
<span id="l2.42" class="plusline">+            if (trustedCert != null) {</span><a href="#l2.42"></a>
<span id="l2.43" class="plusline">+                jdkCA = AnchorCertificates.contains(trustedCert);</span><a href="#l2.43"></a>
<span id="l2.44" class="plusline">+            }</span><a href="#l2.44"></a>
<span id="l2.45" class="plusline">+            hasJdkCABeenChecked = true;</span><a href="#l2.45"></a>
<span id="l2.46" class="plusline">+        }</span><a href="#l2.46"></a>
<span id="l2.47" class="plusline">+        return jdkCA;</span><a href="#l2.47"></a>
<span id="l2.48" class="plusline">+    }</span><a href="#l2.48"></a>
<span id="l2.49"> }</span><a href="#l2.49"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l3.1" class="minusline">--- a/src/java.base/share/classes/sun/security/pkcs/SignerInfo.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l3.1"></a>
<span id="l3.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/pkcs/SignerInfo.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l3.2"></a>
<span id="l3.3" class="atline">@@ -35,13 +35,14 @@</span><a href="#l3.3"></a>
<span id="l3.4"> import java.security.cert.X509Certificate;</span><a href="#l3.4"></a>
<span id="l3.5"> import java.security.*;</span><a href="#l3.5"></a>
<span id="l3.6"> import java.util.ArrayList;</span><a href="#l3.6"></a>
<span id="l3.7" class="minusline">-import java.util.Arrays;</span><a href="#l3.7"></a>
<span id="l3.8"> import java.util.Collections;</span><a href="#l3.8"></a>
<span id="l3.9" class="minusline">-import java.util.EnumSet;</span><a href="#l3.9"></a>
<span id="l3.10" class="plusline">+import java.util.Date;</span><a href="#l3.10"></a>
<span id="l3.11" class="plusline">+import java.util.HashMap;</span><a href="#l3.11"></a>
<span id="l3.12" class="plusline">+import java.util.HashSet;</span><a href="#l3.12"></a>
<span id="l3.13" class="plusline">+import java.util.Map;</span><a href="#l3.13"></a>
<span id="l3.14"> import java.util.Set;</span><a href="#l3.14"></a>
<span id="l3.15"> </span><a href="#l3.15"></a>
<span id="l3.16"> import sun.security.timestamp.TimestampToken;</span><a href="#l3.16"></a>
<span id="l3.17" class="minusline">-import sun.security.util.ConstraintsParameters;</span><a href="#l3.17"></a>
<span id="l3.18"> import sun.security.util.Debug;</span><a href="#l3.18"></a>
<span id="l3.19"> import sun.security.util.DerEncoder;</span><a href="#l3.19"></a>
<span id="l3.20"> import sun.security.util.DerInputStream;</span><a href="#l3.20"></a>
<span id="l3.21" class="atline">@@ -49,12 +50,13 @@</span><a href="#l3.21"></a>
<span id="l3.22"> import sun.security.util.DerValue;</span><a href="#l3.22"></a>
<span id="l3.23"> import sun.security.util.DisabledAlgorithmConstraints;</span><a href="#l3.23"></a>
<span id="l3.24"> import sun.security.util.HexDumpEncoder;</span><a href="#l3.24"></a>
<span id="l3.25" class="plusline">+import sun.security.util.JarConstraintsParameters;</span><a href="#l3.25"></a>
<span id="l3.26"> import sun.security.util.KeyUtil;</span><a href="#l3.26"></a>
<span id="l3.27"> import sun.security.util.ObjectIdentifier;</span><a href="#l3.27"></a>
<span id="l3.28" class="plusline">+import sun.security.util.SignatureUtil;</span><a href="#l3.28"></a>
<span id="l3.29"> import sun.security.x509.AlgorithmId;</span><a href="#l3.29"></a>
<span id="l3.30"> import sun.security.x509.X500Name;</span><a href="#l3.30"></a>
<span id="l3.31"> import sun.security.x509.KeyUsageExtension;</span><a href="#l3.31"></a>
<span id="l3.32" class="minusline">-import sun.security.util.SignatureUtil;</span><a href="#l3.32"></a>
<span id="l3.33"> </span><a href="#l3.33"></a>
<span id="l3.34"> /**</span><a href="#l3.34"></a>
<span id="l3.35">  * A SignerInfo, as defined in PKCS#7's signedData type.</span><a href="#l3.35"></a>
<span id="l3.36" class="atline">@@ -63,16 +65,8 @@</span><a href="#l3.36"></a>
<span id="l3.37">  */</span><a href="#l3.37"></a>
<span id="l3.38"> public class SignerInfo implements DerEncoder {</span><a href="#l3.38"></a>
<span id="l3.39"> </span><a href="#l3.39"></a>
<span id="l3.40" class="minusline">-    // Digest and Signature restrictions</span><a href="#l3.40"></a>
<span id="l3.41" class="minusline">-    private static final Set&lt;CryptoPrimitive&gt; DIGEST_PRIMITIVE_SET =</span><a href="#l3.41"></a>
<span id="l3.42" class="minusline">-            Collections.unmodifiableSet(EnumSet.of(CryptoPrimitive.MESSAGE_DIGEST));</span><a href="#l3.42"></a>
<span id="l3.43" class="minusline">-</span><a href="#l3.43"></a>
<span id="l3.44" class="minusline">-    private static final Set&lt;CryptoPrimitive&gt; SIG_PRIMITIVE_SET =</span><a href="#l3.44"></a>
<span id="l3.45" class="minusline">-            Collections.unmodifiableSet(EnumSet.of(CryptoPrimitive.SIGNATURE));</span><a href="#l3.45"></a>
<span id="l3.46" class="minusline">-</span><a href="#l3.46"></a>
<span id="l3.47">     private static final DisabledAlgorithmConstraints JAR_DISABLED_CHECK =</span><a href="#l3.47"></a>
<span id="l3.48" class="minusline">-            new DisabledAlgorithmConstraints(</span><a href="#l3.48"></a>
<span id="l3.49" class="minusline">-                    DisabledAlgorithmConstraints.PROPERTY_JAR_DISABLED_ALGS);</span><a href="#l3.49"></a>
<span id="l3.50" class="plusline">+            DisabledAlgorithmConstraints.jarConstraints();</span><a href="#l3.50"></a>
<span id="l3.51"> </span><a href="#l3.51"></a>
<span id="l3.52">     BigInteger version;</span><a href="#l3.52"></a>
<span id="l3.53">     X500Name issuerName;</span><a href="#l3.53"></a>
<span id="l3.54" class="atline">@@ -87,6 +81,14 @@</span><a href="#l3.54"></a>
<span id="l3.55">     PKCS9Attributes authenticatedAttributes;</span><a href="#l3.55"></a>
<span id="l3.56">     PKCS9Attributes unauthenticatedAttributes;</span><a href="#l3.56"></a>
<span id="l3.57"> </span><a href="#l3.57"></a>
<span id="l3.58" class="plusline">+    /**</span><a href="#l3.58"></a>
<span id="l3.59" class="plusline">+     * A map containing the algorithms in this SignerInfo. This is used to</span><a href="#l3.59"></a>
<span id="l3.60" class="plusline">+     * avoid checking algorithms to see if they are disabled more than once.</span><a href="#l3.60"></a>
<span id="l3.61" class="plusline">+     * The key is the AlgorithmId of the algorithm, and the value is the name of</span><a href="#l3.61"></a>
<span id="l3.62" class="plusline">+     * the field or attribute.</span><a href="#l3.62"></a>
<span id="l3.63" class="plusline">+     */</span><a href="#l3.63"></a>
<span id="l3.64" class="plusline">+    private Map&lt;AlgorithmId, String&gt; algorithms = new HashMap&lt;&gt;();</span><a href="#l3.64"></a>
<span id="l3.65" class="plusline">+</span><a href="#l3.65"></a>
<span id="l3.66">     public SignerInfo(X500Name  issuerName,</span><a href="#l3.66"></a>
<span id="l3.67">                       BigInteger serial,</span><a href="#l3.67"></a>
<span id="l3.68">                       AlgorithmId digestAlgorithmId,</span><a href="#l3.68"></a>
<span id="l3.69" class="atline">@@ -313,21 +315,15 @@</span><a href="#l3.69"></a>
<span id="l3.70">     throws NoSuchAlgorithmException, SignatureException {</span><a href="#l3.70"></a>
<span id="l3.71"> </span><a href="#l3.71"></a>
<span id="l3.72">         try {</span><a href="#l3.72"></a>
<span id="l3.73" class="plusline">+            Timestamp timestamp = getTimestamp();</span><a href="#l3.73"></a>
<span id="l3.74"> </span><a href="#l3.74"></a>
<span id="l3.75">             ContentInfo content = block.getContentInfo();</span><a href="#l3.75"></a>
<span id="l3.76">             if (data == null) {</span><a href="#l3.76"></a>
<span id="l3.77">                 data = content.getContentBytes();</span><a href="#l3.77"></a>
<span id="l3.78">             }</span><a href="#l3.78"></a>
<span id="l3.79"> </span><a href="#l3.79"></a>
<span id="l3.80" class="minusline">-            Timestamp timestamp = null;</span><a href="#l3.80"></a>
<span id="l3.81" class="minusline">-            try {</span><a href="#l3.81"></a>
<span id="l3.82" class="minusline">-                timestamp = getTimestamp();</span><a href="#l3.82"></a>
<span id="l3.83" class="minusline">-            } catch (Exception ignore) {</span><a href="#l3.83"></a>
<span id="l3.84" class="minusline">-            }</span><a href="#l3.84"></a>
<span id="l3.85" class="minusline">-</span><a href="#l3.85"></a>
<span id="l3.86" class="minusline">-            ConstraintsParameters cparams =</span><a href="#l3.86"></a>
<span id="l3.87" class="minusline">-                    new ConstraintsParameters(timestamp);</span><a href="#l3.87"></a>
<span id="l3.88" class="minusline">-            String digestAlgname = getDigestAlgorithmId().getName();</span><a href="#l3.88"></a>
<span id="l3.89" class="plusline">+            String digestAlgName = digestAlgorithmId.getName();</span><a href="#l3.89"></a>
<span id="l3.90" class="plusline">+            algorithms.put(digestAlgorithmId, &quot;SignerInfo digestAlgorithm field&quot;);</span><a href="#l3.90"></a>
<span id="l3.91"> </span><a href="#l3.91"></a>
<span id="l3.92">             byte[] dataSigned;</span><a href="#l3.92"></a>
<span id="l3.93"> </span><a href="#l3.93"></a>
<span id="l3.94" class="atline">@@ -353,21 +349,11 @@</span><a href="#l3.94"></a>
<span id="l3.95">                 if (messageDigest == null) // fail if there is no message digest</span><a href="#l3.95"></a>
<span id="l3.96">                     return null;</span><a href="#l3.96"></a>
<span id="l3.97"> </span><a href="#l3.97"></a>
<span id="l3.98" class="minusline">-                // check that digest algorithm is not restricted</span><a href="#l3.98"></a>
<span id="l3.99" class="minusline">-                try {</span><a href="#l3.99"></a>
<span id="l3.100" class="minusline">-                    JAR_DISABLED_CHECK.permits(digestAlgname, cparams);</span><a href="#l3.100"></a>
<span id="l3.101" class="minusline">-                } catch (CertPathValidatorException e) {</span><a href="#l3.101"></a>
<span id="l3.102" class="minusline">-                    throw new SignatureException(e.getMessage(), e);</span><a href="#l3.102"></a>
<span id="l3.103" class="minusline">-                }</span><a href="#l3.103"></a>
<span id="l3.104" class="minusline">-</span><a href="#l3.104"></a>
<span id="l3.105" class="minusline">-                MessageDigest md = MessageDigest.getInstance(digestAlgname);</span><a href="#l3.105"></a>
<span id="l3.106" class="plusline">+                MessageDigest md = MessageDigest.getInstance(digestAlgName);</span><a href="#l3.106"></a>
<span id="l3.107">                 byte[] computedMessageDigest = md.digest(data);</span><a href="#l3.107"></a>
<span id="l3.108"> </span><a href="#l3.108"></a>
<span id="l3.109" class="minusline">-                if (messageDigest.length != computedMessageDigest.length)</span><a href="#l3.109"></a>
<span id="l3.110" class="plusline">+                if (!MessageDigest.isEqual(messageDigest, computedMessageDigest)) {</span><a href="#l3.110"></a>
<span id="l3.111">                     return null;</span><a href="#l3.111"></a>
<span id="l3.112" class="minusline">-                for (int i = 0; i &lt; messageDigest.length; i++) {</span><a href="#l3.112"></a>
<span id="l3.113" class="minusline">-                    if (messageDigest[i] != computedMessageDigest[i])</span><a href="#l3.113"></a>
<span id="l3.114" class="minusline">-                        return null;</span><a href="#l3.114"></a>
<span id="l3.115">                 }</span><a href="#l3.115"></a>
<span id="l3.116"> </span><a href="#l3.116"></a>
<span id="l3.117">                 // message digest attribute matched</span><a href="#l3.117"></a>
<span id="l3.118" class="atline">@@ -381,21 +367,23 @@</span><a href="#l3.118"></a>
<span id="l3.119"> </span><a href="#l3.119"></a>
<span id="l3.120">             // put together digest algorithm and encryption algorithm</span><a href="#l3.120"></a>
<span id="l3.121">             // to form signing algorithm</span><a href="#l3.121"></a>
<span id="l3.122" class="minusline">-            String encryptionAlgname =</span><a href="#l3.122"></a>
<span id="l3.123" class="plusline">+            String encryptionAlgName =</span><a href="#l3.123"></a>
<span id="l3.124">                 getDigestEncryptionAlgorithmId().getName();</span><a href="#l3.124"></a>
<span id="l3.125"> </span><a href="#l3.125"></a>
<span id="l3.126">             // Workaround: sometimes the encryptionAlgname is actually</span><a href="#l3.126"></a>
<span id="l3.127">             // a signature name</span><a href="#l3.127"></a>
<span id="l3.128" class="minusline">-            String tmp = AlgorithmId.getEncAlgFromSigAlg(encryptionAlgname);</span><a href="#l3.128"></a>
<span id="l3.129" class="minusline">-            if (tmp != null) encryptionAlgname = tmp;</span><a href="#l3.129"></a>
<span id="l3.130" class="minusline">-            String algname = AlgorithmId.makeSigAlg(</span><a href="#l3.130"></a>
<span id="l3.131" class="minusline">-                    digestAlgname, encryptionAlgname);</span><a href="#l3.131"></a>
<span id="l3.132" class="minusline">-</span><a href="#l3.132"></a>
<span id="l3.133" class="minusline">-            // check that jar signature algorithm is not restricted</span><a href="#l3.133"></a>
<span id="l3.134" class="plusline">+            String tmp = AlgorithmId.getEncAlgFromSigAlg(encryptionAlgName);</span><a href="#l3.134"></a>
<span id="l3.135" class="plusline">+            if (tmp != null) encryptionAlgName = tmp;</span><a href="#l3.135"></a>
<span id="l3.136" class="plusline">+            String sigAlgName = AlgorithmId.makeSigAlg(</span><a href="#l3.136"></a>
<span id="l3.137" class="plusline">+                    digestAlgName, encryptionAlgName);</span><a href="#l3.137"></a>
<span id="l3.138">             try {</span><a href="#l3.138"></a>
<span id="l3.139" class="minusline">-                JAR_DISABLED_CHECK.permits(algname, cparams);</span><a href="#l3.139"></a>
<span id="l3.140" class="minusline">-            } catch (CertPathValidatorException e) {</span><a href="#l3.140"></a>
<span id="l3.141" class="minusline">-                throw new SignatureException(e.getMessage(), e);</span><a href="#l3.141"></a>
<span id="l3.142" class="plusline">+                ObjectIdentifier oid = AlgorithmId.get(sigAlgName).getOID();</span><a href="#l3.142"></a>
<span id="l3.143" class="plusline">+                AlgorithmId sigAlgId =</span><a href="#l3.143"></a>
<span id="l3.144" class="plusline">+                    new AlgorithmId(oid,</span><a href="#l3.144"></a>
<span id="l3.145" class="plusline">+                            digestEncryptionAlgorithmId.getParameters());</span><a href="#l3.145"></a>
<span id="l3.146" class="plusline">+                algorithms.put(sigAlgId,</span><a href="#l3.146"></a>
<span id="l3.147" class="plusline">+                    &quot;SignerInfo digestEncryptionAlgorithm field&quot;);</span><a href="#l3.147"></a>
<span id="l3.148" class="plusline">+            } catch (NoSuchAlgorithmException ignore) {</span><a href="#l3.148"></a>
<span id="l3.149">             }</span><a href="#l3.149"></a>
<span id="l3.150"> </span><a href="#l3.150"></a>
<span id="l3.151">             X509Certificate cert = getCertificate(block);</span><a href="#l3.151"></a>
<span id="l3.152" class="atline">@@ -404,14 +392,6 @@</span><a href="#l3.152"></a>
<span id="l3.153">             }</span><a href="#l3.153"></a>
<span id="l3.154">             PublicKey key = cert.getPublicKey();</span><a href="#l3.154"></a>
<span id="l3.155"> </span><a href="#l3.155"></a>
<span id="l3.156" class="minusline">-            // check if the public key is restricted</span><a href="#l3.156"></a>
<span id="l3.157" class="minusline">-            if (!JAR_DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {</span><a href="#l3.157"></a>
<span id="l3.158" class="minusline">-                throw new SignatureException(&quot;Public key check failed. &quot; +</span><a href="#l3.158"></a>
<span id="l3.159" class="minusline">-                        &quot;Disabled key used: &quot; +</span><a href="#l3.159"></a>
<span id="l3.160" class="minusline">-                        KeyUtil.getKeySize(key) + &quot; bit &quot; +</span><a href="#l3.160"></a>
<span id="l3.161" class="minusline">-                        key.getAlgorithm());</span><a href="#l3.161"></a>
<span id="l3.162" class="minusline">-            }</span><a href="#l3.162"></a>
<span id="l3.163" class="minusline">-</span><a href="#l3.163"></a>
<span id="l3.164">             if (cert.hasUnsupportedCriticalExtension()) {</span><a href="#l3.164"></a>
<span id="l3.165">                 throw new SignatureException(&quot;Certificate has unsupported &quot;</span><a href="#l3.165"></a>
<span id="l3.166">                                              + &quot;critical extension(s)&quot;);</span><a href="#l3.166"></a>
<span id="l3.167" class="atline">@@ -448,13 +428,13 @@</span><a href="#l3.167"></a>
<span id="l3.168">                 }</span><a href="#l3.168"></a>
<span id="l3.169">             }</span><a href="#l3.169"></a>
<span id="l3.170"> </span><a href="#l3.170"></a>
<span id="l3.171" class="minusline">-            Signature sig = Signature.getInstance(algname);</span><a href="#l3.171"></a>
<span id="l3.172" class="plusline">+            Signature sig = Signature.getInstance(sigAlgName);</span><a href="#l3.172"></a>
<span id="l3.173"> </span><a href="#l3.173"></a>
<span id="l3.174">             AlgorithmParameters ap =</span><a href="#l3.174"></a>
<span id="l3.175">                 digestEncryptionAlgorithmId.getParameters();</span><a href="#l3.175"></a>
<span id="l3.176">             try {</span><a href="#l3.176"></a>
<span id="l3.177">                 SignatureUtil.initVerifyWithParam(sig, key,</span><a href="#l3.177"></a>
<span id="l3.178" class="minusline">-                    SignatureUtil.getParamSpec(algname, ap));</span><a href="#l3.178"></a>
<span id="l3.179" class="plusline">+                    SignatureUtil.getParamSpec(sigAlgName, ap));</span><a href="#l3.179"></a>
<span id="l3.180">             } catch (ProviderException | InvalidAlgorithmParameterException |</span><a href="#l3.180"></a>
<span id="l3.181">                      InvalidKeyException e) {</span><a href="#l3.181"></a>
<span id="l3.182">                 throw new SignatureException(e.getMessage(), e);</span><a href="#l3.182"></a>
<span id="l3.183" class="atline">@@ -464,9 +444,8 @@</span><a href="#l3.183"></a>
<span id="l3.184">             if (sig.verify(encryptedDigest)) {</span><a href="#l3.184"></a>
<span id="l3.185">                 return this;</span><a href="#l3.185"></a>
<span id="l3.186">             }</span><a href="#l3.186"></a>
<span id="l3.187" class="minusline">-        } catch (IOException e) {</span><a href="#l3.187"></a>
<span id="l3.188" class="minusline">-            throw new SignatureException(&quot;IO error verifying signature:\n&quot; +</span><a href="#l3.188"></a>
<span id="l3.189" class="minusline">-                                         e.getMessage());</span><a href="#l3.189"></a>
<span id="l3.190" class="plusline">+        } catch (IOException | CertificateException e) {</span><a href="#l3.190"></a>
<span id="l3.191" class="plusline">+            throw new SignatureException(&quot;Error verifying signature&quot;, e);</span><a href="#l3.191"></a>
<span id="l3.192">         }</span><a href="#l3.192"></a>
<span id="l3.193">         return null;</span><a href="#l3.193"></a>
<span id="l3.194">     }</span><a href="#l3.194"></a>
<span id="l3.195" class="atline">@@ -564,6 +543,9 @@</span><a href="#l3.195"></a>
<span id="l3.196">         // Extract the signer (the Timestamping Authority)</span><a href="#l3.196"></a>
<span id="l3.197">         // while verifying the content</span><a href="#l3.197"></a>
<span id="l3.198">         SignerInfo[] tsa = tsToken.verify(encTsTokenInfo);</span><a href="#l3.198"></a>
<span id="l3.199" class="plusline">+        if (tsa == null || tsa.length == 0) {</span><a href="#l3.199"></a>
<span id="l3.200" class="plusline">+            throw new SignatureException(&quot;Unable to verify timestamp&quot;);</span><a href="#l3.200"></a>
<span id="l3.201" class="plusline">+        }</span><a href="#l3.201"></a>
<span id="l3.202">         // Expect only one signer</span><a href="#l3.202"></a>
<span id="l3.203">         ArrayList&lt;X509Certificate&gt; chain = tsa[0].getCertificateChain(tsToken);</span><a href="#l3.203"></a>
<span id="l3.204">         CertificateFactory cf = CertificateFactory.getInstance(&quot;X.509&quot;);</span><a href="#l3.204"></a>
<span id="l3.205" class="atline">@@ -572,6 +554,7 @@</span><a href="#l3.205"></a>
<span id="l3.206">         TimestampToken tsTokenInfo = new TimestampToken(encTsTokenInfo);</span><a href="#l3.206"></a>
<span id="l3.207">         // Check that the signature timestamp applies to this signature</span><a href="#l3.207"></a>
<span id="l3.208">         verifyTimestamp(tsTokenInfo);</span><a href="#l3.208"></a>
<span id="l3.209" class="plusline">+        algorithms.putAll(tsa[0].algorithms);</span><a href="#l3.209"></a>
<span id="l3.210">         // Create a timestamp object</span><a href="#l3.210"></a>
<span id="l3.211">         timestamp = new Timestamp(tsTokenInfo.getDate(), tsaChain);</span><a href="#l3.211"></a>
<span id="l3.212">         return timestamp;</span><a href="#l3.212"></a>
<span id="l3.213" class="atline">@@ -584,18 +567,13 @@</span><a href="#l3.213"></a>
<span id="l3.214">      */</span><a href="#l3.214"></a>
<span id="l3.215">     private void verifyTimestamp(TimestampToken token)</span><a href="#l3.215"></a>
<span id="l3.216">         throws NoSuchAlgorithmException, SignatureException {</span><a href="#l3.216"></a>
<span id="l3.217" class="minusline">-        String digestAlgname = token.getHashAlgorithm().getName();</span><a href="#l3.217"></a>
<span id="l3.218" class="minusline">-        // check that algorithm is not restricted</span><a href="#l3.218"></a>
<span id="l3.219" class="minusline">-        if (!JAR_DISABLED_CHECK.permits(DIGEST_PRIMITIVE_SET, digestAlgname,</span><a href="#l3.219"></a>
<span id="l3.220" class="minusline">-                null)) {</span><a href="#l3.220"></a>
<span id="l3.221" class="minusline">-            throw new SignatureException(&quot;Timestamp token digest check failed. &quot; +</span><a href="#l3.221"></a>
<span id="l3.222" class="minusline">-                    &quot;Disabled algorithm used: &quot; + digestAlgname);</span><a href="#l3.222"></a>
<span id="l3.223" class="minusline">-        }</span><a href="#l3.223"></a>
<span id="l3.224" class="plusline">+</span><a href="#l3.224"></a>
<span id="l3.225" class="plusline">+        AlgorithmId digestAlgId = token.getHashAlgorithm();</span><a href="#l3.225"></a>
<span id="l3.226" class="plusline">+        algorithms.put(digestAlgId, &quot;TimestampToken digestAlgorithm field&quot;);</span><a href="#l3.226"></a>
<span id="l3.227"> </span><a href="#l3.227"></a>
<span id="l3.228" class="minusline">-        MessageDigest md =</span><a href="#l3.228"></a>
<span id="l3.229" class="minusline">-            MessageDigest.getInstance(digestAlgname);</span><a href="#l3.229"></a>
<span id="l3.230" class="plusline">+        MessageDigest md = MessageDigest.getInstance(digestAlgId.getName());</span><a href="#l3.230"></a>
<span id="l3.231"> </span><a href="#l3.231"></a>
<span id="l3.232" class="minusline">-        if (!Arrays.equals(token.getHashedMessage(),</span><a href="#l3.232"></a>
<span id="l3.233" class="plusline">+        if (!MessageDigest.isEqual(token.getHashedMessage(),</span><a href="#l3.233"></a>
<span id="l3.234">             md.digest(encryptedDigest))) {</span><a href="#l3.234"></a>
<span id="l3.235"> </span><a href="#l3.235"></a>
<span id="l3.236">             throw new SignatureException(&quot;Signature timestamp (#&quot; +</span><a href="#l3.236"></a>
<span id="l3.237" class="atline">@@ -636,4 +614,35 @@</span><a href="#l3.237"></a>
<span id="l3.238">         }</span><a href="#l3.238"></a>
<span id="l3.239">         return out;</span><a href="#l3.239"></a>
<span id="l3.240">     }</span><a href="#l3.240"></a>
<span id="l3.241" class="plusline">+</span><a href="#l3.241"></a>
<span id="l3.242" class="plusline">+    /**</span><a href="#l3.242"></a>
<span id="l3.243" class="plusline">+     * Verify all of the algorithms in the array of SignerInfos against the</span><a href="#l3.243"></a>
<span id="l3.244" class="plusline">+     * constraints in the jdk.jar.disabledAlgorithms security property.</span><a href="#l3.244"></a>
<span id="l3.245" class="plusline">+     *</span><a href="#l3.245"></a>
<span id="l3.246" class="plusline">+     * @param infos array of SignerInfos</span><a href="#l3.246"></a>
<span id="l3.247" class="plusline">+     * @param params constraint parameters</span><a href="#l3.247"></a>
<span id="l3.248" class="plusline">+     * @param name the name of the signer's PKCS7 file</span><a href="#l3.248"></a>
<span id="l3.249" class="plusline">+     * @return a set of algorithms that passed the checks and are not disabled</span><a href="#l3.249"></a>
<span id="l3.250" class="plusline">+     */</span><a href="#l3.250"></a>
<span id="l3.251" class="plusline">+    public static Set&lt;String&gt; verifyAlgorithms(SignerInfo[] infos,</span><a href="#l3.251"></a>
<span id="l3.252" class="plusline">+        JarConstraintsParameters params, String name) throws SignatureException {</span><a href="#l3.252"></a>
<span id="l3.253" class="plusline">+        Map&lt;AlgorithmId, String&gt; algorithms = new HashMap&lt;&gt;();</span><a href="#l3.253"></a>
<span id="l3.254" class="plusline">+        for (SignerInfo info : infos) {</span><a href="#l3.254"></a>
<span id="l3.255" class="plusline">+            algorithms.putAll(info.algorithms);</span><a href="#l3.255"></a>
<span id="l3.256" class="plusline">+        }</span><a href="#l3.256"></a>
<span id="l3.257" class="plusline">+</span><a href="#l3.257"></a>
<span id="l3.258" class="plusline">+        Set&lt;String&gt; enabledAlgorithms = new HashSet&lt;&gt;();</span><a href="#l3.258"></a>
<span id="l3.259" class="plusline">+        try {</span><a href="#l3.259"></a>
<span id="l3.260" class="plusline">+            for (Map.Entry&lt;AlgorithmId, String&gt; algorithm : algorithms.entrySet()) {</span><a href="#l3.260"></a>
<span id="l3.261" class="plusline">+                params.setExtendedExceptionMsg(name, algorithm.getValue());</span><a href="#l3.261"></a>
<span id="l3.262" class="plusline">+                AlgorithmId algId = algorithm.getKey();</span><a href="#l3.262"></a>
<span id="l3.263" class="plusline">+                JAR_DISABLED_CHECK.permits(algId.getName(),</span><a href="#l3.263"></a>
<span id="l3.264" class="plusline">+                    algId.getParameters(), params);</span><a href="#l3.264"></a>
<span id="l3.265" class="plusline">+                enabledAlgorithms.add(algId.getName());</span><a href="#l3.265"></a>
<span id="l3.266" class="plusline">+            }</span><a href="#l3.266"></a>
<span id="l3.267" class="plusline">+        } catch (CertPathValidatorException e) {</span><a href="#l3.267"></a>
<span id="l3.268" class="plusline">+            throw new SignatureException(e);</span><a href="#l3.268"></a>
<span id="l3.269" class="plusline">+        }</span><a href="#l3.269"></a>
<span id="l3.270" class="plusline">+        return enabledAlgorithms;</span><a href="#l3.270"></a>
<span id="l3.271" class="plusline">+    }</span><a href="#l3.271"></a>
<span id="l3.272"> }</span><a href="#l3.272"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l4.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/AlgorithmChecker.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l4.1"></a>
<span id="l4.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/AlgorithmChecker.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l4.2"></a>
<span id="l4.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l4.3"></a>
<span id="l4.4"> /*</span><a href="#l4.4"></a>
<span id="l4.5" class="minusline">- * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.</span><a href="#l4.5"></a>
<span id="l4.6" class="plusline">+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l4.6"></a>
<span id="l4.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l4.7"></a>
<span id="l4.8">  *</span><a href="#l4.8"></a>
<span id="l4.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l4.9"></a>
<span id="l4.10" class="atline">@@ -27,8 +27,6 @@</span><a href="#l4.10"></a>
<span id="l4.11"> </span><a href="#l4.11"></a>
<span id="l4.12"> import java.security.AlgorithmConstraints;</span><a href="#l4.12"></a>
<span id="l4.13"> import java.security.CryptoPrimitive;</span><a href="#l4.13"></a>
<span id="l4.14" class="minusline">-import java.security.Timestamp;</span><a href="#l4.14"></a>
<span id="l4.15" class="minusline">-import java.security.cert.CertPathValidator;</span><a href="#l4.15"></a>
<span id="l4.16"> import java.util.Collection;</span><a href="#l4.16"></a>
<span id="l4.17"> import java.util.Collections;</span><a href="#l4.17"></a>
<span id="l4.18"> import java.util.Date;</span><a href="#l4.18"></a>
<span id="l4.19" class="atline">@@ -53,14 +51,13 @@</span><a href="#l4.19"></a>
<span id="l4.20"> import java.security.interfaces.DSAPublicKey;</span><a href="#l4.20"></a>
<span id="l4.21"> import java.security.spec.DSAPublicKeySpec;</span><a href="#l4.21"></a>
<span id="l4.22"> </span><a href="#l4.22"></a>
<span id="l4.23" class="minusline">-import sun.security.util.AnchorCertificates;</span><a href="#l4.23"></a>
<span id="l4.24"> import sun.security.util.ConstraintsParameters;</span><a href="#l4.24"></a>
<span id="l4.25"> import sun.security.util.Debug;</span><a href="#l4.25"></a>
<span id="l4.26"> import sun.security.util.DisabledAlgorithmConstraints;</span><a href="#l4.26"></a>
<span id="l4.27"> import sun.security.validator.Validator;</span><a href="#l4.27"></a>
<span id="l4.28" class="plusline">+import sun.security.x509.AlgorithmId;</span><a href="#l4.28"></a>
<span id="l4.29"> import sun.security.x509.X509CertImpl;</span><a href="#l4.29"></a>
<span id="l4.30"> import sun.security.x509.X509CRLImpl;</span><a href="#l4.30"></a>
<span id="l4.31" class="minusline">-import sun.security.x509.AlgorithmId;</span><a href="#l4.31"></a>
<span id="l4.32"> </span><a href="#l4.32"></a>
<span id="l4.33"> /**</span><a href="#l4.33"></a>
<span id="l4.34">  * A {@code PKIXCertPathChecker} implementation to check whether a</span><a href="#l4.34"></a>
<span id="l4.35" class="atline">@@ -78,10 +75,10 @@</span><a href="#l4.35"></a>
<span id="l4.36"> </span><a href="#l4.36"></a>
<span id="l4.37">     private final AlgorithmConstraints constraints;</span><a href="#l4.37"></a>
<span id="l4.38">     private final PublicKey trustedPubKey;</span><a href="#l4.38"></a>
<span id="l4.39" class="minusline">-    private final Date pkixdate;</span><a href="#l4.39"></a>
<span id="l4.40" class="plusline">+    private final Date date;</span><a href="#l4.40"></a>
<span id="l4.41">     private PublicKey prevPubKey;</span><a href="#l4.41"></a>
<span id="l4.42" class="minusline">-    private final Timestamp jarTimestamp;</span><a href="#l4.42"></a>
<span id="l4.43">     private final String variant;</span><a href="#l4.43"></a>
<span id="l4.44" class="plusline">+    private TrustAnchor anchor;</span><a href="#l4.44"></a>
<span id="l4.45"> </span><a href="#l4.45"></a>
<span id="l4.46">     private static final Set&lt;CryptoPrimitive&gt; SIGNATURE_PRIMITIVE_SET =</span><a href="#l4.46"></a>
<span id="l4.47">         Collections.unmodifiableSet(EnumSet.of(CryptoPrimitive.SIGNATURE));</span><a href="#l4.47"></a>
<span id="l4.48" class="atline">@@ -94,95 +91,70 @@</span><a href="#l4.48"></a>
<span id="l4.49">             CryptoPrimitive.KEY_AGREEMENT));</span><a href="#l4.49"></a>
<span id="l4.50"> </span><a href="#l4.50"></a>
<span id="l4.51">     private static final DisabledAlgorithmConstraints</span><a href="#l4.51"></a>
<span id="l4.52" class="minusline">-        certPathDefaultConstraints = new DisabledAlgorithmConstraints(</span><a href="#l4.52"></a>
<span id="l4.53" class="minusline">-            DisabledAlgorithmConstraints.PROPERTY_CERTPATH_DISABLED_ALGS);</span><a href="#l4.53"></a>
<span id="l4.54" class="minusline">-</span><a href="#l4.54"></a>
<span id="l4.55" class="minusline">-    // If there is no &quot;cacerts&quot; keyword, then disable anchor checking</span><a href="#l4.55"></a>
<span id="l4.56" class="minusline">-    private static final boolean publicCALimits =</span><a href="#l4.56"></a>
<span id="l4.57" class="minusline">-            certPathDefaultConstraints.checkProperty(&quot;jdkCA&quot;);</span><a href="#l4.57"></a>
<span id="l4.58" class="minusline">-</span><a href="#l4.58"></a>
<span id="l4.59" class="minusline">-    // If anchor checking enabled, this will be true if the trust anchor</span><a href="#l4.59"></a>
<span id="l4.60" class="minusline">-    // has a match in the cacerts file</span><a href="#l4.60"></a>
<span id="l4.61" class="minusline">-    private boolean trustedMatch = false;</span><a href="#l4.61"></a>
<span id="l4.62" class="plusline">+        certPathDefaultConstraints =</span><a href="#l4.62"></a>
<span id="l4.63" class="plusline">+            DisabledAlgorithmConstraints.certPathConstraints();</span><a href="#l4.63"></a>
<span id="l4.64"> </span><a href="#l4.64"></a>
<span id="l4.65">     /**</span><a href="#l4.65"></a>
<span id="l4.66" class="minusline">-     * Create a new {@code AlgorithmChecker} with the given algorithm</span><a href="#l4.66"></a>
<span id="l4.67" class="minusline">-     * given {@code TrustAnchor} and {@code String} variant.</span><a href="#l4.67"></a>
<span id="l4.68" class="plusline">+     * Create a new {@code AlgorithmChecker} with the given</span><a href="#l4.68"></a>
<span id="l4.69" class="plusline">+     * {@code TrustAnchor} and {@code String} variant.</span><a href="#l4.69"></a>
<span id="l4.70">      *</span><a href="#l4.70"></a>
<span id="l4.71">      * @param anchor the trust anchor selected to validate the target</span><a href="#l4.71"></a>
<span id="l4.72">      *     certificate</span><a href="#l4.72"></a>
<span id="l4.73" class="minusline">-     * @param variant is the Validator variants of the operation. A null value</span><a href="#l4.73"></a>
<span id="l4.74" class="plusline">+     * @param variant the Validator variant of the operation. A null value</span><a href="#l4.74"></a>
<span id="l4.75">      *                passed will set it to Validator.GENERIC.</span><a href="#l4.75"></a>
<span id="l4.76">      */</span><a href="#l4.76"></a>
<span id="l4.77">     public AlgorithmChecker(TrustAnchor anchor, String variant) {</span><a href="#l4.77"></a>
<span id="l4.78" class="minusline">-        this(anchor, certPathDefaultConstraints, null, null, variant);</span><a href="#l4.78"></a>
<span id="l4.79" class="plusline">+        this(anchor, certPathDefaultConstraints, null, variant);</span><a href="#l4.79"></a>
<span id="l4.80">     }</span><a href="#l4.80"></a>
<span id="l4.81"> </span><a href="#l4.81"></a>
<span id="l4.82">     /**</span><a href="#l4.82"></a>
<span id="l4.83">      * Create a new {@code AlgorithmChecker} with the given</span><a href="#l4.83"></a>
<span id="l4.84" class="minusline">-     * {@code AlgorithmConstraints}, {@code Timestamp}, and {@code String}</span><a href="#l4.84"></a>
<span id="l4.85" class="minusline">-     * variant.</span><a href="#l4.85"></a>
<span id="l4.86" class="plusline">+     * {@code AlgorithmConstraints} and {@code String} variant.</span><a href="#l4.86"></a>
<span id="l4.87">      *</span><a href="#l4.87"></a>
<span id="l4.88">      * Note that this constructor can initialize a variation of situations where</span><a href="#l4.88"></a>
<span id="l4.89" class="minusline">-     * the AlgorithmConstraints, Timestamp, or Variant maybe known.</span><a href="#l4.89"></a>
<span id="l4.90" class="plusline">+     * the AlgorithmConstraints or Variant maybe known.</span><a href="#l4.90"></a>
<span id="l4.91">      *</span><a href="#l4.91"></a>
<span id="l4.92">      * @param constraints the algorithm constraints (or null)</span><a href="#l4.92"></a>
<span id="l4.93" class="minusline">-     * @param jarTimestamp Timestamp passed for JAR timestamp constraint</span><a href="#l4.93"></a>
<span id="l4.94" class="minusline">-     *                     checking. Set to null if not applicable.</span><a href="#l4.94"></a>
<span id="l4.95" class="minusline">-     * @param variant is the Validator variants of the operation. A null value</span><a href="#l4.95"></a>
<span id="l4.96" class="plusline">+     * @param variant the Validator variant of the operation. A null value</span><a href="#l4.96"></a>
<span id="l4.97">      *                passed will set it to Validator.GENERIC.</span><a href="#l4.97"></a>
<span id="l4.98">      */</span><a href="#l4.98"></a>
<span id="l4.99" class="minusline">-    public AlgorithmChecker(AlgorithmConstraints constraints,</span><a href="#l4.99"></a>
<span id="l4.100" class="minusline">-            Timestamp jarTimestamp, String variant) {</span><a href="#l4.100"></a>
<span id="l4.101" class="minusline">-        this(null, constraints, null, jarTimestamp, variant);</span><a href="#l4.101"></a>
<span id="l4.102" class="plusline">+    public AlgorithmChecker(AlgorithmConstraints constraints, String variant) {</span><a href="#l4.102"></a>
<span id="l4.103" class="plusline">+        this(null, constraints, null, variant);</span><a href="#l4.103"></a>
<span id="l4.104">     }</span><a href="#l4.104"></a>
<span id="l4.105"> </span><a href="#l4.105"></a>
<span id="l4.106">     /**</span><a href="#l4.106"></a>
<span id="l4.107">      * Create a new {@code AlgorithmChecker} with the</span><a href="#l4.107"></a>
<span id="l4.108" class="minusline">-     * given {@code TrustAnchor}, {@code AlgorithmConstraints},</span><a href="#l4.108"></a>
<span id="l4.109" class="minusline">-     * {@code Timestamp}, and {@code String} variant.</span><a href="#l4.109"></a>
<span id="l4.110" class="plusline">+     * given {@code TrustAnchor}, {@code AlgorithmConstraints}, {@code Date},</span><a href="#l4.110"></a>
<span id="l4.111" class="plusline">+     * and {@code String} variant.</span><a href="#l4.111"></a>
<span id="l4.112">      *</span><a href="#l4.112"></a>
<span id="l4.113">      * @param anchor the trust anchor selected to validate the target</span><a href="#l4.113"></a>
<span id="l4.114">      *     certificate</span><a href="#l4.114"></a>
<span id="l4.115">      * @param constraints the algorithm constraints (or null)</span><a href="#l4.115"></a>
<span id="l4.116" class="minusline">-     * @param pkixdate The date specified by the PKIXParameters date.  If the</span><a href="#l4.116"></a>
<span id="l4.117" class="minusline">-     *                 PKIXParameters is null, the current date is used.  This</span><a href="#l4.117"></a>
<span id="l4.118" class="minusline">-     *                 should be null when jar files are being checked.</span><a href="#l4.118"></a>
<span id="l4.119" class="minusline">-     * @param jarTimestamp Timestamp passed for JAR timestamp constraint</span><a href="#l4.119"></a>
<span id="l4.120" class="minusline">-     *                     checking. Set to null if not applicable.</span><a href="#l4.120"></a>
<span id="l4.121" class="minusline">-     * @param variant is the Validator variants of the operation. A null value</span><a href="#l4.121"></a>
<span id="l4.122" class="plusline">+     * @param date the date specified by the PKIXParameters date, or the</span><a href="#l4.122"></a>
<span id="l4.123" class="plusline">+     *             JAR timestamp if jar files are being validated and the</span><a href="#l4.123"></a>
<span id="l4.124" class="plusline">+     *             JAR is timestamped. May be null if no timestamp or</span><a href="#l4.124"></a>
<span id="l4.125" class="plusline">+     *             PKIXParameter date is set.</span><a href="#l4.125"></a>
<span id="l4.126" class="plusline">+     * @param variant the Validator variant of the operation. A null value</span><a href="#l4.126"></a>
<span id="l4.127">      *                passed will set it to Validator.GENERIC.</span><a href="#l4.127"></a>
<span id="l4.128">      */</span><a href="#l4.128"></a>
<span id="l4.129">     public AlgorithmChecker(TrustAnchor anchor,</span><a href="#l4.129"></a>
<span id="l4.130" class="minusline">-            AlgorithmConstraints constraints, Date pkixdate,</span><a href="#l4.130"></a>
<span id="l4.131" class="minusline">-            Timestamp jarTimestamp, String variant) {</span><a href="#l4.131"></a>
<span id="l4.132" class="plusline">+            AlgorithmConstraints constraints, Date date, String variant) {</span><a href="#l4.132"></a>
<span id="l4.133"> </span><a href="#l4.133"></a>
<span id="l4.134">         if (anchor != null) {</span><a href="#l4.134"></a>
<span id="l4.135">             if (anchor.getTrustedCert() != null) {</span><a href="#l4.135"></a>
<span id="l4.136">                 this.trustedPubKey = anchor.getTrustedCert().getPublicKey();</span><a href="#l4.136"></a>
<span id="l4.137" class="minusline">-                // Check for anchor certificate restrictions</span><a href="#l4.137"></a>
<span id="l4.138" class="minusline">-                trustedMatch = checkFingerprint(anchor.getTrustedCert());</span><a href="#l4.138"></a>
<span id="l4.139" class="minusline">-                if (trustedMatch &amp;&amp; debug != null) {</span><a href="#l4.139"></a>
<span id="l4.140" class="minusline">-                    debug.println(&quot;trustedMatch = true&quot;);</span><a href="#l4.140"></a>
<span id="l4.141" class="minusline">-                }</span><a href="#l4.141"></a>
<span id="l4.142">             } else {</span><a href="#l4.142"></a>
<span id="l4.143">                 this.trustedPubKey = anchor.getCAPublicKey();</span><a href="#l4.143"></a>
<span id="l4.144">             }</span><a href="#l4.144"></a>
<span id="l4.145" class="plusline">+            this.anchor = anchor;</span><a href="#l4.145"></a>
<span id="l4.146">         } else {</span><a href="#l4.146"></a>
<span id="l4.147">             this.trustedPubKey = null;</span><a href="#l4.147"></a>
<span id="l4.148" class="minusline">-            if (debug != null) {</span><a href="#l4.148"></a>
<span id="l4.149" class="minusline">-                debug.println(&quot;TrustAnchor is null, trustedMatch is false.&quot;);</span><a href="#l4.149"></a>
<span id="l4.150" class="minusline">-            }</span><a href="#l4.150"></a>
<span id="l4.151">         }</span><a href="#l4.151"></a>
<span id="l4.152"> </span><a href="#l4.152"></a>
<span id="l4.153">         this.prevPubKey = this.trustedPubKey;</span><a href="#l4.153"></a>
<span id="l4.154">         this.constraints = (constraints == null ? certPathDefaultConstraints :</span><a href="#l4.154"></a>
<span id="l4.155">                 constraints);</span><a href="#l4.155"></a>
<span id="l4.156" class="minusline">-        // If we are checking jar files, set pkixdate the same as the timestamp</span><a href="#l4.156"></a>
<span id="l4.157" class="minusline">-        // for certificate checking</span><a href="#l4.157"></a>
<span id="l4.158" class="minusline">-        this.pkixdate = (jarTimestamp != null ? jarTimestamp.getTimestamp() :</span><a href="#l4.158"></a>
<span id="l4.159" class="minusline">-                pkixdate);</span><a href="#l4.159"></a>
<span id="l4.160" class="minusline">-        this.jarTimestamp = jarTimestamp;</span><a href="#l4.160"></a>
<span id="l4.161" class="plusline">+        this.date = date;</span><a href="#l4.161"></a>
<span id="l4.162">         this.variant = (variant == null ? Validator.VAR_GENERIC : variant);</span><a href="#l4.162"></a>
<span id="l4.163">     }</span><a href="#l4.163"></a>
<span id="l4.164"> </span><a href="#l4.164"></a>
<span id="l4.165" class="atline">@@ -194,24 +166,11 @@</span><a href="#l4.165"></a>
<span id="l4.166">      *     certificate</span><a href="#l4.166"></a>
<span id="l4.167">      * @param pkixdate Date the constraints are checked against. The value is</span><a href="#l4.167"></a>
<span id="l4.168">      *             either the PKIXParameters date or null for the current date.</span><a href="#l4.168"></a>
<span id="l4.169" class="minusline">-     * @param variant is the Validator variants of the operation. A null value</span><a href="#l4.169"></a>
<span id="l4.170" class="plusline">+     * @param variant the Validator variant of the operation. A null value</span><a href="#l4.170"></a>
<span id="l4.171">      *                passed will set it to Validator.GENERIC.</span><a href="#l4.171"></a>
<span id="l4.172">      */</span><a href="#l4.172"></a>
<span id="l4.173">     public AlgorithmChecker(TrustAnchor anchor, Date pkixdate, String variant) {</span><a href="#l4.173"></a>
<span id="l4.174" class="minusline">-        this(anchor, certPathDefaultConstraints, pkixdate, null, variant);</span><a href="#l4.174"></a>
<span id="l4.175" class="minusline">-    }</span><a href="#l4.175"></a>
<span id="l4.176" class="minusline">-</span><a href="#l4.176"></a>
<span id="l4.177" class="minusline">-    // Check this 'cert' for restrictions in the AnchorCertificates</span><a href="#l4.177"></a>
<span id="l4.178" class="minusline">-    // trusted certificates list</span><a href="#l4.178"></a>
<span id="l4.179" class="minusline">-    private static boolean checkFingerprint(X509Certificate cert) {</span><a href="#l4.179"></a>
<span id="l4.180" class="minusline">-        if (!publicCALimits) {</span><a href="#l4.180"></a>
<span id="l4.181" class="minusline">-            return false;</span><a href="#l4.181"></a>
<span id="l4.182" class="minusline">-        }</span><a href="#l4.182"></a>
<span id="l4.183" class="minusline">-</span><a href="#l4.183"></a>
<span id="l4.184" class="minusline">-        if (debug != null) {</span><a href="#l4.184"></a>
<span id="l4.185" class="minusline">-            debug.println(&quot;AlgorithmChecker.contains: &quot; + cert.getSigAlgName());</span><a href="#l4.185"></a>
<span id="l4.186" class="minusline">-        }</span><a href="#l4.186"></a>
<span id="l4.187" class="minusline">-        return AnchorCertificates.contains(cert);</span><a href="#l4.187"></a>
<span id="l4.188" class="plusline">+        this(anchor, certPathDefaultConstraints, pkixdate, variant);</span><a href="#l4.188"></a>
<span id="l4.189">     }</span><a href="#l4.189"></a>
<span id="l4.190"> </span><a href="#l4.190"></a>
<span id="l4.191">     @Override</span><a href="#l4.191"></a>
<span id="l4.192" class="atline">@@ -318,18 +277,19 @@</span><a href="#l4.192"></a>
<span id="l4.193">         }</span><a href="#l4.193"></a>
<span id="l4.194"> </span><a href="#l4.194"></a>
<span id="l4.195">         ConstraintsParameters cp =</span><a href="#l4.195"></a>
<span id="l4.196" class="minusline">-                new ConstraintsParameters((X509Certificate)cert,</span><a href="#l4.196"></a>
<span id="l4.197" class="minusline">-                        trustedMatch, pkixdate, jarTimestamp, variant);</span><a href="#l4.197"></a>
<span id="l4.198" class="plusline">+            new CertPathConstraintsParameters(x509Cert, variant,</span><a href="#l4.198"></a>
<span id="l4.199" class="plusline">+                    anchor, date);</span><a href="#l4.199"></a>
<span id="l4.200"> </span><a href="#l4.200"></a>
<span id="l4.201">         // Check against local constraints if it is DisabledAlgorithmConstraints</span><a href="#l4.201"></a>
<span id="l4.202">         if (constraints instanceof DisabledAlgorithmConstraints) {</span><a href="#l4.202"></a>
<span id="l4.203" class="minusline">-            ((DisabledAlgorithmConstraints)constraints).permits(currSigAlg, cp);</span><a href="#l4.203"></a>
<span id="l4.204" class="plusline">+            ((DisabledAlgorithmConstraints)constraints).permits(currSigAlg,</span><a href="#l4.204"></a>
<span id="l4.205" class="plusline">+                currSigAlgParams, cp);</span><a href="#l4.205"></a>
<span id="l4.206">             // DisabledAlgorithmsConstraints does not check primitives, so key</span><a href="#l4.206"></a>
<span id="l4.207">             // additional key check.</span><a href="#l4.207"></a>
<span id="l4.208"> </span><a href="#l4.208"></a>
<span id="l4.209">         } else {</span><a href="#l4.209"></a>
<span id="l4.210">             // Perform the default constraints checking anyway.</span><a href="#l4.210"></a>
<span id="l4.211" class="minusline">-            certPathDefaultConstraints.permits(currSigAlg, cp);</span><a href="#l4.211"></a>
<span id="l4.212" class="plusline">+            certPathDefaultConstraints.permits(currSigAlg, currSigAlgParams, cp);</span><a href="#l4.212"></a>
<span id="l4.213">             // Call locally set constraints to check key with primitives.</span><a href="#l4.213"></a>
<span id="l4.214">             if (!constraints.permits(primitives, currPubKey)) {</span><a href="#l4.214"></a>
<span id="l4.215">                 throw new CertPathValidatorException(</span><a href="#l4.215"></a>
<span id="l4.216" class="atline">@@ -408,14 +368,10 @@</span><a href="#l4.216"></a>
<span id="l4.217">             // Don't bother to change the trustedPubKey.</span><a href="#l4.217"></a>
<span id="l4.218">             if (anchor.getTrustedCert() != null) {</span><a href="#l4.218"></a>
<span id="l4.219">                 prevPubKey = anchor.getTrustedCert().getPublicKey();</span><a href="#l4.219"></a>
<span id="l4.220" class="minusline">-                // Check for anchor certificate restrictions</span><a href="#l4.220"></a>
<span id="l4.221" class="minusline">-                trustedMatch = checkFingerprint(anchor.getTrustedCert());</span><a href="#l4.221"></a>
<span id="l4.222" class="minusline">-                if (trustedMatch &amp;&amp; debug != null) {</span><a href="#l4.222"></a>
<span id="l4.223" class="minusline">-                    debug.println(&quot;trustedMatch = true&quot;);</span><a href="#l4.223"></a>
<span id="l4.224" class="minusline">-                }</span><a href="#l4.224"></a>
<span id="l4.225">             } else {</span><a href="#l4.225"></a>
<span id="l4.226">                 prevPubKey = anchor.getCAPublicKey();</span><a href="#l4.226"></a>
<span id="l4.227">             }</span><a href="#l4.227"></a>
<span id="l4.228" class="plusline">+            this.anchor = anchor;</span><a href="#l4.228"></a>
<span id="l4.229">         }</span><a href="#l4.229"></a>
<span id="l4.230">     }</span><a href="#l4.230"></a>
<span id="l4.231"> </span><a href="#l4.231"></a>
<span id="l4.232" class="atline">@@ -424,11 +380,12 @@</span><a href="#l4.232"></a>
<span id="l4.233">      *</span><a href="#l4.233"></a>
<span id="l4.234">      * @param key the public key to verify the CRL signature</span><a href="#l4.234"></a>
<span id="l4.235">      * @param crl the target CRL</span><a href="#l4.235"></a>
<span id="l4.236" class="minusline">-     * @param variant is the Validator variants of the operation. A null value</span><a href="#l4.236"></a>
<span id="l4.237" class="plusline">+     * @param variant the Validator variant of the operation. A null value</span><a href="#l4.237"></a>
<span id="l4.238">      *                passed will set it to Validator.GENERIC.</span><a href="#l4.238"></a>
<span id="l4.239" class="plusline">+     * @param anchor the trust anchor selected to validate the CRL issuer</span><a href="#l4.239"></a>
<span id="l4.240">      */</span><a href="#l4.240"></a>
<span id="l4.241" class="minusline">-    static void check(PublicKey key, X509CRL crl, String variant)</span><a href="#l4.241"></a>
<span id="l4.242" class="minusline">-                        throws CertPathValidatorException {</span><a href="#l4.242"></a>
<span id="l4.243" class="plusline">+    static void check(PublicKey key, X509CRL crl, String variant,</span><a href="#l4.243"></a>
<span id="l4.244" class="plusline">+                      TrustAnchor anchor) throws CertPathValidatorException {</span><a href="#l4.244"></a>
<span id="l4.245"> </span><a href="#l4.245"></a>
<span id="l4.246">         X509CRLImpl x509CRLImpl = null;</span><a href="#l4.246"></a>
<span id="l4.247">         try {</span><a href="#l4.247"></a>
<span id="l4.248" class="atline">@@ -438,7 +395,7 @@</span><a href="#l4.248"></a>
<span id="l4.249">         }</span><a href="#l4.249"></a>
<span id="l4.250"> </span><a href="#l4.250"></a>
<span id="l4.251">         AlgorithmId algorithmId = x509CRLImpl.getSigAlgId();</span><a href="#l4.251"></a>
<span id="l4.252" class="minusline">-        check(key, algorithmId, variant);</span><a href="#l4.252"></a>
<span id="l4.253" class="plusline">+        check(key, algorithmId, variant, anchor);</span><a href="#l4.253"></a>
<span id="l4.254">     }</span><a href="#l4.254"></a>
<span id="l4.255"> </span><a href="#l4.255"></a>
<span id="l4.256">     /**</span><a href="#l4.256"></a>
<span id="l4.257" class="atline">@@ -446,16 +403,16 @@</span><a href="#l4.257"></a>
<span id="l4.258">      *</span><a href="#l4.258"></a>
<span id="l4.259">      * @param key the public key to verify the CRL signature</span><a href="#l4.259"></a>
<span id="l4.260">      * @param algorithmId signature algorithm Algorithm ID</span><a href="#l4.260"></a>
<span id="l4.261" class="minusline">-     * @param variant is the Validator variants of the operation. A null value</span><a href="#l4.261"></a>
<span id="l4.262" class="minusline">-     *                passed will set it to Validator.GENERIC.</span><a href="#l4.262"></a>
<span id="l4.263" class="plusline">+     * @param variant the Validator variant of the operation. A null</span><a href="#l4.263"></a>
<span id="l4.264" class="plusline">+     *                value passed will set it to Validator.GENERIC.</span><a href="#l4.264"></a>
<span id="l4.265" class="plusline">+     * @param anchor the trust anchor selected to validate the public key</span><a href="#l4.265"></a>
<span id="l4.266">      */</span><a href="#l4.266"></a>
<span id="l4.267" class="minusline">-    static void check(PublicKey key, AlgorithmId algorithmId, String variant)</span><a href="#l4.267"></a>
<span id="l4.268" class="minusline">-                        throws CertPathValidatorException {</span><a href="#l4.268"></a>
<span id="l4.269" class="minusline">-        String sigAlgName = algorithmId.getName();</span><a href="#l4.269"></a>
<span id="l4.270" class="minusline">-        AlgorithmParameters sigAlgParams = algorithmId.getParameters();</span><a href="#l4.270"></a>
<span id="l4.271" class="plusline">+    static void check(PublicKey key, AlgorithmId algorithmId, String variant,</span><a href="#l4.271"></a>
<span id="l4.272" class="plusline">+                      TrustAnchor anchor) throws CertPathValidatorException {</span><a href="#l4.272"></a>
<span id="l4.273"> </span><a href="#l4.273"></a>
<span id="l4.274" class="minusline">-        certPathDefaultConstraints.permits(new ConstraintsParameters(</span><a href="#l4.274"></a>
<span id="l4.275" class="minusline">-                sigAlgName, sigAlgParams, key, variant));</span><a href="#l4.275"></a>
<span id="l4.276" class="plusline">+        certPathDefaultConstraints.permits(algorithmId.getName(),</span><a href="#l4.276"></a>
<span id="l4.277" class="plusline">+            algorithmId.getParameters(),</span><a href="#l4.277"></a>
<span id="l4.278" class="plusline">+            new CertPathConstraintsParameters(key, variant, anchor));</span><a href="#l4.278"></a>
<span id="l4.279">     }</span><a href="#l4.279"></a>
<span id="l4.280"> }</span><a href="#l4.280"></a>
<span id="l4.281"> </span><a href="#l4.281"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l5.1" class="minusline">--- /dev/null	Thu Jan 01 00:00:00 1970 +0000</span><a href="#l5.1"></a>
<span id="l5.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/CertPathConstraintsParameters.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l5.2"></a>
<span id="l5.3" class="atline">@@ -0,0 +1,125 @@</span><a href="#l5.3"></a>
<span id="l5.4" class="plusline">+/*</span><a href="#l5.4"></a>
<span id="l5.5" class="plusline">+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l5.5"></a>
<span id="l5.6" class="plusline">+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l5.6"></a>
<span id="l5.7" class="plusline">+ *</span><a href="#l5.7"></a>
<span id="l5.8" class="plusline">+ * This code is free software; you can redistribute it and/or modify it</span><a href="#l5.8"></a>
<span id="l5.9" class="plusline">+ * under the terms of the GNU General Public License version 2 only, as</span><a href="#l5.9"></a>
<span id="l5.10" class="plusline">+ * published by the Free Software Foundation.  Oracle designates this</span><a href="#l5.10"></a>
<span id="l5.11" class="plusline">+ * particular file as subject to the &quot;Classpath&quot; exception as provided</span><a href="#l5.11"></a>
<span id="l5.12" class="plusline">+ * by Oracle in the LICENSE file that accompanied this code.</span><a href="#l5.12"></a>
<span id="l5.13" class="plusline">+ *</span><a href="#l5.13"></a>
<span id="l5.14" class="plusline">+ * This code is distributed in the hope that it will be useful, but WITHOUT</span><a href="#l5.14"></a>
<span id="l5.15" class="plusline">+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span><a href="#l5.15"></a>
<span id="l5.16" class="plusline">+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span><a href="#l5.16"></a>
<span id="l5.17" class="plusline">+ * version 2 for more details (a copy is included in the LICENSE file that</span><a href="#l5.17"></a>
<span id="l5.18" class="plusline">+ * accompanied this code).</span><a href="#l5.18"></a>
<span id="l5.19" class="plusline">+ *</span><a href="#l5.19"></a>
<span id="l5.20" class="plusline">+ * You should have received a copy of the GNU General Public License version</span><a href="#l5.20"></a>
<span id="l5.21" class="plusline">+ * 2 along with this work; if not, write to the Free Software Foundation,</span><a href="#l5.21"></a>
<span id="l5.22" class="plusline">+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span><a href="#l5.22"></a>
<span id="l5.23" class="plusline">+ *</span><a href="#l5.23"></a>
<span id="l5.24" class="plusline">+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span><a href="#l5.24"></a>
<span id="l5.25" class="plusline">+ * or visit www.oracle.com if you need additional information or have any</span><a href="#l5.25"></a>
<span id="l5.26" class="plusline">+ * questions.</span><a href="#l5.26"></a>
<span id="l5.27" class="plusline">+ */</span><a href="#l5.27"></a>
<span id="l5.28" class="plusline">+</span><a href="#l5.28"></a>
<span id="l5.29" class="plusline">+package sun.security.provider.certpath;</span><a href="#l5.29"></a>
<span id="l5.30" class="plusline">+</span><a href="#l5.30"></a>
<span id="l5.31" class="plusline">+import java.security.Key;</span><a href="#l5.31"></a>
<span id="l5.32" class="plusline">+import java.security.cert.TrustAnchor;</span><a href="#l5.32"></a>
<span id="l5.33" class="plusline">+import java.security.cert.X509Certificate;</span><a href="#l5.33"></a>
<span id="l5.34" class="plusline">+import java.util.Date;</span><a href="#l5.34"></a>
<span id="l5.35" class="plusline">+import java.util.Set;</span><a href="#l5.35"></a>
<span id="l5.36" class="plusline">+</span><a href="#l5.36"></a>
<span id="l5.37" class="plusline">+import sun.security.util.ConstraintsParameters;</span><a href="#l5.37"></a>
<span id="l5.38" class="plusline">+import sun.security.validator.Validator;</span><a href="#l5.38"></a>
<span id="l5.39" class="plusline">+</span><a href="#l5.39"></a>
<span id="l5.40" class="plusline">+/**</span><a href="#l5.40"></a>
<span id="l5.41" class="plusline">+ * This class contains parameters for checking certificates against</span><a href="#l5.41"></a>
<span id="l5.42" class="plusline">+ * constraints specified in the jdk.certpath.disabledAlgorithms security</span><a href="#l5.42"></a>
<span id="l5.43" class="plusline">+ * property.</span><a href="#l5.43"></a>
<span id="l5.44" class="plusline">+ */</span><a href="#l5.44"></a>
<span id="l5.45" class="plusline">+class CertPathConstraintsParameters implements ConstraintsParameters {</span><a href="#l5.45"></a>
<span id="l5.46" class="plusline">+    // The public key of the certificate</span><a href="#l5.46"></a>
<span id="l5.47" class="plusline">+    private final Key key;</span><a href="#l5.47"></a>
<span id="l5.48" class="plusline">+    // The certificate's trust anchor which will be checked against the</span><a href="#l5.48"></a>
<span id="l5.49" class="plusline">+    // jdkCA constraint, if specified.</span><a href="#l5.49"></a>
<span id="l5.50" class="plusline">+    private final TrustAnchor anchor;</span><a href="#l5.50"></a>
<span id="l5.51" class="plusline">+    // The PKIXParameter validity date or the timestamp of the signed JAR</span><a href="#l5.51"></a>
<span id="l5.52" class="plusline">+    // file, if this chain is associated with a timestamped signed JAR.</span><a href="#l5.52"></a>
<span id="l5.53" class="plusline">+    private final Date date;</span><a href="#l5.53"></a>
<span id="l5.54" class="plusline">+    // The variant or usage of this certificate</span><a href="#l5.54"></a>
<span id="l5.55" class="plusline">+    private final String variant;</span><a href="#l5.55"></a>
<span id="l5.56" class="plusline">+    // The certificate being checked (may be null if a CRL or OCSPResponse is</span><a href="#l5.56"></a>
<span id="l5.57" class="plusline">+    // being checked)</span><a href="#l5.57"></a>
<span id="l5.58" class="plusline">+    private final X509Certificate cert;</span><a href="#l5.58"></a>
<span id="l5.59" class="plusline">+</span><a href="#l5.59"></a>
<span id="l5.60" class="plusline">+    public CertPathConstraintsParameters(X509Certificate cert,</span><a href="#l5.60"></a>
<span id="l5.61" class="plusline">+            String variant, TrustAnchor anchor, Date date) {</span><a href="#l5.61"></a>
<span id="l5.62" class="plusline">+        this(cert.getPublicKey(), variant, anchor, date, cert);</span><a href="#l5.62"></a>
<span id="l5.63" class="plusline">+    }</span><a href="#l5.63"></a>
<span id="l5.64" class="plusline">+</span><a href="#l5.64"></a>
<span id="l5.65" class="plusline">+    public CertPathConstraintsParameters(Key key, String variant,</span><a href="#l5.65"></a>
<span id="l5.66" class="plusline">+            TrustAnchor anchor) {</span><a href="#l5.66"></a>
<span id="l5.67" class="plusline">+        this(key, variant, anchor, null, null);</span><a href="#l5.67"></a>
<span id="l5.68" class="plusline">+    }</span><a href="#l5.68"></a>
<span id="l5.69" class="plusline">+</span><a href="#l5.69"></a>
<span id="l5.70" class="plusline">+    private CertPathConstraintsParameters(Key key, String variant,</span><a href="#l5.70"></a>
<span id="l5.71" class="plusline">+            TrustAnchor anchor, Date date, X509Certificate cert) {</span><a href="#l5.71"></a>
<span id="l5.72" class="plusline">+        this.key = key;</span><a href="#l5.72"></a>
<span id="l5.73" class="plusline">+        this.variant = (variant == null ? Validator.VAR_GENERIC : variant);</span><a href="#l5.73"></a>
<span id="l5.74" class="plusline">+        this.anchor = anchor;</span><a href="#l5.74"></a>
<span id="l5.75" class="plusline">+        this.date = date;</span><a href="#l5.75"></a>
<span id="l5.76" class="plusline">+        this.cert = cert;</span><a href="#l5.76"></a>
<span id="l5.77" class="plusline">+    }</span><a href="#l5.77"></a>
<span id="l5.78" class="plusline">+</span><a href="#l5.78"></a>
<span id="l5.79" class="plusline">+    @Override</span><a href="#l5.79"></a>
<span id="l5.80" class="plusline">+    public boolean anchorIsJdkCA() {</span><a href="#l5.80"></a>
<span id="l5.81" class="plusline">+        return CertPathHelper.isJdkCA(anchor);</span><a href="#l5.81"></a>
<span id="l5.82" class="plusline">+    }</span><a href="#l5.82"></a>
<span id="l5.83" class="plusline">+</span><a href="#l5.83"></a>
<span id="l5.84" class="plusline">+    @Override</span><a href="#l5.84"></a>
<span id="l5.85" class="plusline">+    public Set&lt;Key&gt; getKeys() {</span><a href="#l5.85"></a>
<span id="l5.86" class="plusline">+        return (key == null) ? Set.of() : Set.of(key);</span><a href="#l5.86"></a>
<span id="l5.87" class="plusline">+    }</span><a href="#l5.87"></a>
<span id="l5.88" class="plusline">+</span><a href="#l5.88"></a>
<span id="l5.89" class="plusline">+    @Override</span><a href="#l5.89"></a>
<span id="l5.90" class="plusline">+    public Date getDate() {</span><a href="#l5.90"></a>
<span id="l5.91" class="plusline">+        return date;</span><a href="#l5.91"></a>
<span id="l5.92" class="plusline">+    }</span><a href="#l5.92"></a>
<span id="l5.93" class="plusline">+</span><a href="#l5.93"></a>
<span id="l5.94" class="plusline">+    @Override</span><a href="#l5.94"></a>
<span id="l5.95" class="plusline">+    public String getVariant() {</span><a href="#l5.95"></a>
<span id="l5.96" class="plusline">+        return variant;</span><a href="#l5.96"></a>
<span id="l5.97" class="plusline">+    }</span><a href="#l5.97"></a>
<span id="l5.98" class="plusline">+</span><a href="#l5.98"></a>
<span id="l5.99" class="plusline">+    @Override</span><a href="#l5.99"></a>
<span id="l5.100" class="plusline">+    public String extendedExceptionMsg() {</span><a href="#l5.100"></a>
<span id="l5.101" class="plusline">+        return (cert == null ? &quot;.&quot;</span><a href="#l5.101"></a>
<span id="l5.102" class="plusline">+                 : &quot; used with certificate: &quot; +</span><a href="#l5.102"></a>
<span id="l5.103" class="plusline">+                   cert.getSubjectX500Principal());</span><a href="#l5.103"></a>
<span id="l5.104" class="plusline">+    }</span><a href="#l5.104"></a>
<span id="l5.105" class="plusline">+</span><a href="#l5.105"></a>
<span id="l5.106" class="plusline">+    @Override</span><a href="#l5.106"></a>
<span id="l5.107" class="plusline">+    public String toString() {</span><a href="#l5.107"></a>
<span id="l5.108" class="plusline">+        StringBuilder sb = new StringBuilder(&quot;[\n&quot;);</span><a href="#l5.108"></a>
<span id="l5.109" class="plusline">+        sb.append(&quot;\n  Variant: &quot;).append(variant);</span><a href="#l5.109"></a>
<span id="l5.110" class="plusline">+        if (anchor != null) {</span><a href="#l5.110"></a>
<span id="l5.111" class="plusline">+            sb.append(&quot;\n  Anchor: &quot;).append(anchor);</span><a href="#l5.111"></a>
<span id="l5.112" class="plusline">+        }</span><a href="#l5.112"></a>
<span id="l5.113" class="plusline">+        if (cert != null) {</span><a href="#l5.113"></a>
<span id="l5.114" class="plusline">+            sb.append(&quot;\n  Cert Issuer: &quot;)</span><a href="#l5.114"></a>
<span id="l5.115" class="plusline">+              .append(cert.getIssuerX500Principal());</span><a href="#l5.115"></a>
<span id="l5.116" class="plusline">+            sb.append(&quot;\n  Cert Subject: &quot;)</span><a href="#l5.116"></a>
<span id="l5.117" class="plusline">+              .append(cert.getSubjectX500Principal());</span><a href="#l5.117"></a>
<span id="l5.118" class="plusline">+        }</span><a href="#l5.118"></a>
<span id="l5.119" class="plusline">+        if (key != null) {</span><a href="#l5.119"></a>
<span id="l5.120" class="plusline">+            sb.append(&quot;\n  Key: &quot;).append(key.getAlgorithm());</span><a href="#l5.120"></a>
<span id="l5.121" class="plusline">+        }</span><a href="#l5.121"></a>
<span id="l5.122" class="plusline">+        if (date != null) {</span><a href="#l5.122"></a>
<span id="l5.123" class="plusline">+            sb.append(&quot;\n  Date: &quot;).append(date);</span><a href="#l5.123"></a>
<span id="l5.124" class="plusline">+        }</span><a href="#l5.124"></a>
<span id="l5.125" class="plusline">+        sb.append(&quot;\n]&quot;);</span><a href="#l5.125"></a>
<span id="l5.126" class="plusline">+        return sb.toString();</span><a href="#l5.126"></a>
<span id="l5.127" class="plusline">+    }</span><a href="#l5.127"></a>
<span id="l5.128" class="plusline">+}</span><a href="#l5.128"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l6.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/CertPathHelper.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l6.1"></a>
<span id="l6.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/CertPathHelper.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l6.2"></a>
<span id="l6.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l6.3"></a>
<span id="l6.4"> /*</span><a href="#l6.4"></a>
<span id="l6.5" class="minusline">- * Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.</span><a href="#l6.5"></a>
<span id="l6.6" class="plusline">+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l6.6"></a>
<span id="l6.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l6.7"></a>
<span id="l6.8">  *</span><a href="#l6.8"></a>
<span id="l6.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l6.9"></a>
<span id="l6.10" class="atline">@@ -28,13 +28,14 @@</span><a href="#l6.10"></a>
<span id="l6.11"> import java.util.Date;</span><a href="#l6.11"></a>
<span id="l6.12"> import java.util.Set;</span><a href="#l6.12"></a>
<span id="l6.13"> </span><a href="#l6.13"></a>
<span id="l6.14" class="plusline">+import java.security.cert.TrustAnchor;</span><a href="#l6.14"></a>
<span id="l6.15"> import java.security.cert.X509CertSelector;</span><a href="#l6.15"></a>
<span id="l6.16"> import java.security.cert.X509CRLSelector;</span><a href="#l6.16"></a>
<span id="l6.17"> </span><a href="#l6.17"></a>
<span id="l6.18"> import sun.security.x509.GeneralNameInterface;</span><a href="#l6.18"></a>
<span id="l6.19"> </span><a href="#l6.19"></a>
<span id="l6.20"> /**</span><a href="#l6.20"></a>
<span id="l6.21" class="minusline">- * Helper class that allows access to Sun specific known-public methods in the</span><a href="#l6.21"></a>
<span id="l6.22" class="plusline">+ * Helper class that allows access to JDK specific known-public methods in the</span><a href="#l6.22"></a>
<span id="l6.23">  * java.security.cert package. It relies on a subclass in the</span><a href="#l6.23"></a>
<span id="l6.24">  * java.security.cert packages that is initialized before any of these methods</span><a href="#l6.24"></a>
<span id="l6.25">  * are called (achieved via static initializers).</span><a href="#l6.25"></a>
<span id="l6.26" class="atline">@@ -59,6 +60,8 @@</span><a href="#l6.26"></a>
<span id="l6.27"> </span><a href="#l6.27"></a>
<span id="l6.28">     protected abstract void implSetDateAndTime(X509CRLSelector sel, Date date, long skew);</span><a href="#l6.28"></a>
<span id="l6.29"> </span><a href="#l6.29"></a>
<span id="l6.30" class="plusline">+    protected abstract boolean implIsJdkCA(TrustAnchor anchor);</span><a href="#l6.30"></a>
<span id="l6.31" class="plusline">+</span><a href="#l6.31"></a>
<span id="l6.32">     static void setPathToNames(X509CertSelector sel,</span><a href="#l6.32"></a>
<span id="l6.33">             Set&lt;GeneralNameInterface&gt; names) {</span><a href="#l6.33"></a>
<span id="l6.34">         instance.implSetPathToNames(sel, names);</span><a href="#l6.34"></a>
<span id="l6.35" class="atline">@@ -67,4 +70,8 @@</span><a href="#l6.35"></a>
<span id="l6.36">     public static void setDateAndTime(X509CRLSelector sel, Date date, long skew) {</span><a href="#l6.36"></a>
<span id="l6.37">         instance.implSetDateAndTime(sel, date, skew);</span><a href="#l6.37"></a>
<span id="l6.38">     }</span><a href="#l6.38"></a>
<span id="l6.39" class="plusline">+</span><a href="#l6.39"></a>
<span id="l6.40" class="plusline">+    public static boolean isJdkCA(TrustAnchor anchor) {</span><a href="#l6.40"></a>
<span id="l6.41" class="plusline">+        return (anchor == null) ? false : instance.implIsJdkCA(anchor);</span><a href="#l6.41"></a>
<span id="l6.42" class="plusline">+    }</span><a href="#l6.42"></a>
<span id="l6.43"> }</span><a href="#l6.43"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l7.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l7.1"></a>
<span id="l7.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l7.2"></a>
<span id="l7.3" class="atline">@@ -73,7 +73,7 @@</span><a href="#l7.3"></a>
<span id="l7.4">             throws CertStoreException</span><a href="#l7.4"></a>
<span id="l7.5">     {</span><a href="#l7.5"></a>
<span id="l7.6">         return getCRLs(selector, signFlag, prevKey, null, provider, certStores,</span><a href="#l7.6"></a>
<span id="l7.7" class="minusline">-                reasonsMask, trustAnchors, validity, variant);</span><a href="#l7.7"></a>
<span id="l7.8" class="plusline">+                reasonsMask, trustAnchors, validity, variant, null);</span><a href="#l7.8"></a>
<span id="l7.9">     }</span><a href="#l7.9"></a>
<span id="l7.10">     /**</span><a href="#l7.10"></a>
<span id="l7.11">      * Return the X509CRLs matching this selector. The selector must be</span><a href="#l7.11"></a>
<span id="l7.12" class="atline">@@ -90,8 +90,14 @@</span><a href="#l7.12"></a>
<span id="l7.13">                                               Date validity)</span><a href="#l7.13"></a>
<span id="l7.14">         throws CertStoreException</span><a href="#l7.14"></a>
<span id="l7.15">     {</span><a href="#l7.15"></a>
<span id="l7.16" class="plusline">+        if (trustAnchors.isEmpty()) {</span><a href="#l7.16"></a>
<span id="l7.17" class="plusline">+            throw new CertStoreException(</span><a href="#l7.17"></a>
<span id="l7.18" class="plusline">+                &quot;at least one TrustAnchor must be specified&quot;);</span><a href="#l7.18"></a>
<span id="l7.19" class="plusline">+        }</span><a href="#l7.19"></a>
<span id="l7.20" class="plusline">+        TrustAnchor anchor = trustAnchors.iterator().next();</span><a href="#l7.20"></a>
<span id="l7.21">         return getCRLs(selector, signFlag, prevKey, null, provider, certStores,</span><a href="#l7.21"></a>
<span id="l7.22" class="minusline">-                reasonsMask, trustAnchors, validity, Validator.VAR_GENERIC);</span><a href="#l7.22"></a>
<span id="l7.23" class="plusline">+                reasonsMask, trustAnchors, validity,</span><a href="#l7.23"></a>
<span id="l7.24" class="plusline">+                Validator.VAR_PLUGIN_CODE_SIGNING, anchor);</span><a href="#l7.24"></a>
<span id="l7.25">     }</span><a href="#l7.25"></a>
<span id="l7.26"> </span><a href="#l7.26"></a>
<span id="l7.27">     /**</span><a href="#l7.27"></a>
<span id="l7.28" class="atline">@@ -107,7 +113,8 @@</span><a href="#l7.28"></a>
<span id="l7.29">                                               boolean[] reasonsMask,</span><a href="#l7.29"></a>
<span id="l7.30">                                               Set&lt;TrustAnchor&gt; trustAnchors,</span><a href="#l7.30"></a>
<span id="l7.31">                                               Date validity,</span><a href="#l7.31"></a>
<span id="l7.32" class="minusline">-                                              String variant)</span><a href="#l7.32"></a>
<span id="l7.33" class="plusline">+                                              String variant,</span><a href="#l7.33"></a>
<span id="l7.34" class="plusline">+                                              TrustAnchor anchor)</span><a href="#l7.34"></a>
<span id="l7.35">         throws CertStoreException</span><a href="#l7.35"></a>
<span id="l7.36">     {</span><a href="#l7.36"></a>
<span id="l7.37">         X509Certificate cert = selector.getCertificateChecking();</span><a href="#l7.37"></a>
<span id="l7.38" class="atline">@@ -136,7 +143,7 @@</span><a href="#l7.38"></a>
<span id="l7.39">                 DistributionPoint point = t.next();</span><a href="#l7.39"></a>
<span id="l7.40">                 Collection&lt;X509CRL&gt; crls = getCRLs(selector, certImpl,</span><a href="#l7.40"></a>
<span id="l7.41">                     point, reasonsMask, signFlag, prevKey, prevCert, provider,</span><a href="#l7.41"></a>
<span id="l7.42" class="minusline">-                    certStores, trustAnchors, validity, variant);</span><a href="#l7.42"></a>
<span id="l7.43" class="plusline">+                    certStores, trustAnchors, validity, variant, anchor);</span><a href="#l7.43"></a>
<span id="l7.44">                 results.addAll(crls);</span><a href="#l7.44"></a>
<span id="l7.45">             }</span><a href="#l7.45"></a>
<span id="l7.46">             if (debug != null) {</span><a href="#l7.46"></a>
<span id="l7.47" class="atline">@@ -161,7 +168,8 @@</span><a href="#l7.47"></a>
<span id="l7.48">         X509CertImpl certImpl, DistributionPoint point, boolean[] reasonsMask,</span><a href="#l7.48"></a>
<span id="l7.49">         boolean signFlag, PublicKey prevKey, X509Certificate prevCert,</span><a href="#l7.49"></a>
<span id="l7.50">         String provider, List&lt;CertStore&gt; certStores,</span><a href="#l7.50"></a>
<span id="l7.51" class="minusline">-        Set&lt;TrustAnchor&gt; trustAnchors, Date validity, String variant)</span><a href="#l7.51"></a>
<span id="l7.52" class="plusline">+        Set&lt;TrustAnchor&gt; trustAnchors, Date validity, String variant,</span><a href="#l7.52"></a>
<span id="l7.53" class="plusline">+        TrustAnchor anchor)</span><a href="#l7.53"></a>
<span id="l7.54">             throws CertStoreException {</span><a href="#l7.54"></a>
<span id="l7.55"> </span><a href="#l7.55"></a>
<span id="l7.56">         // check for full name</span><a href="#l7.56"></a>
<span id="l7.57" class="atline">@@ -224,7 +232,7 @@</span><a href="#l7.57"></a>
<span id="l7.58">                 selector.setIssuerNames(null);</span><a href="#l7.58"></a>
<span id="l7.59">                 if (selector.match(crl) &amp;&amp; verifyCRL(certImpl, point, crl,</span><a href="#l7.59"></a>
<span id="l7.60">                         reasonsMask, signFlag, prevKey, prevCert, provider,</span><a href="#l7.60"></a>
<span id="l7.61" class="minusline">-                        trustAnchors, certStores, validity, variant)) {</span><a href="#l7.61"></a>
<span id="l7.62" class="plusline">+                        trustAnchors, certStores, validity, variant, anchor)) {</span><a href="#l7.62"></a>
<span id="l7.63">                     crls.add(crl);</span><a href="#l7.63"></a>
<span id="l7.64">                 }</span><a href="#l7.64"></a>
<span id="l7.65">             } catch (IOException | CRLException e) {</span><a href="#l7.65"></a>
<span id="l7.66" class="atline">@@ -332,7 +340,8 @@</span><a href="#l7.66"></a>
<span id="l7.67">         X509CRL crl, boolean[] reasonsMask, boolean signFlag,</span><a href="#l7.67"></a>
<span id="l7.68">         PublicKey prevKey, X509Certificate prevCert, String provider,</span><a href="#l7.68"></a>
<span id="l7.69">         Set&lt;TrustAnchor&gt; trustAnchors, List&lt;CertStore&gt; certStores,</span><a href="#l7.69"></a>
<span id="l7.70" class="minusline">-        Date validity, String variant) throws CRLException, IOException {</span><a href="#l7.70"></a>
<span id="l7.71" class="plusline">+        Date validity, String variant, TrustAnchor anchor)</span><a href="#l7.71"></a>
<span id="l7.72" class="plusline">+        throws CRLException, IOException {</span><a href="#l7.72"></a>
<span id="l7.73"> </span><a href="#l7.73"></a>
<span id="l7.74">         if (debug != null) {</span><a href="#l7.74"></a>
<span id="l7.75">             debug.println(&quot;DistributionPointFetcher.verifyCRL: &quot; +</span><a href="#l7.75"></a>
<span id="l7.76" class="atline">@@ -679,7 +688,7 @@</span><a href="#l7.76"></a>
<span id="l7.77"> </span><a href="#l7.77"></a>
<span id="l7.78">         // check the crl signature algorithm</span><a href="#l7.78"></a>
<span id="l7.79">         try {</span><a href="#l7.79"></a>
<span id="l7.80" class="minusline">-            AlgorithmChecker.check(prevKey, crl, variant);</span><a href="#l7.80"></a>
<span id="l7.81" class="plusline">+            AlgorithmChecker.check(prevKey, crl, variant, anchor);</span><a href="#l7.81"></a>
<span id="l7.82">         } catch (CertPathValidatorException cpve) {</span><a href="#l7.82"></a>
<span id="l7.83">             if (debug != null) {</span><a href="#l7.83"></a>
<span id="l7.84">                 debug.println(&quot;CRL signature algorithm check failed: &quot; + cpve);</span><a href="#l7.84"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l8.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/OCSP.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l8.1"></a>
<span id="l8.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/OCSP.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l8.2"></a>
<span id="l8.3" class="atline">@@ -121,7 +121,8 @@</span><a href="#l8.3"></a>
<span id="l8.4">         throws IOException, CertPathValidatorException</span><a href="#l8.4"></a>
<span id="l8.5">     {</span><a href="#l8.5"></a>
<span id="l8.6">         return check(cert, issuerCert, responderURI, responderCert, date,</span><a href="#l8.6"></a>
<span id="l8.7" class="minusline">-                     Collections.&lt;Extension&gt;emptyList(), Validator.VAR_GENERIC);</span><a href="#l8.7"></a>
<span id="l8.8" class="plusline">+                     Collections.&lt;Extension&gt;emptyList(),</span><a href="#l8.8"></a>
<span id="l8.9" class="plusline">+                     Validator.VAR_PLUGIN_CODE_SIGNING);</span><a href="#l8.9"></a>
<span id="l8.10">     }</span><a href="#l8.10"></a>
<span id="l8.11"> </span><a href="#l8.11"></a>
<span id="l8.12"> </span><a href="#l8.12"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l9.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/OCSPResponse.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l9.1"></a>
<span id="l9.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/OCSPResponse.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l9.2"></a>
<span id="l9.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l9.3"></a>
<span id="l9.4"> /*</span><a href="#l9.4"></a>
<span id="l9.5" class="minusline">- * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l9.5"></a>
<span id="l9.6" class="plusline">+ * Copyright (c) 2003, 2021, Oracle and/or its affiliates. All rights reserved.</span><a href="#l9.6"></a>
<span id="l9.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l9.7"></a>
<span id="l9.8">  *</span><a href="#l9.8"></a>
<span id="l9.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l9.9"></a>
<span id="l9.10" class="atline">@@ -465,6 +465,7 @@</span><a href="#l9.10"></a>
<span id="l9.11">         }</span><a href="#l9.11"></a>
<span id="l9.12"> </span><a href="#l9.12"></a>
<span id="l9.13">         // Check whether the signer cert returned by the responder is trusted</span><a href="#l9.13"></a>
<span id="l9.14" class="plusline">+        boolean signedByTrustedResponder = false;</span><a href="#l9.14"></a>
<span id="l9.15">         if (signerCert != null) {</span><a href="#l9.15"></a>
<span id="l9.16">             // Check if the response is signed by the issuing CA</span><a href="#l9.16"></a>
<span id="l9.17">             if (signerCert.getSubjectX500Principal().equals(</span><a href="#l9.17"></a>
<span id="l9.18" class="atline">@@ -479,6 +480,7 @@</span><a href="#l9.18"></a>
<span id="l9.19"> </span><a href="#l9.19"></a>
<span id="l9.20">             // Check if the response is signed by a trusted responder</span><a href="#l9.20"></a>
<span id="l9.21">             } else if (signerCert.equals(responderCert)) {</span><a href="#l9.21"></a>
<span id="l9.22" class="plusline">+                signedByTrustedResponder = true;</span><a href="#l9.22"></a>
<span id="l9.23">                 if (debug != null) {</span><a href="#l9.23"></a>
<span id="l9.24">                     debug.println(&quot;OCSP response is signed by a Trusted &quot; +</span><a href="#l9.24"></a>
<span id="l9.25">                         &quot;Responder&quot;);</span><a href="#l9.25"></a>
<span id="l9.26" class="atline">@@ -569,7 +571,10 @@</span><a href="#l9.26"></a>
<span id="l9.27">         if (signerCert != null) {</span><a href="#l9.27"></a>
<span id="l9.28">             // Check algorithm constraints specified in security property</span><a href="#l9.28"></a>
<span id="l9.29">             // &quot;jdk.certpath.disabledAlgorithms&quot;.</span><a href="#l9.29"></a>
<span id="l9.30" class="minusline">-            AlgorithmChecker.check(signerCert.getPublicKey(), sigAlgId, variant);</span><a href="#l9.30"></a>
<span id="l9.31" class="plusline">+            AlgorithmChecker.check(signerCert.getPublicKey(), sigAlgId, variant,</span><a href="#l9.31"></a>
<span id="l9.32" class="plusline">+                    signedByTrustedResponder</span><a href="#l9.32"></a>
<span id="l9.33" class="plusline">+                        ? new TrustAnchor(responderCert, null)</span><a href="#l9.33"></a>
<span id="l9.34" class="plusline">+                        : issuerInfo.getAnchor());</span><a href="#l9.34"></a>
<span id="l9.35"> </span><a href="#l9.35"></a>
<span id="l9.36">             if (!verifySignature(signerCert)) {</span><a href="#l9.36"></a>
<span id="l9.37">                 throw new CertPathValidatorException(</span><a href="#l9.37"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l10.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/PKIX.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l10.1"></a>
<span id="l10.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/PKIX.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l10.2"></a>
<span id="l10.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l10.3"></a>
<span id="l10.4"> /*</span><a href="#l10.4"></a>
<span id="l10.5" class="minusline">- * Copyright (c) 2012, 2017, Oracle and/or its affiliates. All rights reserved.</span><a href="#l10.5"></a>
<span id="l10.6" class="plusline">+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l10.6"></a>
<span id="l10.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l10.7"></a>
<span id="l10.8">  *</span><a href="#l10.8"></a>
<span id="l10.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l10.9"></a>
<span id="l10.10" class="atline">@@ -33,6 +33,7 @@</span><a href="#l10.10"></a>
<span id="l10.11"> import javax.security.auth.x500.X500Principal;</span><a href="#l10.11"></a>
<span id="l10.12"> </span><a href="#l10.12"></a>
<span id="l10.13"> import sun.security.util.Debug;</span><a href="#l10.13"></a>
<span id="l10.14" class="plusline">+import sun.security.validator.Validator;</span><a href="#l10.14"></a>
<span id="l10.15"> </span><a href="#l10.15"></a>
<span id="l10.16"> /**</span><a href="#l10.16"></a>
<span id="l10.17">  * Common utility methods and classes used by the PKIX CertPathValidator and</span><a href="#l10.17"></a>
<span id="l10.18" class="atline">@@ -87,7 +88,7 @@</span><a href="#l10.18"></a>
<span id="l10.19">         private Set&lt;TrustAnchor&gt; anchors;</span><a href="#l10.19"></a>
<span id="l10.20">         private List&lt;X509Certificate&gt; certs;</span><a href="#l10.20"></a>
<span id="l10.21">         private Timestamp timestamp;</span><a href="#l10.21"></a>
<span id="l10.22" class="minusline">-        private String variant;</span><a href="#l10.22"></a>
<span id="l10.23" class="plusline">+        private String variant = Validator.VAR_GENERIC;</span><a href="#l10.23"></a>
<span id="l10.24"> </span><a href="#l10.24"></a>
<span id="l10.25">         ValidatorParams(CertPath cp, PKIXParameters params)</span><a href="#l10.25"></a>
<span id="l10.26">             throws InvalidAlgorithmParameterException</span><a href="#l10.26"></a>
<span id="l10.27" class="atline">@@ -155,9 +156,17 @@</span><a href="#l10.27"></a>
<span id="l10.28">         }</span><a href="#l10.28"></a>
<span id="l10.29">         Date date() {</span><a href="#l10.29"></a>
<span id="l10.30">             if (!gotDate) {</span><a href="#l10.30"></a>
<span id="l10.31" class="minusline">-                date = params.getDate();</span><a href="#l10.31"></a>
<span id="l10.32" class="minusline">-                if (date == null)</span><a href="#l10.32"></a>
<span id="l10.33" class="minusline">-                    date = new Date();</span><a href="#l10.33"></a>
<span id="l10.34" class="plusline">+                // use timestamp if checking signed code that is</span><a href="#l10.34"></a>
<span id="l10.35" class="plusline">+                // timestamped, otherwise use date parameter</span><a href="#l10.35"></a>
<span id="l10.36" class="plusline">+                if (timestamp != null &amp;&amp;</span><a href="#l10.36"></a>
<span id="l10.37" class="plusline">+                    (variant.equals(Validator.VAR_CODE_SIGNING) ||</span><a href="#l10.37"></a>
<span id="l10.38" class="plusline">+                     variant.equals(Validator.VAR_PLUGIN_CODE_SIGNING))) {</span><a href="#l10.38"></a>
<span id="l10.39" class="plusline">+                    date = timestamp.getTimestamp();</span><a href="#l10.39"></a>
<span id="l10.40" class="plusline">+                } else {</span><a href="#l10.40"></a>
<span id="l10.41" class="plusline">+                    date = params.getDate();</span><a href="#l10.41"></a>
<span id="l10.42" class="plusline">+                    if (date == null)</span><a href="#l10.42"></a>
<span id="l10.43" class="plusline">+                        date = new Date();</span><a href="#l10.43"></a>
<span id="l10.44" class="plusline">+                }</span><a href="#l10.44"></a>
<span id="l10.45">                 gotDate = true;</span><a href="#l10.45"></a>
<span id="l10.46">             }</span><a href="#l10.46"></a>
<span id="l10.47">             return date;</span><a href="#l10.47"></a>
<span id="l10.48" class="atline">@@ -198,10 +207,6 @@</span><a href="#l10.48"></a>
<span id="l10.49">             return params;</span><a href="#l10.49"></a>
<span id="l10.50">         }</span><a href="#l10.50"></a>
<span id="l10.51"> </span><a href="#l10.51"></a>
<span id="l10.52" class="minusline">-        Timestamp timestamp() {</span><a href="#l10.52"></a>
<span id="l10.53" class="minusline">-            return timestamp;</span><a href="#l10.53"></a>
<span id="l10.54" class="minusline">-        }</span><a href="#l10.54"></a>
<span id="l10.55" class="minusline">-</span><a href="#l10.55"></a>
<span id="l10.56">         String variant() {</span><a href="#l10.56"></a>
<span id="l10.57">             return variant;</span><a href="#l10.57"></a>
<span id="l10.58">         }</span><a href="#l10.58"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l11.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/PKIXCertPathValidator.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l11.1"></a>
<span id="l11.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/PKIXCertPathValidator.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l11.2"></a>
<span id="l11.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l11.3"></a>
<span id="l11.4"> /*</span><a href="#l11.4"></a>
<span id="l11.5" class="minusline">- * Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.</span><a href="#l11.5"></a>
<span id="l11.6" class="plusline">+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l11.6"></a>
<span id="l11.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l11.7"></a>
<span id="l11.8">  *</span><a href="#l11.8"></a>
<span id="l11.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l11.9"></a>
<span id="l11.10" class="atline">@@ -34,7 +34,6 @@</span><a href="#l11.10"></a>
<span id="l11.11"> import jdk.internal.event.X509ValidationEvent;</span><a href="#l11.11"></a>
<span id="l11.12"> import jdk.internal.event.EventHelper;</span><a href="#l11.12"></a>
<span id="l11.13"> import sun.security.provider.certpath.PKIX.ValidatorParams;</span><a href="#l11.13"></a>
<span id="l11.14" class="minusline">-import sun.security.validator.Validator;</span><a href="#l11.14"></a>
<span id="l11.15"> import sun.security.x509.X509CertImpl;</span><a href="#l11.15"></a>
<span id="l11.16"> import sun.security.util.Debug;</span><a href="#l11.16"></a>
<span id="l11.17"> </span><a href="#l11.17"></a>
<span id="l11.18" class="atline">@@ -178,7 +177,7 @@</span><a href="#l11.18"></a>
<span id="l11.19">         // add standard checkers that we will be using</span><a href="#l11.19"></a>
<span id="l11.20">         certPathCheckers.add(untrustedChecker);</span><a href="#l11.20"></a>
<span id="l11.21">         certPathCheckers.add(new AlgorithmChecker(anchor, null, params.date(),</span><a href="#l11.21"></a>
<span id="l11.22" class="minusline">-                params.timestamp(), params.variant()));</span><a href="#l11.22"></a>
<span id="l11.23" class="plusline">+                params.variant()));</span><a href="#l11.23"></a>
<span id="l11.24">         certPathCheckers.add(new KeyChecker(certPathLen,</span><a href="#l11.24"></a>
<span id="l11.25">                                             params.targetCertConstraints()));</span><a href="#l11.25"></a>
<span id="l11.26">         certPathCheckers.add(new ConstraintsChecker(certPathLen));</span><a href="#l11.26"></a>
<span id="l11.27" class="atline">@@ -195,19 +194,7 @@</span><a href="#l11.27"></a>
<span id="l11.28">                                              rootNode);</span><a href="#l11.28"></a>
<span id="l11.29">         certPathCheckers.add(pc);</span><a href="#l11.29"></a>
<span id="l11.30"> </span><a href="#l11.30"></a>
<span id="l11.31" class="minusline">-        // the time that the certificate validity period should be</span><a href="#l11.31"></a>
<span id="l11.32" class="minusline">-        // checked against</span><a href="#l11.32"></a>
<span id="l11.33" class="minusline">-        Date timeToCheck = null;</span><a href="#l11.33"></a>
<span id="l11.34" class="minusline">-        // use timestamp if checking signed code that is timestamped, otherwise</span><a href="#l11.34"></a>
<span id="l11.35" class="minusline">-        // use date parameter from PKIXParameters</span><a href="#l11.35"></a>
<span id="l11.36" class="minusline">-        if ((params.variant() == Validator.VAR_CODE_SIGNING ||</span><a href="#l11.36"></a>
<span id="l11.37" class="minusline">-             params.variant() == Validator.VAR_PLUGIN_CODE_SIGNING) &amp;&amp;</span><a href="#l11.37"></a>
<span id="l11.38" class="minusline">-             params.timestamp() != null) {</span><a href="#l11.38"></a>
<span id="l11.39" class="minusline">-            timeToCheck = params.timestamp().getTimestamp();</span><a href="#l11.39"></a>
<span id="l11.40" class="minusline">-        } else {</span><a href="#l11.40"></a>
<span id="l11.41" class="minusline">-            timeToCheck = params.date();</span><a href="#l11.41"></a>
<span id="l11.42" class="minusline">-        }</span><a href="#l11.42"></a>
<span id="l11.43" class="minusline">-        BasicChecker bc = new BasicChecker(anchor, timeToCheck,</span><a href="#l11.43"></a>
<span id="l11.44" class="plusline">+        BasicChecker bc = new BasicChecker(anchor, params.date(),</span><a href="#l11.44"></a>
<span id="l11.45">                                            params.sigProvider(), false);</span><a href="#l11.45"></a>
<span id="l11.46">         certPathCheckers.add(bc);</span><a href="#l11.46"></a>
<span id="l11.47"> </span><a href="#l11.47"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l12.1" class="minusline">--- a/src/java.base/share/classes/sun/security/provider/certpath/RevocationChecker.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l12.1"></a>
<span id="l12.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/provider/certpath/RevocationChecker.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l12.2"></a>
<span id="l12.3" class="atline">@@ -579,7 +579,8 @@</span><a href="#l12.3"></a>
<span id="l12.4">                     approvedCRLs.addAll(DistributionPointFetcher.getCRLs(</span><a href="#l12.4"></a>
<span id="l12.5">                                         sel, signFlag, prevKey, prevCert,</span><a href="#l12.5"></a>
<span id="l12.6">                                         params.sigProvider(), certStores,</span><a href="#l12.6"></a>
<span id="l12.7" class="minusline">-                                        reasonsMask, anchors, null, params.variant()));</span><a href="#l12.7"></a>
<span id="l12.8" class="plusline">+                                        reasonsMask, anchors, null,</span><a href="#l12.8"></a>
<span id="l12.9" class="plusline">+                                        params.variant(), anchor));</span><a href="#l12.9"></a>
<span id="l12.10">                 }</span><a href="#l12.10"></a>
<span id="l12.11">             } catch (CertStoreException e) {</span><a href="#l12.11"></a>
<span id="l12.12">                 if (e instanceof CertStoreTypeException) {</span><a href="#l12.12"></a>
<span id="l12.13" class="atline">@@ -853,7 +854,7 @@</span><a href="#l12.13"></a>
<span id="l12.14">                     if (DistributionPointFetcher.verifyCRL(</span><a href="#l12.14"></a>
<span id="l12.15">                             certImpl, point, crl, reasonsMask, signFlag,</span><a href="#l12.15"></a>
<span id="l12.16">                             prevKey, null, params.sigProvider(), anchors,</span><a href="#l12.16"></a>
<span id="l12.17" class="minusline">-                            certStores, params.date(), params.variant()))</span><a href="#l12.17"></a>
<span id="l12.18" class="plusline">+                            certStores, params.date(), params.variant(), anchor))</span><a href="#l12.18"></a>
<span id="l12.19">                     {</span><a href="#l12.19"></a>
<span id="l12.20">                         results.add(crl);</span><a href="#l12.20"></a>
<span id="l12.21">                     }</span><a href="#l12.21"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l13.1" class="minusline">--- a/src/java.base/share/classes/sun/security/ssl/SSLContextImpl.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l13.1"></a>
<span id="l13.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/ssl/SSLContextImpl.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l13.2"></a>
<span id="l13.3" class="atline">@@ -1628,7 +1628,7 @@</span><a href="#l13.3"></a>
<span id="l13.4">             // A forward checker, need to check from trust to target</span><a href="#l13.4"></a>
<span id="l13.5">             if (checkedLength &gt;= 0) {</span><a href="#l13.5"></a>
<span id="l13.6">                 AlgorithmChecker checker =</span><a href="#l13.6"></a>
<span id="l13.7" class="minusline">-                    new AlgorithmChecker(constraints, null,</span><a href="#l13.7"></a>
<span id="l13.8" class="plusline">+                    new AlgorithmChecker(constraints,</span><a href="#l13.8"></a>
<span id="l13.9">                             (checkClientTrusted ? Validator.VAR_TLS_CLIENT :</span><a href="#l13.9"></a>
<span id="l13.10">                                         Validator.VAR_TLS_SERVER));</span><a href="#l13.10"></a>
<span id="l13.11">                 checker.init(false);</span><a href="#l13.11"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l14.1" class="minusline">--- a/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l14.1"></a>
<span id="l14.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l14.2"></a>
<span id="l14.3" class="atline">@@ -831,8 +831,7 @@</span><a href="#l14.3"></a>
<span id="l14.4">             AlgorithmConstraints constraints, Certificate[] chain,</span><a href="#l14.4"></a>
<span id="l14.5">             String variant) {</span><a href="#l14.5"></a>
<span id="l14.6"> </span><a href="#l14.6"></a>
<span id="l14.7" class="minusline">-        AlgorithmChecker checker =</span><a href="#l14.7"></a>
<span id="l14.8" class="minusline">-                new AlgorithmChecker(constraints, null, variant);</span><a href="#l14.8"></a>
<span id="l14.9" class="plusline">+        AlgorithmChecker checker = new AlgorithmChecker(constraints, variant);</span><a href="#l14.9"></a>
<span id="l14.10">         try {</span><a href="#l14.10"></a>
<span id="l14.11">             checker.init(false);</span><a href="#l14.11"></a>
<span id="l14.12">         } catch (CertPathValidatorException cpve) {</span><a href="#l14.12"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l15.1" class="minusline">--- a/src/java.base/share/classes/sun/security/util/AnchorCertificates.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l15.1"></a>
<span id="l15.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/util/AnchorCertificates.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l15.2"></a>
<span id="l15.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l15.3"></a>
<span id="l15.4"> /*</span><a href="#l15.4"></a>
<span id="l15.5" class="minusline">- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span><a href="#l15.5"></a>
<span id="l15.6" class="plusline">+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l15.6"></a>
<span id="l15.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l15.7"></a>
<span id="l15.8">  *</span><a href="#l15.8"></a>
<span id="l15.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l15.9"></a>
<span id="l15.10" class="atline">@@ -35,6 +35,7 @@</span><a href="#l15.10"></a>
<span id="l15.11"> import java.util.Enumeration;</span><a href="#l15.11"></a>
<span id="l15.12"> import java.util.HashSet;</span><a href="#l15.12"></a>
<span id="l15.13"> import java.util.Set;</span><a href="#l15.13"></a>
<span id="l15.14" class="plusline">+import javax.security.auth.x500.X500Principal;</span><a href="#l15.14"></a>
<span id="l15.15"> </span><a href="#l15.15"></a>
<span id="l15.16"> import jdk.internal.util.StaticProperty;</span><a href="#l15.16"></a>
<span id="l15.17"> import sun.security.x509.X509CertImpl;</span><a href="#l15.17"></a>
<span id="l15.18" class="atline">@@ -48,9 +49,10 @@</span><a href="#l15.18"></a>
<span id="l15.19">     private static final Debug debug = Debug.getInstance(&quot;certpath&quot;);</span><a href="#l15.19"></a>
<span id="l15.20">     private static final String HASH = &quot;SHA-256&quot;;</span><a href="#l15.20"></a>
<span id="l15.21">     private static Set&lt;String&gt; certs = Collections.emptySet();</span><a href="#l15.21"></a>
<span id="l15.22" class="plusline">+    private static Set&lt;X500Principal&gt; certIssuers = Collections.emptySet();</span><a href="#l15.22"></a>
<span id="l15.23"> </span><a href="#l15.23"></a>
<span id="l15.24">     static  {</span><a href="#l15.24"></a>
<span id="l15.25" class="minusline">-        AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() {</span><a href="#l15.25"></a>
<span id="l15.26" class="plusline">+        AccessController.doPrivileged(new PrivilegedAction&lt;&gt;() {</span><a href="#l15.26"></a>
<span id="l15.27">             @Override</span><a href="#l15.27"></a>
<span id="l15.28">             public Void run() {</span><a href="#l15.28"></a>
<span id="l15.29">                 File f = new File(StaticProperty.javaHome(),</span><a href="#l15.29"></a>
<span id="l15.30" class="atline">@@ -61,15 +63,16 @@</span><a href="#l15.30"></a>
<span id="l15.31">                     try (FileInputStream fis = new FileInputStream(f)) {</span><a href="#l15.31"></a>
<span id="l15.32">                         cacerts.load(fis, null);</span><a href="#l15.32"></a>
<span id="l15.33">                         certs = new HashSet&lt;&gt;();</span><a href="#l15.33"></a>
<span id="l15.34" class="plusline">+                        certIssuers = new HashSet&lt;&gt;();</span><a href="#l15.34"></a>
<span id="l15.35">                         Enumeration&lt;String&gt; list = cacerts.aliases();</span><a href="#l15.35"></a>
<span id="l15.36" class="minusline">-                        String alias;</span><a href="#l15.36"></a>
<span id="l15.37">                         while (list.hasMoreElements()) {</span><a href="#l15.37"></a>
<span id="l15.38" class="minusline">-                            alias = list.nextElement();</span><a href="#l15.38"></a>
<span id="l15.39" class="plusline">+                            String alias = list.nextElement();</span><a href="#l15.39"></a>
<span id="l15.40">                             // Check if this cert is labeled a trust anchor.</span><a href="#l15.40"></a>
<span id="l15.41">                             if (alias.contains(&quot; [jdk&quot;)) {</span><a href="#l15.41"></a>
<span id="l15.42">                                 X509Certificate cert = (X509Certificate) cacerts</span><a href="#l15.42"></a>
<span id="l15.43">                                         .getCertificate(alias);</span><a href="#l15.43"></a>
<span id="l15.44">                                 certs.add(X509CertImpl.getFingerprint(HASH, cert));</span><a href="#l15.44"></a>
<span id="l15.45" class="plusline">+                                certIssuers.add(cert.getSubjectX500Principal());</span><a href="#l15.45"></a>
<span id="l15.46">                             }</span><a href="#l15.46"></a>
<span id="l15.47">                         }</span><a href="#l15.47"></a>
<span id="l15.48">                     }</span><a href="#l15.48"></a>
<span id="l15.49" class="atline">@@ -85,10 +88,10 @@</span><a href="#l15.49"></a>
<span id="l15.50">     }</span><a href="#l15.50"></a>
<span id="l15.51"> </span><a href="#l15.51"></a>
<span id="l15.52">     /**</span><a href="#l15.52"></a>
<span id="l15.53" class="minusline">-     * Checks if a certificate is a trust anchor.</span><a href="#l15.53"></a>
<span id="l15.54" class="plusline">+     * Checks if a certificate is a JDK trust anchor.</span><a href="#l15.54"></a>
<span id="l15.55">      *</span><a href="#l15.55"></a>
<span id="l15.56">      * @param cert the certificate to check</span><a href="#l15.56"></a>
<span id="l15.57" class="minusline">-     * @return true if the certificate is trusted.</span><a href="#l15.57"></a>
<span id="l15.58" class="plusline">+     * @return true if the certificate is a JDK trust anchor</span><a href="#l15.58"></a>
<span id="l15.59">      */</span><a href="#l15.59"></a>
<span id="l15.60">     public static boolean contains(X509Certificate cert) {</span><a href="#l15.60"></a>
<span id="l15.61">         String key = X509CertImpl.getFingerprint(HASH, cert);</span><a href="#l15.61"></a>
<span id="l15.62" class="atline">@@ -100,5 +103,15 @@</span><a href="#l15.62"></a>
<span id="l15.63">         return result;</span><a href="#l15.63"></a>
<span id="l15.64">     }</span><a href="#l15.64"></a>
<span id="l15.65"> </span><a href="#l15.65"></a>
<span id="l15.66" class="plusline">+    /**</span><a href="#l15.66"></a>
<span id="l15.67" class="plusline">+     * Checks if a JDK trust anchor is the issuer of a certificate.</span><a href="#l15.67"></a>
<span id="l15.68" class="plusline">+     *</span><a href="#l15.68"></a>
<span id="l15.69" class="plusline">+     * @param cert the certificate to check</span><a href="#l15.69"></a>
<span id="l15.70" class="plusline">+     * @return true if the certificate is issued by a trust anchor</span><a href="#l15.70"></a>
<span id="l15.71" class="plusline">+     */</span><a href="#l15.71"></a>
<span id="l15.72" class="plusline">+    public static boolean issuerOf(X509Certificate cert) {</span><a href="#l15.72"></a>
<span id="l15.73" class="plusline">+        return certIssuers.contains(cert.getIssuerX500Principal());</span><a href="#l15.73"></a>
<span id="l15.74" class="plusline">+    }</span><a href="#l15.74"></a>
<span id="l15.75" class="plusline">+</span><a href="#l15.75"></a>
<span id="l15.76">     private AnchorCertificates() {}</span><a href="#l15.76"></a>
<span id="l15.77"> }</span><a href="#l15.77"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l16.1" class="minusline">--- a/src/java.base/share/classes/sun/security/util/ConstraintsParameters.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l16.1"></a>
<span id="l16.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/util/ConstraintsParameters.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l16.2"></a>
<span id="l16.3" class="atline">@@ -25,167 +25,42 @@</span><a href="#l16.3"></a>
<span id="l16.4"> </span><a href="#l16.4"></a>
<span id="l16.5"> package sun.security.util;</span><a href="#l16.5"></a>
<span id="l16.6"> </span><a href="#l16.6"></a>
<span id="l16.7" class="minusline">-import sun.security.validator.Validator;</span><a href="#l16.7"></a>
<span id="l16.8" class="minusline">-</span><a href="#l16.8"></a>
<span id="l16.9" class="minusline">-import java.security.AlgorithmParameters;</span><a href="#l16.9"></a>
<span id="l16.10"> import java.security.Key;</span><a href="#l16.10"></a>
<span id="l16.11" class="minusline">-import java.security.Timestamp;</span><a href="#l16.11"></a>
<span id="l16.12" class="minusline">-import java.security.cert.X509Certificate;</span><a href="#l16.12"></a>
<span id="l16.13" class="minusline">-import java.security.interfaces.ECKey;</span><a href="#l16.13"></a>
<span id="l16.14" class="minusline">-import java.security.interfaces.XECKey;</span><a href="#l16.14"></a>
<span id="l16.15" class="minusline">-import java.security.spec.NamedParameterSpec;</span><a href="#l16.15"></a>
<span id="l16.16"> import java.util.Date;</span><a href="#l16.16"></a>
<span id="l16.17" class="plusline">+import java.util.Set;</span><a href="#l16.17"></a>
<span id="l16.18"> </span><a href="#l16.18"></a>
<span id="l16.19"> /**</span><a href="#l16.19"></a>
<span id="l16.20" class="minusline">- * This class contains parameters for checking against constraints that extend</span><a href="#l16.20"></a>
<span id="l16.21" class="minusline">- * past the publicly available parameters in java.security.AlgorithmConstraints.</span><a href="#l16.21"></a>
<span id="l16.22" class="minusline">-</span><a href="#l16.22"></a>
<span id="l16.23" class="minusline">- * This is currently on passed between  between PKIX, AlgorithmChecker,</span><a href="#l16.23"></a>
<span id="l16.24" class="minusline">- * and DisabledAlgorithmConstraints.</span><a href="#l16.24"></a>
<span id="l16.25" class="plusline">+ * This interface contains parameters for checking against constraints that</span><a href="#l16.25"></a>
<span id="l16.26" class="plusline">+ * extend past the publicly available parameters in</span><a href="#l16.26"></a>
<span id="l16.27" class="plusline">+ * java.security.AlgorithmConstraints.</span><a href="#l16.27"></a>
<span id="l16.28">  */</span><a href="#l16.28"></a>
<span id="l16.29" class="minusline">-public class ConstraintsParameters {</span><a href="#l16.29"></a>
<span id="l16.30" class="minusline">-    /*</span><a href="#l16.30"></a>
<span id="l16.31" class="minusline">-     * The below 3 values are used the same as the permit() methods</span><a href="#l16.31"></a>
<span id="l16.32" class="minusline">-     * published in java.security.AlgorithmConstraints.</span><a href="#l16.32"></a>
<span id="l16.33" class="minusline">-     */</span><a href="#l16.33"></a>
<span id="l16.34" class="minusline">-    // Algorithm string to be checked against constraints</span><a href="#l16.34"></a>
<span id="l16.35" class="minusline">-    private final String algorithm;</span><a href="#l16.35"></a>
<span id="l16.36" class="minusline">-    // AlgorithmParameters to the algorithm being checked</span><a href="#l16.36"></a>
<span id="l16.37" class="minusline">-    private final AlgorithmParameters algParams;</span><a href="#l16.37"></a>
<span id="l16.38" class="minusline">-    // Key being checked against constraints</span><a href="#l16.38"></a>
<span id="l16.39" class="minusline">-    private final Key key;</span><a href="#l16.39"></a>
<span id="l16.40" class="minusline">-</span><a href="#l16.40"></a>
<span id="l16.41" class="minusline">-    /*</span><a href="#l16.41"></a>
<span id="l16.42" class="minusline">-     * New values that are checked against constraints that the current public</span><a href="#l16.42"></a>
<span id="l16.43" class="minusline">-     * API does not support.</span><a href="#l16.43"></a>
<span id="l16.44" class="minusline">-     */</span><a href="#l16.44"></a>
<span id="l16.45" class="minusline">-    // A certificate being passed to check against constraints.</span><a href="#l16.45"></a>
<span id="l16.46" class="minusline">-    private final X509Certificate cert;</span><a href="#l16.46"></a>
<span id="l16.47" class="minusline">-    // This is true if the trust anchor in the certificate chain matches a cert</span><a href="#l16.47"></a>
<span id="l16.48" class="minusline">-    // in AnchorCertificates</span><a href="#l16.48"></a>
<span id="l16.49" class="minusline">-    private final boolean trustedMatch;</span><a href="#l16.49"></a>
<span id="l16.50" class="minusline">-    // PKIXParameter date</span><a href="#l16.50"></a>
<span id="l16.51" class="minusline">-    private final Date pkixDate;</span><a href="#l16.51"></a>
<span id="l16.52" class="minusline">-    // Timestamp of the signed JAR file</span><a href="#l16.52"></a>
<span id="l16.53" class="minusline">-    private final Timestamp jarTimestamp;</span><a href="#l16.53"></a>
<span id="l16.54" class="minusline">-    private final String variant;</span><a href="#l16.54"></a>
<span id="l16.55" class="minusline">-    // Named Curve</span><a href="#l16.55"></a>
<span id="l16.56" class="minusline">-    private final String[] curveStr;</span><a href="#l16.56"></a>
<span id="l16.57" class="minusline">-    private static final String[] EMPTYLIST = new String[0];</span><a href="#l16.57"></a>
<span id="l16.58" class="plusline">+public interface ConstraintsParameters {</span><a href="#l16.58"></a>
<span id="l16.59"> </span><a href="#l16.59"></a>
<span id="l16.60" class="minusline">-    public ConstraintsParameters(X509Certificate c, boolean match,</span><a href="#l16.60"></a>
<span id="l16.61" class="minusline">-            Date pkixdate, Timestamp jarTime, String variant) {</span><a href="#l16.61"></a>
<span id="l16.62" class="minusline">-        cert = c;</span><a href="#l16.62"></a>
<span id="l16.63" class="minusline">-        trustedMatch = match;</span><a href="#l16.63"></a>
<span id="l16.64" class="minusline">-        pkixDate = pkixdate;</span><a href="#l16.64"></a>
<span id="l16.65" class="minusline">-        jarTimestamp = jarTime;</span><a href="#l16.65"></a>
<span id="l16.66" class="minusline">-        this.variant = (variant == null ? Validator.VAR_GENERIC : variant);</span><a href="#l16.66"></a>
<span id="l16.67" class="minusline">-        algorithm = null;</span><a href="#l16.67"></a>
<span id="l16.68" class="minusline">-        algParams = null;</span><a href="#l16.68"></a>
<span id="l16.69" class="minusline">-        key = null;</span><a href="#l16.69"></a>
<span id="l16.70" class="minusline">-        if (c != null) {</span><a href="#l16.70"></a>
<span id="l16.71" class="minusline">-            curveStr = getNamedCurveFromKey(c.getPublicKey());</span><a href="#l16.71"></a>
<span id="l16.72" class="minusline">-        } else {</span><a href="#l16.72"></a>
<span id="l16.73" class="minusline">-            curveStr = EMPTYLIST;</span><a href="#l16.73"></a>
<span id="l16.74" class="minusline">-        }</span><a href="#l16.74"></a>
<span id="l16.75" class="minusline">-    }</span><a href="#l16.75"></a>
<span id="l16.76" class="plusline">+    /**</span><a href="#l16.76"></a>
<span id="l16.77" class="plusline">+     * Returns true if a certificate chains back to a trusted JDK root CA.</span><a href="#l16.77"></a>
<span id="l16.78" class="plusline">+     */</span><a href="#l16.78"></a>
<span id="l16.79" class="plusline">+    boolean anchorIsJdkCA();</span><a href="#l16.79"></a>
<span id="l16.80"> </span><a href="#l16.80"></a>
<span id="l16.81" class="minusline">-    public ConstraintsParameters(String algorithm, AlgorithmParameters params,</span><a href="#l16.81"></a>
<span id="l16.82" class="minusline">-            Key key, String variant) {</span><a href="#l16.82"></a>
<span id="l16.83" class="minusline">-        this.algorithm = algorithm;</span><a href="#l16.83"></a>
<span id="l16.84" class="minusline">-        algParams = params;</span><a href="#l16.84"></a>
<span id="l16.85" class="minusline">-        this.key = key;</span><a href="#l16.85"></a>
<span id="l16.86" class="minusline">-        curveStr = getNamedCurveFromKey(key);</span><a href="#l16.86"></a>
<span id="l16.87" class="minusline">-        cert = null;</span><a href="#l16.87"></a>
<span id="l16.88" class="minusline">-        trustedMatch = false;</span><a href="#l16.88"></a>
<span id="l16.89" class="minusline">-        pkixDate = null;</span><a href="#l16.89"></a>
<span id="l16.90" class="minusline">-        jarTimestamp = null;</span><a href="#l16.90"></a>
<span id="l16.91" class="minusline">-        this.variant = (variant == null ? Validator.VAR_GENERIC : variant);</span><a href="#l16.91"></a>
<span id="l16.92" class="minusline">-    }</span><a href="#l16.92"></a>
<span id="l16.93" class="minusline">-</span><a href="#l16.93"></a>
<span id="l16.94" class="minusline">-</span><a href="#l16.94"></a>
<span id="l16.95" class="minusline">-    public ConstraintsParameters(X509Certificate c) {</span><a href="#l16.95"></a>
<span id="l16.96" class="minusline">-        this(c, false, null, null,</span><a href="#l16.96"></a>
<span id="l16.97" class="minusline">-                Validator.VAR_GENERIC);</span><a href="#l16.97"></a>
<span id="l16.98" class="minusline">-    }</span><a href="#l16.98"></a>
<span id="l16.99" class="minusline">-</span><a href="#l16.99"></a>
<span id="l16.100" class="minusline">-    public ConstraintsParameters(Timestamp jarTime) {</span><a href="#l16.100"></a>
<span id="l16.101" class="minusline">-        this(null, false, null, jarTime, Validator.VAR_GENERIC);</span><a href="#l16.101"></a>
<span id="l16.102" class="minusline">-    }</span><a href="#l16.102"></a>
<span id="l16.103" class="plusline">+    /**</span><a href="#l16.103"></a>
<span id="l16.104" class="plusline">+     * Returns the set of keys that should be checked against the</span><a href="#l16.104"></a>
<span id="l16.105" class="plusline">+     * constraints, or an empty set if there are no keys to be checked.</span><a href="#l16.105"></a>
<span id="l16.106" class="plusline">+     */</span><a href="#l16.106"></a>
<span id="l16.107" class="plusline">+    Set&lt;Key&gt; getKeys();</span><a href="#l16.107"></a>
<span id="l16.108"> </span><a href="#l16.108"></a>
<span id="l16.109" class="minusline">-    public String getAlgorithm() {</span><a href="#l16.109"></a>
<span id="l16.110" class="minusline">-        return algorithm;</span><a href="#l16.110"></a>
<span id="l16.111" class="minusline">-    }</span><a href="#l16.111"></a>
<span id="l16.112" class="minusline">-</span><a href="#l16.112"></a>
<span id="l16.113" class="minusline">-    public AlgorithmParameters getAlgParams() {</span><a href="#l16.113"></a>
<span id="l16.114" class="minusline">-        return algParams;</span><a href="#l16.114"></a>
<span id="l16.115" class="minusline">-    }</span><a href="#l16.115"></a>
<span id="l16.116" class="minusline">-</span><a href="#l16.116"></a>
<span id="l16.117" class="minusline">-    public Key getKey() {</span><a href="#l16.117"></a>
<span id="l16.118" class="minusline">-        return key;</span><a href="#l16.118"></a>
<span id="l16.119" class="minusline">-    }</span><a href="#l16.119"></a>
<span id="l16.120" class="minusline">-</span><a href="#l16.120"></a>
<span id="l16.121" class="minusline">-    // Returns if the trust anchor has a match if anchor checking is enabled.</span><a href="#l16.121"></a>
<span id="l16.122" class="minusline">-    public boolean isTrustedMatch() {</span><a href="#l16.122"></a>
<span id="l16.123" class="minusline">-        return trustedMatch;</span><a href="#l16.123"></a>
<span id="l16.124" class="minusline">-    }</span><a href="#l16.124"></a>
<span id="l16.125" class="minusline">-</span><a href="#l16.125"></a>
<span id="l16.126" class="minusline">-    public X509Certificate getCertificate() {</span><a href="#l16.126"></a>
<span id="l16.127" class="minusline">-        return cert;</span><a href="#l16.127"></a>
<span id="l16.128" class="minusline">-    }</span><a href="#l16.128"></a>
<span id="l16.129" class="minusline">-</span><a href="#l16.129"></a>
<span id="l16.130" class="minusline">-    public Date getPKIXParamDate() {</span><a href="#l16.130"></a>
<span id="l16.131" class="minusline">-        return pkixDate;</span><a href="#l16.131"></a>
<span id="l16.132" class="minusline">-    }</span><a href="#l16.132"></a>
<span id="l16.133" class="minusline">-</span><a href="#l16.133"></a>
<span id="l16.134" class="minusline">-    public Timestamp getJARTimestamp() {</span><a href="#l16.134"></a>
<span id="l16.135" class="minusline">-        return jarTimestamp;</span><a href="#l16.135"></a>
<span id="l16.136" class="minusline">-    }</span><a href="#l16.136"></a>
<span id="l16.137" class="minusline">-</span><a href="#l16.137"></a>
<span id="l16.138" class="minusline">-    public String getVariant() {</span><a href="#l16.138"></a>
<span id="l16.139" class="minusline">-        return variant;</span><a href="#l16.139"></a>
<span id="l16.140" class="minusline">-    }</span><a href="#l16.140"></a>
<span id="l16.141" class="minusline">-</span><a href="#l16.141"></a>
<span id="l16.142" class="minusline">-    public String[] getNamedCurve() {</span><a href="#l16.142"></a>
<span id="l16.143" class="minusline">-        return curveStr;</span><a href="#l16.143"></a>
<span id="l16.144" class="minusline">-    }</span><a href="#l16.144"></a>
<span id="l16.145" class="plusline">+    /**</span><a href="#l16.145"></a>
<span id="l16.146" class="plusline">+     * Returns the date that should be checked against the constraints, or</span><a href="#l16.146"></a>
<span id="l16.147" class="plusline">+     * null if not set.</span><a href="#l16.147"></a>
<span id="l16.148" class="plusline">+     */</span><a href="#l16.148"></a>
<span id="l16.149" class="plusline">+    Date getDate();</span><a href="#l16.149"></a>
<span id="l16.150"> </span><a href="#l16.150"></a>
<span id="l16.151" class="minusline">-    public static String[] getNamedCurveFromKey(Key key) {</span><a href="#l16.151"></a>
<span id="l16.152" class="minusline">-        if (key instanceof ECKey) {</span><a href="#l16.152"></a>
<span id="l16.153" class="minusline">-            NamedCurve nc = CurveDB.lookup(((ECKey)key).getParams());</span><a href="#l16.153"></a>
<span id="l16.154" class="minusline">-            return (nc == null ? EMPTYLIST : CurveDB.getNamesByOID(nc.getObjectId()));</span><a href="#l16.154"></a>
<span id="l16.155" class="minusline">-        } else if (key instanceof XECKey) {</span><a href="#l16.155"></a>
<span id="l16.156" class="minusline">-            String[] s = {</span><a href="#l16.156"></a>
<span id="l16.157" class="minusline">-                    ((NamedParameterSpec)((XECKey)key).getParams()).getName()</span><a href="#l16.157"></a>
<span id="l16.158" class="minusline">-            };</span><a href="#l16.158"></a>
<span id="l16.159" class="minusline">-            return s;</span><a href="#l16.159"></a>
<span id="l16.160" class="minusline">-        } else {</span><a href="#l16.160"></a>
<span id="l16.161" class="minusline">-            return EMPTYLIST;</span><a href="#l16.161"></a>
<span id="l16.162" class="minusline">-        }</span><a href="#l16.162"></a>
<span id="l16.163" class="minusline">-    }</span><a href="#l16.163"></a>
<span id="l16.164" class="plusline">+    /**</span><a href="#l16.164"></a>
<span id="l16.165" class="plusline">+     * Returns the Validator variant.</span><a href="#l16.165"></a>
<span id="l16.166" class="plusline">+     */</span><a href="#l16.166"></a>
<span id="l16.167" class="plusline">+    String getVariant();</span><a href="#l16.167"></a>
<span id="l16.168"> </span><a href="#l16.168"></a>
<span id="l16.169" class="minusline">-    public String toString() {</span><a href="#l16.169"></a>
<span id="l16.170" class="minusline">-        StringBuilder s = new StringBuilder();</span><a href="#l16.170"></a>
<span id="l16.171" class="minusline">-        s.append(&quot;Cert:       &quot;);</span><a href="#l16.171"></a>
<span id="l16.172" class="minusline">-        if (cert != null) {</span><a href="#l16.172"></a>
<span id="l16.173" class="minusline">-            s.append(cert.toString());</span><a href="#l16.173"></a>
<span id="l16.174" class="minusline">-            s.append(&quot;\nSigAlgo:    &quot;);</span><a href="#l16.174"></a>
<span id="l16.175" class="minusline">-            s.append(cert.getSigAlgName());</span><a href="#l16.175"></a>
<span id="l16.176" class="minusline">-        } else {</span><a href="#l16.176"></a>
<span id="l16.177" class="minusline">-            s.append(&quot;None&quot;);</span><a href="#l16.177"></a>
<span id="l16.178" class="minusline">-        }</span><a href="#l16.178"></a>
<span id="l16.179" class="minusline">-        s.append(&quot;\nAlgParams:  &quot;);</span><a href="#l16.179"></a>
<span id="l16.180" class="minusline">-        if (getAlgParams() != null) {</span><a href="#l16.180"></a>
<span id="l16.181" class="minusline">-            getAlgParams().toString();</span><a href="#l16.181"></a>
<span id="l16.182" class="minusline">-        } else {</span><a href="#l16.182"></a>
<span id="l16.183" class="minusline">-            s.append(&quot;None&quot;);</span><a href="#l16.183"></a>
<span id="l16.184" class="minusline">-        }</span><a href="#l16.184"></a>
<span id="l16.185" class="minusline">-        s.append(&quot;\nNamedCurves: &quot;);</span><a href="#l16.185"></a>
<span id="l16.186" class="minusline">-        for (String c : getNamedCurve()) {</span><a href="#l16.186"></a>
<span id="l16.187" class="minusline">-            s.append(c + &quot; &quot;);</span><a href="#l16.187"></a>
<span id="l16.188" class="minusline">-        }</span><a href="#l16.188"></a>
<span id="l16.189" class="minusline">-        s.append(&quot;\nVariant:    &quot; + getVariant());</span><a href="#l16.189"></a>
<span id="l16.190" class="minusline">-        return s.toString();</span><a href="#l16.190"></a>
<span id="l16.191" class="minusline">-    }</span><a href="#l16.191"></a>
<span id="l16.192" class="minusline">-</span><a href="#l16.192"></a>
<span id="l16.193" class="plusline">+    /**</span><a href="#l16.193"></a>
<span id="l16.194" class="plusline">+     * Returns an extended message used in exceptions. See</span><a href="#l16.194"></a>
<span id="l16.195" class="plusline">+     * DisabledAlgorithmConstraints for usage.</span><a href="#l16.195"></a>
<span id="l16.196" class="plusline">+     */</span><a href="#l16.196"></a>
<span id="l16.197" class="plusline">+    String extendedExceptionMsg();</span><a href="#l16.197"></a>
<span id="l16.198"> }</span><a href="#l16.198"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l17.1" class="minusline">--- a/src/java.base/share/classes/sun/security/util/DisabledAlgorithmConstraints.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l17.1"></a>
<span id="l17.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/util/DisabledAlgorithmConstraints.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l17.2"></a>
<span id="l17.3" class="atline">@@ -27,12 +27,18 @@</span><a href="#l17.3"></a>
<span id="l17.4"> </span><a href="#l17.4"></a>
<span id="l17.5"> import sun.security.validator.Validator;</span><a href="#l17.5"></a>
<span id="l17.6"> </span><a href="#l17.6"></a>
<span id="l17.7" class="plusline">+import java.security.AlgorithmParameters;</span><a href="#l17.7"></a>
<span id="l17.8"> import java.security.CryptoPrimitive;</span><a href="#l17.8"></a>
<span id="l17.9" class="minusline">-import java.security.AlgorithmParameters;</span><a href="#l17.9"></a>
<span id="l17.10"> import java.security.Key;</span><a href="#l17.10"></a>
<span id="l17.11"> import java.security.cert.CertPathValidatorException;</span><a href="#l17.11"></a>
<span id="l17.12"> import java.security.cert.CertPathValidatorException.BasicReason;</span><a href="#l17.12"></a>
<span id="l17.13" class="minusline">-import java.security.cert.X509Certificate;</span><a href="#l17.13"></a>
<span id="l17.14" class="plusline">+import java.security.interfaces.ECKey;</span><a href="#l17.14"></a>
<span id="l17.15" class="plusline">+import java.security.interfaces.XECKey;</span><a href="#l17.15"></a>
<span id="l17.16" class="plusline">+import java.security.spec.AlgorithmParameterSpec;</span><a href="#l17.16"></a>
<span id="l17.17" class="plusline">+import java.security.spec.InvalidParameterSpecException;</span><a href="#l17.17"></a>
<span id="l17.18" class="plusline">+import java.security.spec.MGF1ParameterSpec;</span><a href="#l17.18"></a>
<span id="l17.19" class="plusline">+import java.security.spec.NamedParameterSpec;</span><a href="#l17.19"></a>
<span id="l17.20" class="plusline">+import java.security.spec.PSSParameterSpec;</span><a href="#l17.20"></a>
<span id="l17.21"> import java.text.SimpleDateFormat;</span><a href="#l17.21"></a>
<span id="l17.22"> import java.util.ArrayList;</span><a href="#l17.22"></a>
<span id="l17.23"> import java.util.Arrays;</span><a href="#l17.23"></a>
<span id="l17.24" class="atline">@@ -79,9 +85,27 @@</span><a href="#l17.24"></a>
<span id="l17.25">     private static final String PROPERTY_DISABLED_EC_CURVES =</span><a href="#l17.25"></a>
<span id="l17.26">             &quot;jdk.disabled.namedCurves&quot;;</span><a href="#l17.26"></a>
<span id="l17.27"> </span><a href="#l17.27"></a>
<span id="l17.28" class="plusline">+    private static class CertPathHolder {</span><a href="#l17.28"></a>
<span id="l17.29" class="plusline">+        static final DisabledAlgorithmConstraints CONSTRAINTS =</span><a href="#l17.29"></a>
<span id="l17.30" class="plusline">+            new DisabledAlgorithmConstraints(PROPERTY_CERTPATH_DISABLED_ALGS);</span><a href="#l17.30"></a>
<span id="l17.31" class="plusline">+    }</span><a href="#l17.31"></a>
<span id="l17.32" class="plusline">+</span><a href="#l17.32"></a>
<span id="l17.33" class="plusline">+    private static class JarHolder {</span><a href="#l17.33"></a>
<span id="l17.34" class="plusline">+        static final DisabledAlgorithmConstraints CONSTRAINTS =</span><a href="#l17.34"></a>
<span id="l17.35" class="plusline">+            new DisabledAlgorithmConstraints(PROPERTY_JAR_DISABLED_ALGS);</span><a href="#l17.35"></a>
<span id="l17.36" class="plusline">+    }</span><a href="#l17.36"></a>
<span id="l17.37" class="plusline">+</span><a href="#l17.37"></a>
<span id="l17.38">     private final List&lt;String&gt; disabledAlgorithms;</span><a href="#l17.38"></a>
<span id="l17.39">     private final Constraints algorithmConstraints;</span><a href="#l17.39"></a>
<span id="l17.40"> </span><a href="#l17.40"></a>
<span id="l17.41" class="plusline">+    public static DisabledAlgorithmConstraints certPathConstraints() {</span><a href="#l17.41"></a>
<span id="l17.42" class="plusline">+        return CertPathHolder.CONSTRAINTS;</span><a href="#l17.42"></a>
<span id="l17.43" class="plusline">+    }</span><a href="#l17.43"></a>
<span id="l17.44" class="plusline">+</span><a href="#l17.44"></a>
<span id="l17.45" class="plusline">+    public static DisabledAlgorithmConstraints jarConstraints() {</span><a href="#l17.45"></a>
<span id="l17.46" class="plusline">+        return JarHolder.CONSTRAINTS;</span><a href="#l17.46"></a>
<span id="l17.47" class="plusline">+    }</span><a href="#l17.47"></a>
<span id="l17.48" class="plusline">+</span><a href="#l17.48"></a>
<span id="l17.49">     /**</span><a href="#l17.49"></a>
<span id="l17.50">      * Initialize algorithm constraints with the specified security property.</span><a href="#l17.50"></a>
<span id="l17.51">      *</span><a href="#l17.51"></a>
<span id="l17.52" class="atline">@@ -122,7 +146,7 @@</span><a href="#l17.52"></a>
<span id="l17.53">             disabledAlgorithms.addAll(ecindex,</span><a href="#l17.53"></a>
<span id="l17.54">                     getAlgorithms(PROPERTY_DISABLED_EC_CURVES));</span><a href="#l17.54"></a>
<span id="l17.55">         }</span><a href="#l17.55"></a>
<span id="l17.56" class="minusline">-        algorithmConstraints = new Constraints(disabledAlgorithms);</span><a href="#l17.56"></a>
<span id="l17.57" class="plusline">+        algorithmConstraints = new Constraints(propertyName, disabledAlgorithms);</span><a href="#l17.57"></a>
<span id="l17.58">     }</span><a href="#l17.58"></a>
<span id="l17.59"> </span><a href="#l17.59"></a>
<span id="l17.60">     /*</span><a href="#l17.60"></a>
<span id="l17.61" class="atline">@@ -167,32 +191,54 @@</span><a href="#l17.61"></a>
<span id="l17.62">         return checkConstraints(primitives, algorithm, key, parameters);</span><a href="#l17.62"></a>
<span id="l17.63">     }</span><a href="#l17.63"></a>
<span id="l17.64"> </span><a href="#l17.64"></a>
<span id="l17.65" class="minusline">-    public final void permits(ConstraintsParameters cp)</span><a href="#l17.65"></a>
<span id="l17.66" class="minusline">-            throws CertPathValidatorException {</span><a href="#l17.66"></a>
<span id="l17.67" class="minusline">-        permits(cp.getAlgorithm(), cp);</span><a href="#l17.67"></a>
<span id="l17.68" class="plusline">+    public final void permits(String algorithm, AlgorithmParameters ap,</span><a href="#l17.68"></a>
<span id="l17.69" class="plusline">+        ConstraintsParameters cp) throws CertPathValidatorException {</span><a href="#l17.69"></a>
<span id="l17.70" class="plusline">+</span><a href="#l17.70"></a>
<span id="l17.71" class="plusline">+        permits(algorithm, cp);</span><a href="#l17.71"></a>
<span id="l17.72" class="plusline">+        if (ap != null) {</span><a href="#l17.72"></a>
<span id="l17.73" class="plusline">+            permits(ap, cp);</span><a href="#l17.73"></a>
<span id="l17.74" class="plusline">+        }</span><a href="#l17.74"></a>
<span id="l17.75" class="plusline">+    }</span><a href="#l17.75"></a>
<span id="l17.76" class="plusline">+</span><a href="#l17.76"></a>
<span id="l17.77" class="plusline">+    private void permits(AlgorithmParameters ap, ConstraintsParameters cp)</span><a href="#l17.77"></a>
<span id="l17.78" class="plusline">+        throws CertPathValidatorException {</span><a href="#l17.78"></a>
<span id="l17.79" class="plusline">+</span><a href="#l17.79"></a>
<span id="l17.80" class="plusline">+        switch (ap.getAlgorithm().toUpperCase(Locale.ENGLISH)) {</span><a href="#l17.80"></a>
<span id="l17.81" class="plusline">+            case &quot;RSASSA-PSS&quot;:</span><a href="#l17.81"></a>
<span id="l17.82" class="plusline">+                permitsPSSParams(ap, cp);</span><a href="#l17.82"></a>
<span id="l17.83" class="plusline">+                break;</span><a href="#l17.83"></a>
<span id="l17.84" class="plusline">+            default:</span><a href="#l17.84"></a>
<span id="l17.85" class="plusline">+                // unknown algorithm, just ignore</span><a href="#l17.85"></a>
<span id="l17.86" class="plusline">+        }</span><a href="#l17.86"></a>
<span id="l17.87">     }</span><a href="#l17.87"></a>
<span id="l17.88"> </span><a href="#l17.88"></a>
<span id="l17.89" class="minusline">-    public final void permits(String algorithm, Key key,</span><a href="#l17.89"></a>
<span id="l17.90" class="minusline">-            AlgorithmParameters params, String variant)</span><a href="#l17.90"></a>
<span id="l17.91" class="minusline">-            throws CertPathValidatorException {</span><a href="#l17.91"></a>
<span id="l17.92" class="minusline">-        permits(algorithm, new ConstraintsParameters(algorithm, params, key,</span><a href="#l17.92"></a>
<span id="l17.93" class="minusline">-                (variant == null) ? Validator.VAR_GENERIC : variant));</span><a href="#l17.93"></a>
<span id="l17.94" class="minusline">-    }</span><a href="#l17.94"></a>
<span id="l17.95" class="plusline">+    private void permitsPSSParams(AlgorithmParameters ap,</span><a href="#l17.95"></a>
<span id="l17.96" class="plusline">+        ConstraintsParameters cp) throws CertPathValidatorException {</span><a href="#l17.96"></a>
<span id="l17.97"> </span><a href="#l17.97"></a>
<span id="l17.98" class="minusline">-    /*</span><a href="#l17.98"></a>
<span id="l17.99" class="minusline">-     * Check if a x509Certificate object is permitted.  Check if all</span><a href="#l17.99"></a>
<span id="l17.100" class="minusline">-     * algorithms are allowed, certificate constraints, and the</span><a href="#l17.100"></a>
<span id="l17.101" class="minusline">-     * public key against key constraints.</span><a href="#l17.101"></a>
<span id="l17.102" class="minusline">-     *</span><a href="#l17.102"></a>
<span id="l17.103" class="minusline">-     * Uses new style permit() which throws exceptions.</span><a href="#l17.103"></a>
<span id="l17.104" class="minusline">-     */</span><a href="#l17.104"></a>
<span id="l17.105" class="plusline">+        try {</span><a href="#l17.105"></a>
<span id="l17.106" class="plusline">+            PSSParameterSpec pssParams =</span><a href="#l17.106"></a>
<span id="l17.107" class="plusline">+                ap.getParameterSpec(PSSParameterSpec.class);</span><a href="#l17.107"></a>
<span id="l17.108" class="plusline">+            String digestAlg = pssParams.getDigestAlgorithm();</span><a href="#l17.108"></a>
<span id="l17.109" class="plusline">+            permits(digestAlg, cp);</span><a href="#l17.109"></a>
<span id="l17.110" class="plusline">+            AlgorithmParameterSpec mgfParams = pssParams.getMGFParameters();</span><a href="#l17.110"></a>
<span id="l17.111" class="plusline">+            if (mgfParams instanceof MGF1ParameterSpec) {</span><a href="#l17.111"></a>
<span id="l17.112" class="plusline">+                String mgfDigestAlg =</span><a href="#l17.112"></a>
<span id="l17.113" class="plusline">+                    ((MGF1ParameterSpec)mgfParams).getDigestAlgorithm();</span><a href="#l17.113"></a>
<span id="l17.114" class="plusline">+                if (!mgfDigestAlg.equalsIgnoreCase(digestAlg)) {</span><a href="#l17.114"></a>
<span id="l17.115" class="plusline">+                    permits(mgfDigestAlg, cp);</span><a href="#l17.115"></a>
<span id="l17.116" class="plusline">+                }</span><a href="#l17.116"></a>
<span id="l17.117" class="plusline">+            }</span><a href="#l17.117"></a>
<span id="l17.118" class="plusline">+        } catch (InvalidParameterSpecException ipse) {</span><a href="#l17.118"></a>
<span id="l17.119" class="plusline">+            // ignore</span><a href="#l17.119"></a>
<span id="l17.120" class="plusline">+        }</span><a href="#l17.120"></a>
<span id="l17.121" class="plusline">+    }</span><a href="#l17.121"></a>
<span id="l17.122"> </span><a href="#l17.122"></a>
<span id="l17.123">     public final void permits(String algorithm, ConstraintsParameters cp)</span><a href="#l17.123"></a>
<span id="l17.124">             throws CertPathValidatorException {</span><a href="#l17.124"></a>
<span id="l17.125"> </span><a href="#l17.125"></a>
<span id="l17.126" class="minusline">-        // Check if named curves in the ConstraintParameters are disabled.</span><a href="#l17.126"></a>
<span id="l17.127" class="minusline">-        if (cp.getNamedCurve() != null) {</span><a href="#l17.127"></a>
<span id="l17.128" class="minusline">-            for (String curve : cp.getNamedCurve()) {</span><a href="#l17.128"></a>
<span id="l17.129" class="plusline">+        // Check if named curves in the key are disabled.</span><a href="#l17.129"></a>
<span id="l17.130" class="plusline">+        for (Key key : cp.getKeys()) {</span><a href="#l17.130"></a>
<span id="l17.131" class="plusline">+            for (String curve : getNamedCurveFromKey(key)) {</span><a href="#l17.131"></a>
<span id="l17.132">                 if (!checkAlgorithm(disabledAlgorithms, curve, decomposer)) {</span><a href="#l17.132"></a>
<span id="l17.133">                     throw new CertPathValidatorException(</span><a href="#l17.133"></a>
<span id="l17.134">                             &quot;Algorithm constraints check failed on disabled &quot; +</span><a href="#l17.134"></a>
<span id="l17.135" class="atline">@@ -205,15 +251,17 @@</span><a href="#l17.135"></a>
<span id="l17.136">         algorithmConstraints.permits(algorithm, cp);</span><a href="#l17.136"></a>
<span id="l17.137">     }</span><a href="#l17.137"></a>
<span id="l17.138"> </span><a href="#l17.138"></a>
<span id="l17.139" class="minusline">-    // Check if a string is contained inside the property</span><a href="#l17.139"></a>
<span id="l17.140" class="minusline">-    public boolean checkProperty(String param) {</span><a href="#l17.140"></a>
<span id="l17.141" class="minusline">-        param = param.toLowerCase(Locale.ENGLISH);</span><a href="#l17.141"></a>
<span id="l17.142" class="minusline">-        for (String block : disabledAlgorithms) {</span><a href="#l17.142"></a>
<span id="l17.143" class="minusline">-            if (block.toLowerCase(Locale.ENGLISH).indexOf(param) &gt;= 0) {</span><a href="#l17.143"></a>
<span id="l17.144" class="minusline">-                return true;</span><a href="#l17.144"></a>
<span id="l17.145" class="minusline">-            }</span><a href="#l17.145"></a>
<span id="l17.146" class="plusline">+    private static List&lt;String&gt; getNamedCurveFromKey(Key key) {</span><a href="#l17.146"></a>
<span id="l17.147" class="plusline">+        if (key instanceof ECKey) {</span><a href="#l17.147"></a>
<span id="l17.148" class="plusline">+            NamedCurve nc = CurveDB.lookup(((ECKey)key).getParams());</span><a href="#l17.148"></a>
<span id="l17.149" class="plusline">+            return (nc == null ? List.of()</span><a href="#l17.149"></a>
<span id="l17.150" class="plusline">+                               : Arrays.asList(CurveDB.getNamesByOID(nc.getObjectId())));</span><a href="#l17.150"></a>
<span id="l17.151" class="plusline">+        } else if (key instanceof XECKey) {</span><a href="#l17.151"></a>
<span id="l17.152" class="plusline">+            return List.of(</span><a href="#l17.152"></a>
<span id="l17.153" class="plusline">+                ((NamedParameterSpec)((XECKey)key).getParams()).getName());</span><a href="#l17.153"></a>
<span id="l17.154" class="plusline">+        } else {</span><a href="#l17.154"></a>
<span id="l17.155" class="plusline">+            return List.of();</span><a href="#l17.155"></a>
<span id="l17.156">         }</span><a href="#l17.156"></a>
<span id="l17.157" class="minusline">-        return false;</span><a href="#l17.157"></a>
<span id="l17.158">     }</span><a href="#l17.158"></a>
<span id="l17.159"> </span><a href="#l17.159"></a>
<span id="l17.160">     // Check algorithm constraints with key and algorithm</span><a href="#l17.160"></a>
<span id="l17.161" class="atline">@@ -237,8 +285,8 @@</span><a href="#l17.161"></a>
<span id="l17.162">             return false;</span><a href="#l17.162"></a>
<span id="l17.163">         }</span><a href="#l17.163"></a>
<span id="l17.164"> </span><a href="#l17.164"></a>
<span id="l17.165" class="minusline">-        // If this is an elliptic curve, check disabled the named curve.</span><a href="#l17.165"></a>
<span id="l17.166" class="minusline">-        for (String curve : ConstraintsParameters.getNamedCurveFromKey(key)) {</span><a href="#l17.166"></a>
<span id="l17.167" class="plusline">+        // If this is an elliptic curve, check if it is disabled</span><a href="#l17.167"></a>
<span id="l17.168" class="plusline">+        for (String curve : getNamedCurveFromKey(key)) {</span><a href="#l17.168"></a>
<span id="l17.169">             if (!permits(primitives, curve, null)) {</span><a href="#l17.169"></a>
<span id="l17.170">                 return false;</span><a href="#l17.170"></a>
<span id="l17.171">             }</span><a href="#l17.171"></a>
<span id="l17.172" class="atline">@@ -275,7 +323,7 @@</span><a href="#l17.172"></a>
<span id="l17.173">                     &quot;denyAfter\\s+(\\d{4})-(\\d{2})-(\\d{2})&quot;);</span><a href="#l17.173"></a>
<span id="l17.174">         }</span><a href="#l17.174"></a>
<span id="l17.175"> </span><a href="#l17.175"></a>
<span id="l17.176" class="minusline">-        public Constraints(List&lt;String&gt; constraintArray) {</span><a href="#l17.176"></a>
<span id="l17.177" class="plusline">+        public Constraints(String propertyName, List&lt;String&gt; constraintArray) {</span><a href="#l17.177"></a>
<span id="l17.178">             for (String constraintEntry : constraintArray) {</span><a href="#l17.178"></a>
<span id="l17.179">                 if (constraintEntry == null || constraintEntry.isEmpty()) {</span><a href="#l17.179"></a>
<span id="l17.180">                     continue;</span><a href="#l17.180"></a>
<span id="l17.181" class="atline">@@ -390,7 +438,7 @@</span><a href="#l17.181"></a>
<span id="l17.182">             }</span><a href="#l17.182"></a>
<span id="l17.183">         }</span><a href="#l17.183"></a>
<span id="l17.184"> </span><a href="#l17.184"></a>
<span id="l17.185" class="minusline">-        // Get applicable constraints based off the signature algorithm</span><a href="#l17.185"></a>
<span id="l17.186" class="plusline">+        // Get applicable constraints based off the algorithm</span><a href="#l17.186"></a>
<span id="l17.187">         private List&lt;Constraint&gt; getConstraints(String algorithm) {</span><a href="#l17.187"></a>
<span id="l17.188">             return constraintsMap.get(algorithm.toUpperCase(Locale.ENGLISH));</span><a href="#l17.188"></a>
<span id="l17.189">         }</span><a href="#l17.189"></a>
<span id="l17.190" class="atline">@@ -434,13 +482,12 @@</span><a href="#l17.190"></a>
<span id="l17.191">             return true;</span><a href="#l17.191"></a>
<span id="l17.192">         }</span><a href="#l17.192"></a>
<span id="l17.193"> </span><a href="#l17.193"></a>
<span id="l17.194" class="minusline">-        // Check if constraints permit this cert.</span><a href="#l17.194"></a>
<span id="l17.195">         public void permits(String algorithm, ConstraintsParameters cp)</span><a href="#l17.195"></a>
<span id="l17.196">                 throws CertPathValidatorException {</span><a href="#l17.196"></a>
<span id="l17.197" class="minusline">-            X509Certificate cert = cp.getCertificate();</span><a href="#l17.197"></a>
<span id="l17.198"> </span><a href="#l17.198"></a>
<span id="l17.199">             if (debug != null) {</span><a href="#l17.199"></a>
<span id="l17.200" class="minusline">-                debug.println(&quot;Constraints.permits(): &quot; + cp.toString());</span><a href="#l17.200"></a>
<span id="l17.201" class="plusline">+                debug.println(&quot;Constraints.permits(): &quot; + algorithm + &quot;, &quot;</span><a href="#l17.201"></a>
<span id="l17.202" class="plusline">+                              + cp.toString());</span><a href="#l17.202"></a>
<span id="l17.203">             }</span><a href="#l17.203"></a>
<span id="l17.204"> </span><a href="#l17.204"></a>
<span id="l17.205">             // Get all signature algorithms to check for constraints</span><a href="#l17.205"></a>
<span id="l17.206" class="atline">@@ -450,13 +497,10 @@</span><a href="#l17.206"></a>
<span id="l17.207">                 algorithms.add(algorithm);</span><a href="#l17.207"></a>
<span id="l17.208">             }</span><a href="#l17.208"></a>
<span id="l17.209"> </span><a href="#l17.209"></a>
<span id="l17.210" class="minusline">-            // Attempt to add the public key algorithm if cert provided</span><a href="#l17.210"></a>
<span id="l17.211" class="minusline">-            if (cert != null) {</span><a href="#l17.211"></a>
<span id="l17.212" class="minusline">-                algorithms.add(cert.getPublicKey().getAlgorithm());</span><a href="#l17.212"></a>
<span id="l17.213" class="plusline">+            for (Key key : cp.getKeys()) {</span><a href="#l17.213"></a>
<span id="l17.214" class="plusline">+                algorithms.add(key.getAlgorithm());</span><a href="#l17.214"></a>
<span id="l17.215">             }</span><a href="#l17.215"></a>
<span id="l17.216" class="minusline">-            if (cp.getKey() != null) {</span><a href="#l17.216"></a>
<span id="l17.217" class="minusline">-                algorithms.add(cp.getKey().getAlgorithm());</span><a href="#l17.217"></a>
<span id="l17.218" class="minusline">-            }</span><a href="#l17.218"></a>
<span id="l17.219" class="plusline">+</span><a href="#l17.219"></a>
<span id="l17.220">             // Check all applicable constraints</span><a href="#l17.220"></a>
<span id="l17.221">             for (String alg : algorithms) {</span><a href="#l17.221"></a>
<span id="l17.222">                 List&lt;Constraint&gt; list = getConstraints(alg);</span><a href="#l17.222"></a>
<span id="l17.223" class="atline">@@ -547,7 +591,7 @@</span><a href="#l17.223"></a>
<span id="l17.224">          * {@code next()} with the same {@code ConstraintsParameters}</span><a href="#l17.224"></a>
<span id="l17.225">          * parameter passed if multiple constraints need to be checked.</span><a href="#l17.225"></a>
<span id="l17.226">          *</span><a href="#l17.226"></a>
<span id="l17.227" class="minusline">-         * @param cp CertConstraintParameter containing certificate info</span><a href="#l17.227"></a>
<span id="l17.228" class="plusline">+         * @param cp ConstraintsParameter containing certificate info</span><a href="#l17.228"></a>
<span id="l17.229">          * @throws CertPathValidatorException if constraint disallows.</span><a href="#l17.229"></a>
<span id="l17.230">          *</span><a href="#l17.230"></a>
<span id="l17.231">          */</span><a href="#l17.231"></a>
<span id="l17.232" class="atline">@@ -596,14 +640,6 @@</span><a href="#l17.232"></a>
<span id="l17.233">         boolean next(Key key) {</span><a href="#l17.233"></a>
<span id="l17.234">             return nextConstraint != null &amp;&amp; nextConstraint.permits(key);</span><a href="#l17.234"></a>
<span id="l17.235">         }</span><a href="#l17.235"></a>
<span id="l17.236" class="minusline">-</span><a href="#l17.236"></a>
<span id="l17.237" class="minusline">-        String extendedMsg(ConstraintsParameters cp) {</span><a href="#l17.237"></a>
<span id="l17.238" class="minusline">-            return (cp.getCertificate() == null ? &quot;.&quot; :</span><a href="#l17.238"></a>
<span id="l17.239" class="minusline">-                    &quot; used with certificate: &quot; +</span><a href="#l17.239"></a>
<span id="l17.240" class="minusline">-                            cp.getCertificate().getSubjectX500Principal() +</span><a href="#l17.240"></a>
<span id="l17.241" class="minusline">-                    (cp.getVariant() != Validator.VAR_GENERIC ?</span><a href="#l17.241"></a>
<span id="l17.242" class="minusline">-                            &quot;.  Usage was &quot; + cp.getVariant() : &quot;.&quot;));</span><a href="#l17.242"></a>
<span id="l17.243" class="minusline">-        }</span><a href="#l17.243"></a>
<span id="l17.244">     }</span><a href="#l17.244"></a>
<span id="l17.245"> </span><a href="#l17.245"></a>
<span id="l17.246">     /*</span><a href="#l17.246"></a>
<span id="l17.247" class="atline">@@ -627,14 +663,15 @@</span><a href="#l17.247"></a>
<span id="l17.248">                 debug.println(&quot;jdkCAConstraints.permits(): &quot; + algorithm);</span><a href="#l17.248"></a>
<span id="l17.249">             }</span><a href="#l17.249"></a>
<span id="l17.250"> </span><a href="#l17.250"></a>
<span id="l17.251" class="minusline">-            // Check chain has a trust anchor in cacerts</span><a href="#l17.251"></a>
<span id="l17.252" class="minusline">-            if (cp.isTrustedMatch()) {</span><a href="#l17.252"></a>
<span id="l17.253" class="plusline">+            // Check if any certs chain back to at least one trust anchor in</span><a href="#l17.253"></a>
<span id="l17.254" class="plusline">+            // cacerts</span><a href="#l17.254"></a>
<span id="l17.255" class="plusline">+            if (cp.anchorIsJdkCA()) {</span><a href="#l17.255"></a>
<span id="l17.256">                 if (next(cp)) {</span><a href="#l17.256"></a>
<span id="l17.257">                     return;</span><a href="#l17.257"></a>
<span id="l17.258">                 }</span><a href="#l17.258"></a>
<span id="l17.259">                 throw new CertPathValidatorException(</span><a href="#l17.259"></a>
<span id="l17.260">                         &quot;Algorithm constraints check failed on certificate &quot; +</span><a href="#l17.260"></a>
<span id="l17.261" class="minusline">-                        &quot;anchor limits. &quot; + algorithm + extendedMsg(cp),</span><a href="#l17.261"></a>
<span id="l17.262" class="plusline">+                        &quot;anchor limits. &quot; + algorithm + cp.extendedExceptionMsg(),</span><a href="#l17.262"></a>
<span id="l17.263">                         null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);</span><a href="#l17.263"></a>
<span id="l17.264">             }</span><a href="#l17.264"></a>
<span id="l17.265">         }</span><a href="#l17.265"></a>
<span id="l17.266" class="atline">@@ -699,15 +736,10 @@</span><a href="#l17.266"></a>
<span id="l17.267">             Date currentDate;</span><a href="#l17.267"></a>
<span id="l17.268">             String errmsg;</span><a href="#l17.268"></a>
<span id="l17.269"> </span><a href="#l17.269"></a>
<span id="l17.270" class="minusline">-            if (cp.getJARTimestamp() != null) {</span><a href="#l17.270"></a>
<span id="l17.271" class="minusline">-                currentDate = cp.getJARTimestamp().getTimestamp();</span><a href="#l17.271"></a>
<span id="l17.272" class="minusline">-                errmsg = &quot;JAR Timestamp date: &quot;;</span><a href="#l17.272"></a>
<span id="l17.273" class="minusline">-            } else if (cp.getPKIXParamDate() != null) {</span><a href="#l17.273"></a>
<span id="l17.274" class="minusline">-                currentDate = cp.getPKIXParamDate();</span><a href="#l17.274"></a>
<span id="l17.275" class="minusline">-                errmsg = &quot;PKIXParameter date: &quot;;</span><a href="#l17.275"></a>
<span id="l17.276" class="plusline">+            if (cp.getDate() != null) {</span><a href="#l17.276"></a>
<span id="l17.277" class="plusline">+                currentDate = cp.getDate();</span><a href="#l17.277"></a>
<span id="l17.278">             } else {</span><a href="#l17.278"></a>
<span id="l17.279">                 currentDate = new Date();</span><a href="#l17.279"></a>
<span id="l17.280" class="minusline">-                errmsg = &quot;Current date: &quot;;</span><a href="#l17.280"></a>
<span id="l17.281">             }</span><a href="#l17.281"></a>
<span id="l17.282"> </span><a href="#l17.282"></a>
<span id="l17.283">             if (!denyAfterDate.after(currentDate)) {</span><a href="#l17.283"></a>
<span id="l17.284" class="atline">@@ -717,8 +749,8 @@</span><a href="#l17.284"></a>
<span id="l17.285">                 throw new CertPathValidatorException(</span><a href="#l17.285"></a>
<span id="l17.286">                         &quot;denyAfter constraint check failed: &quot; + algorithm +</span><a href="#l17.286"></a>
<span id="l17.287">                         &quot; used with Constraint date: &quot; +</span><a href="#l17.287"></a>
<span id="l17.288" class="minusline">-                        dateFormat.format(denyAfterDate) + &quot;; &quot; + errmsg +</span><a href="#l17.288"></a>
<span id="l17.289" class="minusline">-                        dateFormat.format(currentDate) + extendedMsg(cp),</span><a href="#l17.289"></a>
<span id="l17.290" class="plusline">+                        dateFormat.format(denyAfterDate) + &quot;; params date: &quot; +</span><a href="#l17.290"></a>
<span id="l17.291" class="plusline">+                        dateFormat.format(currentDate) + cp.extendedExceptionMsg(),</span><a href="#l17.291"></a>
<span id="l17.292">                         null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);</span><a href="#l17.292"></a>
<span id="l17.293">             }</span><a href="#l17.293"></a>
<span id="l17.294">         }</span><a href="#l17.294"></a>
<span id="l17.295" class="atline">@@ -755,19 +787,27 @@</span><a href="#l17.295"></a>
<span id="l17.296">         @Override</span><a href="#l17.296"></a>
<span id="l17.297">         public void permits(ConstraintsParameters cp)</span><a href="#l17.297"></a>
<span id="l17.298">                 throws CertPathValidatorException {</span><a href="#l17.298"></a>
<span id="l17.299" class="plusline">+            String variant = cp.getVariant();</span><a href="#l17.299"></a>
<span id="l17.300">             for (String usage : usages) {</span><a href="#l17.300"></a>
<span id="l17.301"> </span><a href="#l17.301"></a>
<span id="l17.302" class="minusline">-                String v = null;</span><a href="#l17.302"></a>
<span id="l17.303" class="minusline">-                if (usage.compareToIgnoreCase(&quot;TLSServer&quot;) == 0) {</span><a href="#l17.303"></a>
<span id="l17.304" class="minusline">-                    v = Validator.VAR_TLS_SERVER;</span><a href="#l17.304"></a>
<span id="l17.305" class="minusline">-                } else if (usage.compareToIgnoreCase(&quot;TLSClient&quot;) == 0) {</span><a href="#l17.305"></a>
<span id="l17.306" class="minusline">-                    v = Validator.VAR_TLS_CLIENT;</span><a href="#l17.306"></a>
<span id="l17.307" class="minusline">-                } else if (usage.compareToIgnoreCase(&quot;SignedJAR&quot;) == 0) {</span><a href="#l17.307"></a>
<span id="l17.308" class="minusline">-                    v = Validator.VAR_PLUGIN_CODE_SIGNING;</span><a href="#l17.308"></a>
<span id="l17.309" class="plusline">+                boolean match = false;</span><a href="#l17.309"></a>
<span id="l17.310" class="plusline">+                switch (usage.toLowerCase()) {</span><a href="#l17.310"></a>
<span id="l17.311" class="plusline">+                    case &quot;tlsserver&quot;:</span><a href="#l17.311"></a>
<span id="l17.312" class="plusline">+                        match = variant.equals(Validator.VAR_TLS_SERVER);</span><a href="#l17.312"></a>
<span id="l17.313" class="plusline">+                        break;</span><a href="#l17.313"></a>
<span id="l17.314" class="plusline">+                    case &quot;tlsclient&quot;:</span><a href="#l17.314"></a>
<span id="l17.315" class="plusline">+                        match = variant.equals(Validator.VAR_TLS_CLIENT);</span><a href="#l17.315"></a>
<span id="l17.316" class="plusline">+                        break;</span><a href="#l17.316"></a>
<span id="l17.317" class="plusline">+                    case &quot;signedjar&quot;:</span><a href="#l17.317"></a>
<span id="l17.318" class="plusline">+                        match =</span><a href="#l17.318"></a>
<span id="l17.319" class="plusline">+                            variant.equals(Validator.VAR_PLUGIN_CODE_SIGNING) ||</span><a href="#l17.319"></a>
<span id="l17.320" class="plusline">+                            variant.equals(Validator.VAR_CODE_SIGNING) ||</span><a href="#l17.320"></a>
<span id="l17.321" class="plusline">+                            variant.equals(Validator.VAR_TSA_SERVER);</span><a href="#l17.321"></a>
<span id="l17.322" class="plusline">+                        break;</span><a href="#l17.322"></a>
<span id="l17.323">                 }</span><a href="#l17.323"></a>
<span id="l17.324"> </span><a href="#l17.324"></a>
<span id="l17.325">                 if (debug != null) {</span><a href="#l17.325"></a>
<span id="l17.326" class="minusline">-                    debug.println(&quot;Checking if usage constraint \&quot;&quot; + v +</span><a href="#l17.326"></a>
<span id="l17.327" class="plusline">+                    debug.println(&quot;Checking if usage constraint \&quot;&quot; + usage +</span><a href="#l17.327"></a>
<span id="l17.328">                             &quot;\&quot; matches \&quot;&quot; + cp.getVariant() + &quot;\&quot;&quot;);</span><a href="#l17.328"></a>
<span id="l17.329">                     if (Debug.isVerbose()) {</span><a href="#l17.329"></a>
<span id="l17.330">                         // Because usage checking can come from many places</span><a href="#l17.330"></a>
<span id="l17.331" class="atline">@@ -775,13 +815,13 @@</span><a href="#l17.331"></a>
<span id="l17.332">                         (new Exception()).printStackTrace(debug.getPrintStream());</span><a href="#l17.332"></a>
<span id="l17.333">                     }</span><a href="#l17.333"></a>
<span id="l17.334">                 }</span><a href="#l17.334"></a>
<span id="l17.335" class="minusline">-                if (cp.getVariant().compareTo(v) == 0) {</span><a href="#l17.335"></a>
<span id="l17.336" class="plusline">+                if (match) {</span><a href="#l17.336"></a>
<span id="l17.337">                     if (next(cp)) {</span><a href="#l17.337"></a>
<span id="l17.338">                         return;</span><a href="#l17.338"></a>
<span id="l17.339">                     }</span><a href="#l17.339"></a>
<span id="l17.340">                     throw new CertPathValidatorException(&quot;Usage constraint &quot; +</span><a href="#l17.340"></a>
<span id="l17.341">                             usage + &quot; check failed: &quot; + algorithm +</span><a href="#l17.341"></a>
<span id="l17.342" class="minusline">-                            extendedMsg(cp),</span><a href="#l17.342"></a>
<span id="l17.343" class="plusline">+                            cp.extendedExceptionMsg(),</span><a href="#l17.343"></a>
<span id="l17.344">                             null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);</span><a href="#l17.344"></a>
<span id="l17.345">                 }</span><a href="#l17.345"></a>
<span id="l17.346">             }</span><a href="#l17.346"></a>
<span id="l17.347" class="atline">@@ -834,31 +874,25 @@</span><a href="#l17.347"></a>
<span id="l17.348">         }</span><a href="#l17.348"></a>
<span id="l17.349"> </span><a href="#l17.349"></a>
<span id="l17.350">         /*</span><a href="#l17.350"></a>
<span id="l17.351" class="minusline">-         * If we are passed a certificate, extract the public key and use it.</span><a href="#l17.351"></a>
<span id="l17.352" class="minusline">-         *</span><a href="#l17.352"></a>
<span id="l17.353" class="minusline">-         * Check if each constraint fails and check if there is a linked</span><a href="#l17.353"></a>
<span id="l17.354" class="minusline">-         * constraint  Any permitted constraint will exit the linked list</span><a href="#l17.354"></a>
<span id="l17.355" class="minusline">-         * to allow the operation.</span><a href="#l17.355"></a>
<span id="l17.356" class="plusline">+         * For each key, check if each constraint fails and check if there is</span><a href="#l17.356"></a>
<span id="l17.357" class="plusline">+         * a linked constraint. Any permitted constraint will exit the linked</span><a href="#l17.357"></a>
<span id="l17.358" class="plusline">+         * list to allow the operation.</span><a href="#l17.358"></a>
<span id="l17.359">          */</span><a href="#l17.359"></a>
<span id="l17.360">         @Override</span><a href="#l17.360"></a>
<span id="l17.361">         public void permits(ConstraintsParameters cp)</span><a href="#l17.361"></a>
<span id="l17.362">                 throws CertPathValidatorException {</span><a href="#l17.362"></a>
<span id="l17.363" class="minusline">-            Key key = null;</span><a href="#l17.363"></a>
<span id="l17.364" class="minusline">-            if (cp.getKey() != null) {</span><a href="#l17.364"></a>
<span id="l17.365" class="minusline">-                key = cp.getKey();</span><a href="#l17.365"></a>
<span id="l17.366" class="minusline">-            } else if (cp.getCertificate() != null) {</span><a href="#l17.366"></a>
<span id="l17.367" class="minusline">-                key = cp.getCertificate().getPublicKey();</span><a href="#l17.367"></a>
<span id="l17.368" class="minusline">-            }</span><a href="#l17.368"></a>
<span id="l17.369" class="minusline">-            if (key != null &amp;&amp; !permitsImpl(key)) {</span><a href="#l17.369"></a>
<span id="l17.370" class="minusline">-                if (nextConstraint != null) {</span><a href="#l17.370"></a>
<span id="l17.371" class="minusline">-                    nextConstraint.permits(cp);</span><a href="#l17.371"></a>
<span id="l17.372" class="minusline">-                    return;</span><a href="#l17.372"></a>
<span id="l17.373" class="plusline">+            for (Key key : cp.getKeys()) {</span><a href="#l17.373"></a>
<span id="l17.374" class="plusline">+                if (!permitsImpl(key)) {</span><a href="#l17.374"></a>
<span id="l17.375" class="plusline">+                    if (nextConstraint != null) {</span><a href="#l17.375"></a>
<span id="l17.376" class="plusline">+                        nextConstraint.permits(cp);</span><a href="#l17.376"></a>
<span id="l17.377" class="plusline">+                        continue;</span><a href="#l17.377"></a>
<span id="l17.378" class="plusline">+                    }</span><a href="#l17.378"></a>
<span id="l17.379" class="plusline">+                    throw new CertPathValidatorException(</span><a href="#l17.379"></a>
<span id="l17.380" class="plusline">+                        &quot;Algorithm constraints check failed on keysize limits: &quot; +</span><a href="#l17.380"></a>
<span id="l17.381" class="plusline">+                        algorithm + &quot; &quot; + KeyUtil.getKeySize(key) + &quot; bit key&quot; +</span><a href="#l17.381"></a>
<span id="l17.382" class="plusline">+                        cp.extendedExceptionMsg(),</span><a href="#l17.382"></a>
<span id="l17.383" class="plusline">+                        null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);</span><a href="#l17.383"></a>
<span id="l17.384">                 }</span><a href="#l17.384"></a>
<span id="l17.385" class="minusline">-                throw new CertPathValidatorException(</span><a href="#l17.385"></a>
<span id="l17.386" class="minusline">-                        &quot;Algorithm constraints check failed on keysize limits. &quot; +</span><a href="#l17.386"></a>
<span id="l17.387" class="minusline">-                        algorithm + &quot; &quot; + KeyUtil.getKeySize(key) + &quot;bit key&quot; +</span><a href="#l17.387"></a>
<span id="l17.388" class="minusline">-                        extendedMsg(cp),</span><a href="#l17.388"></a>
<span id="l17.389" class="minusline">-                        null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);</span><a href="#l17.389"></a>
<span id="l17.390">             }</span><a href="#l17.390"></a>
<span id="l17.391">         }</span><a href="#l17.391"></a>
<span id="l17.392"> </span><a href="#l17.392"></a>
<span id="l17.393" class="atline">@@ -935,7 +969,7 @@</span><a href="#l17.393"></a>
<span id="l17.394">                 throws CertPathValidatorException {</span><a href="#l17.394"></a>
<span id="l17.395">             throw new CertPathValidatorException(</span><a href="#l17.395"></a>
<span id="l17.396">                     &quot;Algorithm constraints check failed on disabled &quot; +</span><a href="#l17.396"></a>
<span id="l17.397" class="minusline">-                            &quot;algorithm: &quot; + algorithm + extendedMsg(cp),</span><a href="#l17.397"></a>
<span id="l17.398" class="plusline">+                            &quot;algorithm: &quot; + algorithm + cp.extendedExceptionMsg(),</span><a href="#l17.398"></a>
<span id="l17.399">                     null, null, -1, BasicReason.ALGORITHM_CONSTRAINED);</span><a href="#l17.399"></a>
<span id="l17.400">         }</span><a href="#l17.400"></a>
<span id="l17.401"> </span><a href="#l17.401"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l18.1" class="minusline">--- /dev/null	Thu Jan 01 00:00:00 1970 +0000</span><a href="#l18.1"></a>
<span id="l18.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/util/JarConstraintsParameters.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l18.2"></a>
<span id="l18.3" class="atline">@@ -0,0 +1,188 @@</span><a href="#l18.3"></a>
<span id="l18.4" class="plusline">+/*</span><a href="#l18.4"></a>
<span id="l18.5" class="plusline">+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l18.5"></a>
<span id="l18.6" class="plusline">+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l18.6"></a>
<span id="l18.7" class="plusline">+ *</span><a href="#l18.7"></a>
<span id="l18.8" class="plusline">+ * This code is free software; you can redistribute it and/or modify it</span><a href="#l18.8"></a>
<span id="l18.9" class="plusline">+ * under the terms of the GNU General Public License version 2 only, as</span><a href="#l18.9"></a>
<span id="l18.10" class="plusline">+ * published by the Free Software Foundation.  Oracle designates this</span><a href="#l18.10"></a>
<span id="l18.11" class="plusline">+ * particular file as subject to the &quot;Classpath&quot; exception as provided</span><a href="#l18.11"></a>
<span id="l18.12" class="plusline">+ * by Oracle in the LICENSE file that accompanied this code.</span><a href="#l18.12"></a>
<span id="l18.13" class="plusline">+ *</span><a href="#l18.13"></a>
<span id="l18.14" class="plusline">+ * This code is distributed in the hope that it will be useful, but WITHOUT</span><a href="#l18.14"></a>
<span id="l18.15" class="plusline">+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span><a href="#l18.15"></a>
<span id="l18.16" class="plusline">+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span><a href="#l18.16"></a>
<span id="l18.17" class="plusline">+ * version 2 for more details (a copy is included in the LICENSE file that</span><a href="#l18.17"></a>
<span id="l18.18" class="plusline">+ * accompanied this code).</span><a href="#l18.18"></a>
<span id="l18.19" class="plusline">+ *</span><a href="#l18.19"></a>
<span id="l18.20" class="plusline">+ * You should have received a copy of the GNU General Public License version</span><a href="#l18.20"></a>
<span id="l18.21" class="plusline">+ * 2 along with this work; if not, write to the Free Software Foundation,</span><a href="#l18.21"></a>
<span id="l18.22" class="plusline">+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span><a href="#l18.22"></a>
<span id="l18.23" class="plusline">+ *</span><a href="#l18.23"></a>
<span id="l18.24" class="plusline">+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span><a href="#l18.24"></a>
<span id="l18.25" class="plusline">+ * or visit www.oracle.com if you need additional information or have any</span><a href="#l18.25"></a>
<span id="l18.26" class="plusline">+ * questions.</span><a href="#l18.26"></a>
<span id="l18.27" class="plusline">+ */</span><a href="#l18.27"></a>
<span id="l18.28" class="plusline">+</span><a href="#l18.28"></a>
<span id="l18.29" class="plusline">+package sun.security.util;</span><a href="#l18.29"></a>
<span id="l18.30" class="plusline">+</span><a href="#l18.30"></a>
<span id="l18.31" class="plusline">+import java.security.CodeSigner;</span><a href="#l18.31"></a>
<span id="l18.32" class="plusline">+import java.security.Key;</span><a href="#l18.32"></a>
<span id="l18.33" class="plusline">+import java.security.Timestamp;</span><a href="#l18.33"></a>
<span id="l18.34" class="plusline">+import java.security.cert.CertPath;</span><a href="#l18.34"></a>
<span id="l18.35" class="plusline">+import java.security.cert.X509Certificate;</span><a href="#l18.35"></a>
<span id="l18.36" class="plusline">+import java.util.Date;</span><a href="#l18.36"></a>
<span id="l18.37" class="plusline">+import java.util.HashSet;</span><a href="#l18.37"></a>
<span id="l18.38" class="plusline">+import java.util.List;</span><a href="#l18.38"></a>
<span id="l18.39" class="plusline">+import java.util.Set;</span><a href="#l18.39"></a>
<span id="l18.40" class="plusline">+import sun.security.util.AnchorCertificates;</span><a href="#l18.40"></a>
<span id="l18.41" class="plusline">+import sun.security.util.ConstraintsParameters;</span><a href="#l18.41"></a>
<span id="l18.42" class="plusline">+import sun.security.validator.Validator;</span><a href="#l18.42"></a>
<span id="l18.43" class="plusline">+</span><a href="#l18.43"></a>
<span id="l18.44" class="plusline">+/**</span><a href="#l18.44"></a>
<span id="l18.45" class="plusline">+ * This class contains parameters for checking signed JARs against</span><a href="#l18.45"></a>
<span id="l18.46" class="plusline">+ * constraints specified in the jdk.jar.disabledAlgorithms security</span><a href="#l18.46"></a>
<span id="l18.47" class="plusline">+ * property.</span><a href="#l18.47"></a>
<span id="l18.48" class="plusline">+ */</span><a href="#l18.48"></a>
<span id="l18.49" class="plusline">+public class JarConstraintsParameters implements ConstraintsParameters {</span><a href="#l18.49"></a>
<span id="l18.50" class="plusline">+</span><a href="#l18.50"></a>
<span id="l18.51" class="plusline">+    // true if chain is anchored by a JDK root CA</span><a href="#l18.51"></a>
<span id="l18.52" class="plusline">+    private boolean anchorIsJdkCA;</span><a href="#l18.52"></a>
<span id="l18.53" class="plusline">+    private boolean anchorIsJdkCASet;</span><a href="#l18.53"></a>
<span id="l18.54" class="plusline">+    // The timestamp of the signed JAR file, if timestamped</span><a href="#l18.54"></a>
<span id="l18.55" class="plusline">+    private Date timestamp;</span><a href="#l18.55"></a>
<span id="l18.56" class="plusline">+    // The keys of the signers</span><a href="#l18.56"></a>
<span id="l18.57" class="plusline">+    private final Set&lt;Key&gt; keys;</span><a href="#l18.57"></a>
<span id="l18.58" class="plusline">+    // The certs in the signers' chains that are issued by the trust anchor</span><a href="#l18.58"></a>
<span id="l18.59" class="plusline">+    private final Set&lt;X509Certificate&gt; certsIssuedByAnchor;</span><a href="#l18.59"></a>
<span id="l18.60" class="plusline">+    // The extended exception message</span><a href="#l18.60"></a>
<span id="l18.61" class="plusline">+    private String message;</span><a href="#l18.61"></a>
<span id="l18.62" class="plusline">+</span><a href="#l18.62"></a>
<span id="l18.63" class="plusline">+    /**</span><a href="#l18.63"></a>
<span id="l18.64" class="plusline">+     * Create a JarConstraintsParameters.</span><a href="#l18.64"></a>
<span id="l18.65" class="plusline">+     *</span><a href="#l18.65"></a>
<span id="l18.66" class="plusline">+     * @param signers the CodeSigners that signed the JAR</span><a href="#l18.66"></a>
<span id="l18.67" class="plusline">+     */</span><a href="#l18.67"></a>
<span id="l18.68" class="plusline">+    public JarConstraintsParameters(CodeSigner[] signers) {</span><a href="#l18.68"></a>
<span id="l18.69" class="plusline">+        this.keys = new HashSet&lt;&gt;();</span><a href="#l18.69"></a>
<span id="l18.70" class="plusline">+        this.certsIssuedByAnchor = new HashSet&lt;&gt;();</span><a href="#l18.70"></a>
<span id="l18.71" class="plusline">+        Date latestTimestamp = null;</span><a href="#l18.71"></a>
<span id="l18.72" class="plusline">+        boolean skipTimestamp = false;</span><a href="#l18.72"></a>
<span id="l18.73" class="plusline">+</span><a href="#l18.73"></a>
<span id="l18.74" class="plusline">+        // Iterate over the signers and extract the keys, the latest</span><a href="#l18.74"></a>
<span id="l18.75" class="plusline">+        // timestamp, and the last certificate of each chain which can be</span><a href="#l18.75"></a>
<span id="l18.76" class="plusline">+        // used for checking if the signer's certificate chains back to a</span><a href="#l18.76"></a>
<span id="l18.77" class="plusline">+        // JDK root CA</span><a href="#l18.77"></a>
<span id="l18.78" class="plusline">+        for (CodeSigner signer : signers) {</span><a href="#l18.78"></a>
<span id="l18.79" class="plusline">+            init(signer.getSignerCertPath());</span><a href="#l18.79"></a>
<span id="l18.80" class="plusline">+            Timestamp timestamp = signer.getTimestamp();</span><a href="#l18.80"></a>
<span id="l18.81" class="plusline">+            if (timestamp == null) {</span><a href="#l18.81"></a>
<span id="l18.82" class="plusline">+                // this means one of the signers doesn't have a timestamp</span><a href="#l18.82"></a>
<span id="l18.83" class="plusline">+                // and the JAR should be treated as if it isn't timestamped</span><a href="#l18.83"></a>
<span id="l18.84" class="plusline">+                latestTimestamp = null;</span><a href="#l18.84"></a>
<span id="l18.85" class="plusline">+                skipTimestamp = true;</span><a href="#l18.85"></a>
<span id="l18.86" class="plusline">+            } else {</span><a href="#l18.86"></a>
<span id="l18.87" class="plusline">+                // add the key and last cert of TSA too</span><a href="#l18.87"></a>
<span id="l18.88" class="plusline">+                init(timestamp.getSignerCertPath());</span><a href="#l18.88"></a>
<span id="l18.89" class="plusline">+                if (!skipTimestamp) {</span><a href="#l18.89"></a>
<span id="l18.90" class="plusline">+                    Date timestampDate = timestamp.getTimestamp();</span><a href="#l18.90"></a>
<span id="l18.91" class="plusline">+                    if (latestTimestamp == null) {</span><a href="#l18.91"></a>
<span id="l18.92" class="plusline">+                        latestTimestamp = timestampDate;</span><a href="#l18.92"></a>
<span id="l18.93" class="plusline">+                    } else {</span><a href="#l18.93"></a>
<span id="l18.94" class="plusline">+                        if (latestTimestamp.before(timestampDate)) {</span><a href="#l18.94"></a>
<span id="l18.95" class="plusline">+                            latestTimestamp = timestampDate;</span><a href="#l18.95"></a>
<span id="l18.96" class="plusline">+                        }</span><a href="#l18.96"></a>
<span id="l18.97" class="plusline">+                    }</span><a href="#l18.97"></a>
<span id="l18.98" class="plusline">+                }</span><a href="#l18.98"></a>
<span id="l18.99" class="plusline">+            }</span><a href="#l18.99"></a>
<span id="l18.100" class="plusline">+        }</span><a href="#l18.100"></a>
<span id="l18.101" class="plusline">+        this.timestamp = latestTimestamp;</span><a href="#l18.101"></a>
<span id="l18.102" class="plusline">+    }</span><a href="#l18.102"></a>
<span id="l18.103" class="plusline">+</span><a href="#l18.103"></a>
<span id="l18.104" class="plusline">+    // extract last certificate and key from chain</span><a href="#l18.104"></a>
<span id="l18.105" class="plusline">+    private void init(CertPath cp) {</span><a href="#l18.105"></a>
<span id="l18.106" class="plusline">+        @SuppressWarnings(&quot;unchecked&quot;)</span><a href="#l18.106"></a>
<span id="l18.107" class="plusline">+        List&lt;X509Certificate&gt; chain =</span><a href="#l18.107"></a>
<span id="l18.108" class="plusline">+            (List&lt;X509Certificate&gt;)cp.getCertificates();</span><a href="#l18.108"></a>
<span id="l18.109" class="plusline">+        if (!chain.isEmpty()) {</span><a href="#l18.109"></a>
<span id="l18.110" class="plusline">+            this.certsIssuedByAnchor.add(chain.get(chain.size() - 1));</span><a href="#l18.110"></a>
<span id="l18.111" class="plusline">+            this.keys.add(chain.get(0).getPublicKey());</span><a href="#l18.111"></a>
<span id="l18.112" class="plusline">+        }</span><a href="#l18.112"></a>
<span id="l18.113" class="plusline">+    }</span><a href="#l18.113"></a>
<span id="l18.114" class="plusline">+</span><a href="#l18.114"></a>
<span id="l18.115" class="plusline">+    @Override</span><a href="#l18.115"></a>
<span id="l18.116" class="plusline">+    public String getVariant() {</span><a href="#l18.116"></a>
<span id="l18.117" class="plusline">+        return Validator.VAR_GENERIC;</span><a href="#l18.117"></a>
<span id="l18.118" class="plusline">+    }</span><a href="#l18.118"></a>
<span id="l18.119" class="plusline">+</span><a href="#l18.119"></a>
<span id="l18.120" class="plusline">+    /**</span><a href="#l18.120"></a>
<span id="l18.121" class="plusline">+     * Since loading the cacerts keystore can be an expensive operation,</span><a href="#l18.121"></a>
<span id="l18.122" class="plusline">+     * this is only performed if this method is called during a &quot;jdkCA&quot;</span><a href="#l18.122"></a>
<span id="l18.123" class="plusline">+     * constraints check of a disabled algorithm, and the result is cached.</span><a href="#l18.123"></a>
<span id="l18.124" class="plusline">+     *</span><a href="#l18.124"></a>
<span id="l18.125" class="plusline">+     * @return true if at least one of the certificates are issued by a</span><a href="#l18.125"></a>
<span id="l18.126" class="plusline">+     *              JDK root CA</span><a href="#l18.126"></a>
<span id="l18.127" class="plusline">+     */</span><a href="#l18.127"></a>
<span id="l18.128" class="plusline">+    @Override</span><a href="#l18.128"></a>
<span id="l18.129" class="plusline">+    public boolean anchorIsJdkCA() {</span><a href="#l18.129"></a>
<span id="l18.130" class="plusline">+        if (anchorIsJdkCASet) {</span><a href="#l18.130"></a>
<span id="l18.131" class="plusline">+            return anchorIsJdkCA;</span><a href="#l18.131"></a>
<span id="l18.132" class="plusline">+        }</span><a href="#l18.132"></a>
<span id="l18.133" class="plusline">+        for (X509Certificate cert : certsIssuedByAnchor) {</span><a href="#l18.133"></a>
<span id="l18.134" class="plusline">+            if (AnchorCertificates.issuerOf(cert)) {</span><a href="#l18.134"></a>
<span id="l18.135" class="plusline">+                anchorIsJdkCA = true;</span><a href="#l18.135"></a>
<span id="l18.136" class="plusline">+                break;</span><a href="#l18.136"></a>
<span id="l18.137" class="plusline">+            }</span><a href="#l18.137"></a>
<span id="l18.138" class="plusline">+        }</span><a href="#l18.138"></a>
<span id="l18.139" class="plusline">+        anchorIsJdkCASet = true;</span><a href="#l18.139"></a>
<span id="l18.140" class="plusline">+        return anchorIsJdkCA;</span><a href="#l18.140"></a>
<span id="l18.141" class="plusline">+    }</span><a href="#l18.141"></a>
<span id="l18.142" class="plusline">+</span><a href="#l18.142"></a>
<span id="l18.143" class="plusline">+    @Override</span><a href="#l18.143"></a>
<span id="l18.144" class="plusline">+    public Date getDate() {</span><a href="#l18.144"></a>
<span id="l18.145" class="plusline">+        return timestamp;</span><a href="#l18.145"></a>
<span id="l18.146" class="plusline">+    }</span><a href="#l18.146"></a>
<span id="l18.147" class="plusline">+</span><a href="#l18.147"></a>
<span id="l18.148" class="plusline">+    @Override</span><a href="#l18.148"></a>
<span id="l18.149" class="plusline">+    public Set&lt;Key&gt; getKeys() {</span><a href="#l18.149"></a>
<span id="l18.150" class="plusline">+        return keys;</span><a href="#l18.150"></a>
<span id="l18.151" class="plusline">+    }</span><a href="#l18.151"></a>
<span id="l18.152" class="plusline">+</span><a href="#l18.152"></a>
<span id="l18.153" class="plusline">+    /**</span><a href="#l18.153"></a>
<span id="l18.154" class="plusline">+     * Sets the extended error message. Note: this should be used</span><a href="#l18.154"></a>
<span id="l18.155" class="plusline">+     * carefully as it is specific to the attribute/entry/file being checked.</span><a href="#l18.155"></a>
<span id="l18.156" class="plusline">+     *</span><a href="#l18.156"></a>
<span id="l18.157" class="plusline">+     * @param file the name of the signature related file being verified</span><a href="#l18.157"></a>
<span id="l18.158" class="plusline">+     * @param target the attribute containing the algorithm that is being</span><a href="#l18.158"></a>
<span id="l18.159" class="plusline">+     *        checked</span><a href="#l18.159"></a>
<span id="l18.160" class="plusline">+     */</span><a href="#l18.160"></a>
<span id="l18.161" class="plusline">+    public void setExtendedExceptionMsg(String file, String target) {</span><a href="#l18.161"></a>
<span id="l18.162" class="plusline">+        message = &quot; used&quot; + (target != null ? &quot; with &quot; + target : &quot;&quot;) +</span><a href="#l18.162"></a>
<span id="l18.163" class="plusline">+                  &quot; in &quot; + file + &quot; file.&quot;;</span><a href="#l18.163"></a>
<span id="l18.164" class="plusline">+    }</span><a href="#l18.164"></a>
<span id="l18.165" class="plusline">+</span><a href="#l18.165"></a>
<span id="l18.166" class="plusline">+    @Override</span><a href="#l18.166"></a>
<span id="l18.167" class="plusline">+    public String extendedExceptionMsg() {</span><a href="#l18.167"></a>
<span id="l18.168" class="plusline">+        return message;</span><a href="#l18.168"></a>
<span id="l18.169" class="plusline">+    }</span><a href="#l18.169"></a>
<span id="l18.170" class="plusline">+</span><a href="#l18.170"></a>
<span id="l18.171" class="plusline">+    @Override</span><a href="#l18.171"></a>
<span id="l18.172" class="plusline">+    public String toString() {</span><a href="#l18.172"></a>
<span id="l18.173" class="plusline">+        StringBuilder sb = new StringBuilder(&quot;[\n&quot;);</span><a href="#l18.173"></a>
<span id="l18.174" class="plusline">+        sb.append(&quot;\n  Variant: &quot;).append(getVariant());</span><a href="#l18.174"></a>
<span id="l18.175" class="plusline">+        sb.append(&quot;\n  Certs Issued by Anchor:&quot;);</span><a href="#l18.175"></a>
<span id="l18.176" class="plusline">+        for (X509Certificate cert : certsIssuedByAnchor) {</span><a href="#l18.176"></a>
<span id="l18.177" class="plusline">+            sb.append(&quot;\n    Cert Issuer: &quot;)</span><a href="#l18.177"></a>
<span id="l18.178" class="plusline">+              .append(cert.getIssuerX500Principal());</span><a href="#l18.178"></a>
<span id="l18.179" class="plusline">+            sb.append(&quot;\n    Cert Subject: &quot;)</span><a href="#l18.179"></a>
<span id="l18.180" class="plusline">+              .append(cert.getSubjectX500Principal());</span><a href="#l18.180"></a>
<span id="l18.181" class="plusline">+        }</span><a href="#l18.181"></a>
<span id="l18.182" class="plusline">+        for (Key key : keys) {</span><a href="#l18.182"></a>
<span id="l18.183" class="plusline">+            sb.append(&quot;\n  Key: &quot;).append(key.getAlgorithm());</span><a href="#l18.183"></a>
<span id="l18.184" class="plusline">+        }</span><a href="#l18.184"></a>
<span id="l18.185" class="plusline">+        if (timestamp != null) {</span><a href="#l18.185"></a>
<span id="l18.186" class="plusline">+            sb.append(&quot;\n  Timestamp: &quot;).append(timestamp);</span><a href="#l18.186"></a>
<span id="l18.187" class="plusline">+        }</span><a href="#l18.187"></a>
<span id="l18.188" class="plusline">+        sb.append(&quot;\n]&quot;);</span><a href="#l18.188"></a>
<span id="l18.189" class="plusline">+        return sb.toString();</span><a href="#l18.189"></a>
<span id="l18.190" class="plusline">+    }</span><a href="#l18.190"></a>
<span id="l18.191" class="plusline">+}</span><a href="#l18.191"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l19.1" class="minusline">--- a/src/java.base/share/classes/sun/security/util/ManifestEntryVerifier.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l19.1"></a>
<span id="l19.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/util/ManifestEntryVerifier.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l19.2"></a>
<span id="l19.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l19.3"></a>
<span id="l19.4"> /*</span><a href="#l19.4"></a>
<span id="l19.5" class="minusline">- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.</span><a href="#l19.5"></a>
<span id="l19.6" class="plusline">+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l19.6"></a>
<span id="l19.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l19.7"></a>
<span id="l19.8">  *</span><a href="#l19.8"></a>
<span id="l19.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l19.9"></a>
<span id="l19.10" class="atline">@@ -27,13 +27,12 @@</span><a href="#l19.10"></a>
<span id="l19.11"> </span><a href="#l19.11"></a>
<span id="l19.12"> import java.security.*;</span><a href="#l19.12"></a>
<span id="l19.13"> import java.io.*;</span><a href="#l19.13"></a>
<span id="l19.14" class="minusline">-import java.security.CodeSigner;</span><a href="#l19.14"></a>
<span id="l19.15"> import java.util.*;</span><a href="#l19.15"></a>
<span id="l19.16"> import java.util.jar.*;</span><a href="#l19.16"></a>
<span id="l19.17"> </span><a href="#l19.17"></a>
<span id="l19.18" class="minusline">-import java.util.Base64;</span><a href="#l19.18"></a>
<span id="l19.19" class="minusline">-</span><a href="#l19.19"></a>
<span id="l19.20"> import sun.security.jca.Providers;</span><a href="#l19.20"></a>
<span id="l19.21" class="plusline">+import sun.security.util.DisabledAlgorithmConstraints;</span><a href="#l19.21"></a>
<span id="l19.22" class="plusline">+import sun.security.util.JarConstraintsParameters;</span><a href="#l19.22"></a>
<span id="l19.23"> </span><a href="#l19.23"></a>
<span id="l19.24"> /**</span><a href="#l19.24"></a>
<span id="l19.25">  * This class is used to verify each entry in a jar file with its</span><a href="#l19.25"></a>
<span id="l19.26" class="atline">@@ -202,12 +201,29 @@</span><a href="#l19.26"></a>
<span id="l19.27">             throw new SecurityException(&quot;digest missing for &quot; + name);</span><a href="#l19.27"></a>
<span id="l19.28">         }</span><a href="#l19.28"></a>
<span id="l19.29"> </span><a href="#l19.29"></a>
<span id="l19.30" class="minusline">-        if (signers != null)</span><a href="#l19.30"></a>
<span id="l19.31" class="plusline">+        if (signers != null) {</span><a href="#l19.31"></a>
<span id="l19.32">             return signers;</span><a href="#l19.32"></a>
<span id="l19.33" class="plusline">+        }</span><a href="#l19.33"></a>
<span id="l19.34" class="plusline">+</span><a href="#l19.34"></a>
<span id="l19.35" class="plusline">+        JarConstraintsParameters params =</span><a href="#l19.35"></a>
<span id="l19.36" class="plusline">+            getParams(verifiedSigners, sigFileSigners);</span><a href="#l19.36"></a>
<span id="l19.37"> </span><a href="#l19.37"></a>
<span id="l19.38">         for (int i=0; i &lt; digests.size(); i++) {</span><a href="#l19.38"></a>
<span id="l19.39"> </span><a href="#l19.39"></a>
<span id="l19.40" class="minusline">-            MessageDigest digest  = digests.get(i);</span><a href="#l19.40"></a>
<span id="l19.41" class="plusline">+            MessageDigest digest = digests.get(i);</span><a href="#l19.41"></a>
<span id="l19.42" class="plusline">+            if (params != null) {</span><a href="#l19.42"></a>
<span id="l19.43" class="plusline">+                try {</span><a href="#l19.43"></a>
<span id="l19.44" class="plusline">+                    params.setExtendedExceptionMsg(JarFile.MANIFEST_NAME,</span><a href="#l19.44"></a>
<span id="l19.45" class="plusline">+                        name + &quot; entry&quot;);</span><a href="#l19.45"></a>
<span id="l19.46" class="plusline">+                    DisabledAlgorithmConstraints.jarConstraints()</span><a href="#l19.46"></a>
<span id="l19.47" class="plusline">+                           .permits(digest.getAlgorithm(), params);</span><a href="#l19.47"></a>
<span id="l19.48" class="plusline">+                } catch (GeneralSecurityException e) {</span><a href="#l19.48"></a>
<span id="l19.49" class="plusline">+                    if (debug != null) {</span><a href="#l19.49"></a>
<span id="l19.50" class="plusline">+                        debug.println(&quot;Digest algorithm is restricted: &quot; + e);</span><a href="#l19.50"></a>
<span id="l19.51" class="plusline">+                    }</span><a href="#l19.51"></a>
<span id="l19.52" class="plusline">+                    return null;</span><a href="#l19.52"></a>
<span id="l19.53" class="plusline">+                }</span><a href="#l19.53"></a>
<span id="l19.54" class="plusline">+            }</span><a href="#l19.54"></a>
<span id="l19.55">             byte [] manHash = manifestHashes.get(i);</span><a href="#l19.55"></a>
<span id="l19.56">             byte [] theHash = digest.digest();</span><a href="#l19.56"></a>
<span id="l19.57"> </span><a href="#l19.57"></a>
<span id="l19.58" class="atline">@@ -232,6 +248,38 @@</span><a href="#l19.58"></a>
<span id="l19.59">         return signers;</span><a href="#l19.59"></a>
<span id="l19.60">     }</span><a href="#l19.60"></a>
<span id="l19.61"> </span><a href="#l19.61"></a>
<span id="l19.62" class="plusline">+    /**</span><a href="#l19.62"></a>
<span id="l19.63" class="plusline">+     * Get constraints parameters for JAR. The constraints should be</span><a href="#l19.63"></a>
<span id="l19.64" class="plusline">+     * checked against all code signers. Returns the parameters,</span><a href="#l19.64"></a>
<span id="l19.65" class="plusline">+     * or null if the signers for this entry have already been checked.</span><a href="#l19.65"></a>
<span id="l19.66" class="plusline">+     */</span><a href="#l19.66"></a>
<span id="l19.67" class="plusline">+    private JarConstraintsParameters getParams(</span><a href="#l19.67"></a>
<span id="l19.68" class="plusline">+            Map&lt;String, CodeSigner[]&gt; verifiedSigners,</span><a href="#l19.68"></a>
<span id="l19.69" class="plusline">+            Map&lt;String, CodeSigner[]&gt; sigFileSigners) {</span><a href="#l19.69"></a>
<span id="l19.70" class="plusline">+</span><a href="#l19.70"></a>
<span id="l19.71" class="plusline">+        // verifiedSigners is usually preloaded with the Manifest's signers.</span><a href="#l19.71"></a>
<span id="l19.72" class="plusline">+        // If verifiedSigners contains the Manifest, then it will have all of</span><a href="#l19.72"></a>
<span id="l19.73" class="plusline">+        // the signers of the JAR. But if it doesn't then we need to fallback</span><a href="#l19.73"></a>
<span id="l19.74" class="plusline">+        // and check verifiedSigners to see if the signers of this entry have</span><a href="#l19.74"></a>
<span id="l19.75" class="plusline">+        // been checked already.</span><a href="#l19.75"></a>
<span id="l19.76" class="plusline">+        if (verifiedSigners.containsKey(JarFile.MANIFEST_NAME)) {</span><a href="#l19.76"></a>
<span id="l19.77" class="plusline">+            if (verifiedSigners.size() &gt; 1) {</span><a href="#l19.77"></a>
<span id="l19.78" class="plusline">+                // this means we already checked it previously</span><a href="#l19.78"></a>
<span id="l19.79" class="plusline">+                return null;</span><a href="#l19.79"></a>
<span id="l19.80" class="plusline">+            } else {</span><a href="#l19.80"></a>
<span id="l19.81" class="plusline">+                return new JarConstraintsParameters(</span><a href="#l19.81"></a>
<span id="l19.82" class="plusline">+                    verifiedSigners.get(JarFile.MANIFEST_NAME));</span><a href="#l19.82"></a>
<span id="l19.83" class="plusline">+            }</span><a href="#l19.83"></a>
<span id="l19.84" class="plusline">+        } else {</span><a href="#l19.84"></a>
<span id="l19.85" class="plusline">+            CodeSigner[] signers = sigFileSigners.get(name);</span><a href="#l19.85"></a>
<span id="l19.86" class="plusline">+            if (verifiedSigners.containsValue(signers)) {</span><a href="#l19.86"></a>
<span id="l19.87" class="plusline">+                return null;</span><a href="#l19.87"></a>
<span id="l19.88" class="plusline">+            } else {</span><a href="#l19.88"></a>
<span id="l19.89" class="plusline">+                return new JarConstraintsParameters(signers);</span><a href="#l19.89"></a>
<span id="l19.90" class="plusline">+            }</span><a href="#l19.90"></a>
<span id="l19.91" class="plusline">+        }</span><a href="#l19.91"></a>
<span id="l19.92" class="plusline">+    }</span><a href="#l19.92"></a>
<span id="l19.93" class="plusline">+</span><a href="#l19.93"></a>
<span id="l19.94">     // for the toHex function</span><a href="#l19.94"></a>
<span id="l19.95">     private static final char[] hexc =</span><a href="#l19.95"></a>
<span id="l19.96">             {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};</span><a href="#l19.96"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l20.1" class="minusline">--- a/src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l20.1"></a>
<span id="l20.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/util/SignatureFileVerifier.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l20.2"></a>
<span id="l20.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l20.3"></a>
<span id="l20.4"> /*</span><a href="#l20.4"></a>
<span id="l20.5" class="minusline">- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.</span><a href="#l20.5"></a>
<span id="l20.6" class="plusline">+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.</span><a href="#l20.6"></a>
<span id="l20.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l20.7"></a>
<span id="l20.8">  *</span><a href="#l20.8"></a>
<span id="l20.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l20.9"></a>
<span id="l20.10" class="atline">@@ -32,7 +32,6 @@</span><a href="#l20.10"></a>
<span id="l20.11"> import java.security.MessageDigest;</span><a href="#l20.11"></a>
<span id="l20.12"> import java.security.NoSuchAlgorithmException;</span><a href="#l20.12"></a>
<span id="l20.13"> import java.security.SignatureException;</span><a href="#l20.13"></a>
<span id="l20.14" class="minusline">-import java.security.Timestamp;</span><a href="#l20.14"></a>
<span id="l20.15"> import java.security.cert.CertPath;</span><a href="#l20.15"></a>
<span id="l20.16"> import java.security.cert.X509Certificate;</span><a href="#l20.16"></a>
<span id="l20.17"> import java.security.cert.CertificateException;</span><a href="#l20.17"></a>
<span id="l20.18" class="atline">@@ -45,6 +44,7 @@</span><a href="#l20.18"></a>
<span id="l20.19"> import java.util.List;</span><a href="#l20.19"></a>
<span id="l20.20"> import java.util.Locale;</span><a href="#l20.20"></a>
<span id="l20.21"> import java.util.Map;</span><a href="#l20.21"></a>
<span id="l20.22" class="plusline">+import java.util.Set;</span><a href="#l20.22"></a>
<span id="l20.23"> import java.util.jar.Attributes;</span><a href="#l20.23"></a>
<span id="l20.24"> import java.util.jar.JarException;</span><a href="#l20.24"></a>
<span id="l20.25"> import java.util.jar.JarFile;</span><a href="#l20.25"></a>
<span id="l20.26" class="atline">@@ -59,16 +59,6 @@</span><a href="#l20.26"></a>
<span id="l20.27">     /* Are we debugging ? */</span><a href="#l20.27"></a>
<span id="l20.28">     private static final Debug debug = Debug.getInstance(&quot;jar&quot;);</span><a href="#l20.28"></a>
<span id="l20.29"> </span><a href="#l20.29"></a>
<span id="l20.30" class="minusline">-    /**</span><a href="#l20.30"></a>
<span id="l20.31" class="minusline">-     * Holder class to delay initialization of DisabledAlgorithmConstraints</span><a href="#l20.31"></a>
<span id="l20.32" class="minusline">-     * until needed.</span><a href="#l20.32"></a>
<span id="l20.33" class="minusline">-     */</span><a href="#l20.33"></a>
<span id="l20.34" class="minusline">-    private static class ConfigurationHolder {</span><a href="#l20.34"></a>
<span id="l20.35" class="minusline">-        static final DisabledAlgorithmConstraints JAR_DISABLED_CHECK =</span><a href="#l20.35"></a>
<span id="l20.36" class="minusline">-            new DisabledAlgorithmConstraints(</span><a href="#l20.36"></a>
<span id="l20.37" class="minusline">-                    DisabledAlgorithmConstraints.PROPERTY_JAR_DISABLED_ALGS);</span><a href="#l20.37"></a>
<span id="l20.38" class="minusline">-    }</span><a href="#l20.38"></a>
<span id="l20.39" class="minusline">-</span><a href="#l20.39"></a>
<span id="l20.40">     private ArrayList&lt;CodeSigner[]&gt; signerCache;</span><a href="#l20.40"></a>
<span id="l20.41"> </span><a href="#l20.41"></a>
<span id="l20.42">     private static final String ATTR_DIGEST =</span><a href="#l20.42"></a>
<span id="l20.43" class="atline">@@ -98,13 +88,13 @@</span><a href="#l20.43"></a>
<span id="l20.44">     /* for generating certpath objects */</span><a href="#l20.44"></a>
<span id="l20.45">     private CertificateFactory certificateFactory = null;</span><a href="#l20.45"></a>
<span id="l20.46"> </span><a href="#l20.46"></a>
<span id="l20.47" class="minusline">-    /** Algorithms that have been checked if they are weak. */</span><a href="#l20.47"></a>
<span id="l20.48" class="minusline">-    private Map&lt;String, Boolean&gt; permittedAlgs= new HashMap&lt;&gt;();</span><a href="#l20.48"></a>
<span id="l20.49" class="plusline">+    /** Algorithms that have been previously checked against disabled</span><a href="#l20.49"></a>
<span id="l20.50" class="plusline">+     *  constraints.</span><a href="#l20.50"></a>
<span id="l20.51" class="plusline">+     */</span><a href="#l20.51"></a>
<span id="l20.52" class="plusline">+    private Map&lt;String, Boolean&gt; permittedAlgs = new HashMap&lt;&gt;();</span><a href="#l20.52"></a>
<span id="l20.53"> </span><a href="#l20.53"></a>
<span id="l20.54" class="minusline">-    /** TSA timestamp of signed jar.  The newest timestamp is used.  If there</span><a href="#l20.54"></a>
<span id="l20.55" class="minusline">-     *  was no TSA timestamp used when signed, current time is used (&quot;null&quot;).</span><a href="#l20.55"></a>
<span id="l20.56" class="minusline">-     */</span><a href="#l20.56"></a>
<span id="l20.57" class="minusline">-    private Timestamp timestamp = null;</span><a href="#l20.57"></a>
<span id="l20.58" class="plusline">+    /** ConstraintsParameters for checking disabled algorithms */</span><a href="#l20.58"></a>
<span id="l20.59" class="plusline">+    private JarConstraintsParameters params;</span><a href="#l20.59"></a>
<span id="l20.60"> </span><a href="#l20.60"></a>
<span id="l20.61">     /**</span><a href="#l20.61"></a>
<span id="l20.62">      * Create the named SignatureFileVerifier.</span><a href="#l20.62"></a>
<span id="l20.63" class="atline">@@ -297,32 +287,23 @@</span><a href="#l20.63"></a>
<span id="l20.64">                                         name);</span><a href="#l20.64"></a>
<span id="l20.65">         }</span><a href="#l20.65"></a>
<span id="l20.66"> </span><a href="#l20.66"></a>
<span id="l20.67" class="minusline">-</span><a href="#l20.67"></a>
<span id="l20.68">         CodeSigner[] newSigners = getSigners(infos, block);</span><a href="#l20.68"></a>
<span id="l20.69"> </span><a href="#l20.69"></a>
<span id="l20.70">         // make sure we have something to do all this work for...</span><a href="#l20.70"></a>
<span id="l20.71" class="minusline">-        if (newSigners == null)</span><a href="#l20.71"></a>
<span id="l20.72" class="plusline">+        if (newSigners == null) {</span><a href="#l20.72"></a>
<span id="l20.73">             return;</span><a href="#l20.73"></a>
<span id="l20.74" class="plusline">+        }</span><a href="#l20.74"></a>
<span id="l20.75"> </span><a href="#l20.75"></a>
<span id="l20.76" class="minusline">-        /*</span><a href="#l20.76"></a>
<span id="l20.77" class="minusline">-         * Look for the latest timestamp in the signature block.  If an entry</span><a href="#l20.77"></a>
<span id="l20.78" class="minusline">-         * has no timestamp, use current time (aka null).</span><a href="#l20.78"></a>
<span id="l20.79" class="minusline">-         */</span><a href="#l20.79"></a>
<span id="l20.80" class="minusline">-        for (CodeSigner s: newSigners) {</span><a href="#l20.80"></a>
<span id="l20.81" class="minusline">-            if (debug != null) {</span><a href="#l20.81"></a>
<span id="l20.82" class="minusline">-                debug.println(&quot;Gathering timestamp for:  &quot; + s.toString());</span><a href="#l20.82"></a>
<span id="l20.83" class="minusline">-            }</span><a href="#l20.83"></a>
<span id="l20.84" class="minusline">-            if (s.getTimestamp() == null) {</span><a href="#l20.84"></a>
<span id="l20.85" class="minusline">-                timestamp = null;</span><a href="#l20.85"></a>
<span id="l20.86" class="minusline">-                break;</span><a href="#l20.86"></a>
<span id="l20.87" class="minusline">-            } else if (timestamp == null) {</span><a href="#l20.87"></a>
<span id="l20.88" class="minusline">-                timestamp = s.getTimestamp();</span><a href="#l20.88"></a>
<span id="l20.89" class="minusline">-            } else {</span><a href="#l20.89"></a>
<span id="l20.90" class="minusline">-                if (timestamp.getTimestamp().before(</span><a href="#l20.90"></a>
<span id="l20.91" class="minusline">-                        s.getTimestamp().getTimestamp())) {</span><a href="#l20.91"></a>
<span id="l20.92" class="minusline">-                    timestamp = s.getTimestamp();</span><a href="#l20.92"></a>
<span id="l20.93" class="minusline">-                }</span><a href="#l20.93"></a>
<span id="l20.94" class="minusline">-            }</span><a href="#l20.94"></a>
<span id="l20.95" class="plusline">+        // check if any of the algorithms used to verify the SignerInfos</span><a href="#l20.95"></a>
<span id="l20.96" class="plusline">+        // are disabled</span><a href="#l20.96"></a>
<span id="l20.97" class="plusline">+        params = new JarConstraintsParameters(newSigners);</span><a href="#l20.97"></a>
<span id="l20.98" class="plusline">+        Set&lt;String&gt; notDisabledAlgorithms =</span><a href="#l20.98"></a>
<span id="l20.99" class="plusline">+            SignerInfo.verifyAlgorithms(infos, params, name + &quot; PKCS7&quot;);</span><a href="#l20.99"></a>
<span id="l20.100" class="plusline">+</span><a href="#l20.100"></a>
<span id="l20.101" class="plusline">+        // add the SignerInfo algorithms that are ok to the permittedAlgs map</span><a href="#l20.101"></a>
<span id="l20.102" class="plusline">+        // so they are not checked again</span><a href="#l20.102"></a>
<span id="l20.103" class="plusline">+        for (String algorithm : notDisabledAlgorithms) {</span><a href="#l20.103"></a>
<span id="l20.104" class="plusline">+            permittedAlgs.put(algorithm, Boolean.TRUE);</span><a href="#l20.104"></a>
<span id="l20.105">         }</span><a href="#l20.105"></a>
<span id="l20.106"> </span><a href="#l20.106"></a>
<span id="l20.107">         Iterator&lt;Map.Entry&lt;String,Attributes&gt;&gt; entries =</span><a href="#l20.107"></a>
<span id="l20.108" class="atline">@@ -373,13 +354,14 @@</span><a href="#l20.108"></a>
<span id="l20.109">      * store the result. If the algorithm is in the map use that result.</span><a href="#l20.109"></a>
<span id="l20.110">      * False is returned for weak algorithm, true for good algorithms.</span><a href="#l20.110"></a>
<span id="l20.111">      */</span><a href="#l20.111"></a>
<span id="l20.112" class="minusline">-    boolean permittedCheck(String key, String algorithm) {</span><a href="#l20.112"></a>
<span id="l20.113" class="plusline">+    private boolean permittedCheck(String key, String algorithm) {</span><a href="#l20.113"></a>
<span id="l20.114">         Boolean permitted = permittedAlgs.get(algorithm);</span><a href="#l20.114"></a>
<span id="l20.115">         if (permitted == null) {</span><a href="#l20.115"></a>
<span id="l20.116">             try {</span><a href="#l20.116"></a>
<span id="l20.117" class="minusline">-                ConfigurationHolder.JAR_DISABLED_CHECK.permits(algorithm,</span><a href="#l20.117"></a>
<span id="l20.118" class="minusline">-                        new ConstraintsParameters(timestamp));</span><a href="#l20.118"></a>
<span id="l20.119" class="minusline">-            } catch(GeneralSecurityException e) {</span><a href="#l20.119"></a>
<span id="l20.120" class="plusline">+                params.setExtendedExceptionMsg(name + &quot;.SF&quot;, key + &quot; attribute&quot;);</span><a href="#l20.120"></a>
<span id="l20.121" class="plusline">+                DisabledAlgorithmConstraints</span><a href="#l20.121"></a>
<span id="l20.122" class="plusline">+                    .jarConstraints().permits(algorithm, params);</span><a href="#l20.122"></a>
<span id="l20.123" class="plusline">+            } catch (GeneralSecurityException e) {</span><a href="#l20.123"></a>
<span id="l20.124">                 permittedAlgs.put(algorithm, Boolean.FALSE);</span><a href="#l20.124"></a>
<span id="l20.125">                 permittedAlgs.put(key.toUpperCase(), Boolean.FALSE);</span><a href="#l20.125"></a>
<span id="l20.126">                 if (debug != null) {</span><a href="#l20.126"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l21.1" class="minusline">--- a/src/java.base/share/classes/sun/security/validator/PKIXValidator.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l21.1"></a>
<span id="l21.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/validator/PKIXValidator.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l21.2"></a>
<span id="l21.3" class="atline">@@ -224,7 +224,7 @@</span><a href="#l21.3"></a>
<span id="l21.4">         // add new algorithm constraints checker</span><a href="#l21.4"></a>
<span id="l21.5">         if (constraints != null) {</span><a href="#l21.5"></a>
<span id="l21.6">             pkixParameters.addCertPathChecker(</span><a href="#l21.6"></a>
<span id="l21.7" class="minusline">-                    new AlgorithmChecker(constraints, null, variant));</span><a href="#l21.7"></a>
<span id="l21.8" class="plusline">+                    new AlgorithmChecker(constraints, variant));</span><a href="#l21.8"></a>
<span id="l21.9">         }</span><a href="#l21.9"></a>
<span id="l21.10"> </span><a href="#l21.10"></a>
<span id="l21.11">         // attach it to the PKIXBuilderParameters.</span><a href="#l21.11"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l22.1" class="minusline">--- a/src/java.base/share/classes/sun/security/validator/SimpleValidator.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l22.1"></a>
<span id="l22.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/validator/SimpleValidator.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l22.2"></a>
<span id="l22.3" class="atline">@@ -162,7 +162,7 @@</span><a href="#l22.3"></a>
<span id="l22.4">         AlgorithmChecker appAlgChecker = null;</span><a href="#l22.4"></a>
<span id="l22.5">         if (constraints != null) {</span><a href="#l22.5"></a>
<span id="l22.6">             appAlgChecker = new AlgorithmChecker(anchor, constraints, null,</span><a href="#l22.6"></a>
<span id="l22.7" class="minusline">-                    null, variant);</span><a href="#l22.7"></a>
<span id="l22.8" class="plusline">+                    variant);</span><a href="#l22.8"></a>
<span id="l22.9">         }</span><a href="#l22.9"></a>
<span id="l22.10"> </span><a href="#l22.10"></a>
<span id="l22.11">         // verify top down, starting at the certificate issued by</span><a href="#l22.11"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l23.1" class="minusline">--- a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l23.1"></a>
<span id="l23.2" class="plusline">+++ b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l23.2"></a>
<span id="l23.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l23.3"></a>
<span id="l23.4"> /*</span><a href="#l23.4"></a>
<span id="l23.5" class="minusline">- * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.</span><a href="#l23.5"></a>
<span id="l23.6" class="plusline">+ * Copyright (c) 1996, 2021, Oracle and/or its affiliates. All rights reserved.</span><a href="#l23.6"></a>
<span id="l23.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l23.7"></a>
<span id="l23.8">  *</span><a href="#l23.8"></a>
<span id="l23.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l23.9"></a>
<span id="l23.10" class="atline">@@ -81,6 +81,7 @@</span><a href="#l23.10"></a>
<span id="l23.11">      */</span><a href="#l23.11"></a>
<span id="l23.12">     protected DerValue          params;</span><a href="#l23.12"></a>
<span id="l23.13"> </span><a href="#l23.13"></a>
<span id="l23.14" class="plusline">+    private transient byte[] encodedParams;</span><a href="#l23.14"></a>
<span id="l23.15"> </span><a href="#l23.15"></a>
<span id="l23.16">     /**</span><a href="#l23.16"></a>
<span id="l23.17">      * Constructs an algorithm ID which will be initialized</span><a href="#l23.17"></a>
<span id="l23.18" class="atline">@@ -109,6 +110,18 @@</span><a href="#l23.18"></a>
<span id="l23.19">         algid = oid;</span><a href="#l23.19"></a>
<span id="l23.20">         algParams = algparams;</span><a href="#l23.20"></a>
<span id="l23.21">         constructedFromDer = false;</span><a href="#l23.21"></a>
<span id="l23.22" class="plusline">+        if (algParams != null) {</span><a href="#l23.22"></a>
<span id="l23.23" class="plusline">+            try {</span><a href="#l23.23"></a>
<span id="l23.24" class="plusline">+                encodedParams = algParams.getEncoded();</span><a href="#l23.24"></a>
<span id="l23.25" class="plusline">+            } catch (IOException ioe) {</span><a href="#l23.25"></a>
<span id="l23.26" class="plusline">+                // It should be safe to ignore this.</span><a href="#l23.26"></a>
<span id="l23.27" class="plusline">+                // This exception can occur if AlgorithmParameters was not</span><a href="#l23.27"></a>
<span id="l23.28" class="plusline">+                // initialized (which should not occur), or if it was</span><a href="#l23.28"></a>
<span id="l23.29" class="plusline">+                // initialized with bogus parameters, which should have</span><a href="#l23.29"></a>
<span id="l23.30" class="plusline">+                // been detected when init was called.</span><a href="#l23.30"></a>
<span id="l23.31" class="plusline">+                assert false;</span><a href="#l23.31"></a>
<span id="l23.32" class="plusline">+            }</span><a href="#l23.32"></a>
<span id="l23.33" class="plusline">+        }</span><a href="#l23.33"></a>
<span id="l23.34">     }</span><a href="#l23.34"></a>
<span id="l23.35"> </span><a href="#l23.35"></a>
<span id="l23.36">     private AlgorithmId(ObjectIdentifier oid, DerValue params)</span><a href="#l23.36"></a>
<span id="l23.37" class="atline">@@ -116,6 +129,7 @@</span><a href="#l23.37"></a>
<span id="l23.38">         this.algid = oid;</span><a href="#l23.38"></a>
<span id="l23.39">         this.params = params;</span><a href="#l23.39"></a>
<span id="l23.40">         if (this.params != null) {</span><a href="#l23.40"></a>
<span id="l23.41" class="plusline">+            encodedParams = params.toByteArray();</span><a href="#l23.41"></a>
<span id="l23.42">             decodeParams();</span><a href="#l23.42"></a>
<span id="l23.43">         }</span><a href="#l23.43"></a>
<span id="l23.44">     }</span><a href="#l23.44"></a>
<span id="l23.45" class="atline">@@ -134,7 +148,7 @@</span><a href="#l23.45"></a>
<span id="l23.46">         }</span><a href="#l23.46"></a>
<span id="l23.47"> </span><a href="#l23.47"></a>
<span id="l23.48">         // Decode (parse) the parameters</span><a href="#l23.48"></a>
<span id="l23.49" class="minusline">-        algParams.init(params.toByteArray());</span><a href="#l23.49"></a>
<span id="l23.50" class="plusline">+        algParams.init(encodedParams.clone());</span><a href="#l23.50"></a>
<span id="l23.51">     }</span><a href="#l23.51"></a>
<span id="l23.52"> </span><a href="#l23.52"></a>
<span id="l23.53">     /**</span><a href="#l23.53"></a>
<span id="l23.54" class="atline">@@ -153,6 +167,7 @@</span><a href="#l23.54"></a>
<span id="l23.55">      *</span><a href="#l23.55"></a>
<span id="l23.56">      * @exception IOException on encoding error.</span><a href="#l23.56"></a>
<span id="l23.57">      */</span><a href="#l23.57"></a>
<span id="l23.58" class="plusline">+    @Override</span><a href="#l23.58"></a>
<span id="l23.59">     public void derEncode (OutputStream out) throws IOException {</span><a href="#l23.59"></a>
<span id="l23.60">         DerOutputStream bytes = new DerOutputStream();</span><a href="#l23.60"></a>
<span id="l23.61">         DerOutputStream tmp = new DerOutputStream();</span><a href="#l23.61"></a>
<span id="l23.62" class="atline">@@ -160,8 +175,8 @@</span><a href="#l23.62"></a>
<span id="l23.63">         bytes.putOID(algid);</span><a href="#l23.63"></a>
<span id="l23.64">         // Setup params from algParams since no DER encoding is given</span><a href="#l23.64"></a>
<span id="l23.65">         if (constructedFromDer == false) {</span><a href="#l23.65"></a>
<span id="l23.66" class="minusline">-            if (algParams != null) {</span><a href="#l23.66"></a>
<span id="l23.67" class="minusline">-                params = new DerValue(algParams.getEncoded());</span><a href="#l23.67"></a>
<span id="l23.68" class="plusline">+            if (encodedParams != null) {</span><a href="#l23.68"></a>
<span id="l23.69" class="plusline">+                params = new DerValue(encodedParams);</span><a href="#l23.69"></a>
<span id="l23.70">             } else {</span><a href="#l23.70"></a>
<span id="l23.71">                 params = null;</span><a href="#l23.71"></a>
<span id="l23.72">             }</span><a href="#l23.72"></a>
<span id="l23.73" class="atline">@@ -248,7 +263,7 @@</span><a href="#l23.73"></a>
<span id="l23.74">         if ((params != null) &amp;&amp; algid.equals((Object)specifiedWithECDSA_oid)) {</span><a href="#l23.74"></a>
<span id="l23.75">             try {</span><a href="#l23.75"></a>
<span id="l23.76">                 AlgorithmId paramsId =</span><a href="#l23.76"></a>
<span id="l23.77" class="minusline">-                        AlgorithmId.parse(new DerValue(params.toByteArray()));</span><a href="#l23.77"></a>
<span id="l23.78" class="plusline">+                        AlgorithmId.parse(new DerValue(encodedParams));</span><a href="#l23.78"></a>
<span id="l23.79">                 String paramsName = paramsId.getName();</span><a href="#l23.79"></a>
<span id="l23.80">                 algName = makeSigAlg(paramsName, &quot;EC&quot;);</span><a href="#l23.80"></a>
<span id="l23.81">             } catch (IOException e) {</span><a href="#l23.81"></a>
<span id="l23.82" class="atline">@@ -266,6 +281,10 @@</span><a href="#l23.82"></a>
<span id="l23.83">      * Returns the DER encoded parameter, which can then be</span><a href="#l23.83"></a>
<span id="l23.84">      * used to initialize java.security.AlgorithmParameters.</span><a href="#l23.84"></a>
<span id="l23.85">      *</span><a href="#l23.85"></a>
<span id="l23.86" class="plusline">+     * Note that this* method should always return a new array as it is called</span><a href="#l23.86"></a>
<span id="l23.87" class="plusline">+     * directly by the JDK implementation of X509Certificate.getSigAlgParams()</span><a href="#l23.87"></a>
<span id="l23.88" class="plusline">+     * and X509CRL.getSigAlgParams().</span><a href="#l23.88"></a>
<span id="l23.89" class="plusline">+     *</span><a href="#l23.89"></a>
<span id="l23.90">      * Note: for ecdsa-with-SHA2 plus hash algorithm (Ex: SHA-256), this method</span><a href="#l23.90"></a>
<span id="l23.91">      * returns null because {@link #getName()} has already returned the &quot;full&quot;</span><a href="#l23.91"></a>
<span id="l23.92">      * signature algorithm (Ex: SHA256withECDSA).</span><a href="#l23.92"></a>
<span id="l23.93" class="atline">@@ -273,9 +292,9 @@</span><a href="#l23.93"></a>
<span id="l23.94">      * @return DER encoded parameters, or null not present.</span><a href="#l23.94"></a>
<span id="l23.95">      */</span><a href="#l23.95"></a>
<span id="l23.96">     public byte[] getEncodedParams() throws IOException {</span><a href="#l23.96"></a>
<span id="l23.97" class="minusline">-        return (params == null || algid.equals(specifiedWithECDSA_oid))</span><a href="#l23.97"></a>
<span id="l23.98" class="plusline">+        return (encodedParams == null || algid.equals(specifiedWithECDSA_oid))</span><a href="#l23.98"></a>
<span id="l23.99">                 ? null</span><a href="#l23.99"></a>
<span id="l23.100" class="minusline">-                : params.toByteArray();</span><a href="#l23.100"></a>
<span id="l23.101" class="plusline">+                : encodedParams.clone();</span><a href="#l23.101"></a>
<span id="l23.102">     }</span><a href="#l23.102"></a>
<span id="l23.103"> </span><a href="#l23.103"></a>
<span id="l23.104">     /**</span><a href="#l23.104"></a>
<span id="l23.105" class="atline">@@ -283,9 +302,8 @@</span><a href="#l23.105"></a>
<span id="l23.106">      * with the same parameters.</span><a href="#l23.106"></a>
<span id="l23.107">      */</span><a href="#l23.107"></a>
<span id="l23.108">     public boolean equals(AlgorithmId other) {</span><a href="#l23.108"></a>
<span id="l23.109" class="minusline">-        boolean paramsEqual =</span><a href="#l23.109"></a>
<span id="l23.110" class="minusline">-          (params == null ? other.params == null : params.equals(other.params));</span><a href="#l23.110"></a>
<span id="l23.111" class="minusline">-        return (algid.equals((Object)other.algid) &amp;&amp; paramsEqual);</span><a href="#l23.111"></a>
<span id="l23.112" class="plusline">+        return algid.equals((Object)other.algid) &amp;&amp;</span><a href="#l23.112"></a>
<span id="l23.113" class="plusline">+            Arrays.equals(encodedParams, other.encodedParams);</span><a href="#l23.113"></a>
<span id="l23.114">     }</span><a href="#l23.114"></a>
<span id="l23.115"> </span><a href="#l23.115"></a>
<span id="l23.116">     /**</span><a href="#l23.116"></a>
<span id="l23.117" class="atline">@@ -295,6 +313,7 @@</span><a href="#l23.117"></a>
<span id="l23.118">      *</span><a href="#l23.118"></a>
<span id="l23.119">      * @param other preferably an AlgorithmId, else an ObjectIdentifier</span><a href="#l23.119"></a>
<span id="l23.120">      */</span><a href="#l23.120"></a>
<span id="l23.121" class="plusline">+    @Override</span><a href="#l23.121"></a>
<span id="l23.122">     public boolean equals(Object other) {</span><a href="#l23.122"></a>
<span id="l23.123">         if (this == other) {</span><a href="#l23.123"></a>
<span id="l23.124">             return true;</span><a href="#l23.124"></a>
<span id="l23.125" class="atline">@@ -321,11 +340,11 @@</span><a href="#l23.125"></a>
<span id="l23.126">      *</span><a href="#l23.126"></a>
<span id="l23.127">      * @return a hashcode for this AlgorithmId.</span><a href="#l23.127"></a>
<span id="l23.128">      */</span><a href="#l23.128"></a>
<span id="l23.129" class="plusline">+    @Override</span><a href="#l23.129"></a>
<span id="l23.130">     public int hashCode() {</span><a href="#l23.130"></a>
<span id="l23.131" class="minusline">-        StringBuilder sbuf = new StringBuilder();</span><a href="#l23.131"></a>
<span id="l23.132" class="minusline">-        sbuf.append(algid.toString());</span><a href="#l23.132"></a>
<span id="l23.133" class="minusline">-        sbuf.append(paramsToString());</span><a href="#l23.133"></a>
<span id="l23.134" class="minusline">-        return sbuf.toString().hashCode();</span><a href="#l23.134"></a>
<span id="l23.135" class="plusline">+        int hashCode = algid.hashCode();</span><a href="#l23.135"></a>
<span id="l23.136" class="plusline">+        hashCode = 31 * hashCode + Arrays.hashCode(encodedParams);</span><a href="#l23.136"></a>
<span id="l23.137" class="plusline">+        return hashCode;</span><a href="#l23.137"></a>
<span id="l23.138">     }</span><a href="#l23.138"></a>
<span id="l23.139"> </span><a href="#l23.139"></a>
<span id="l23.140">     /**</span><a href="#l23.140"></a>
<span id="l23.141" class="atline">@@ -333,10 +352,10 @@</span><a href="#l23.141"></a>
<span id="l23.142">      * This may be redefined by subclasses which parse those parameters.</span><a href="#l23.142"></a>
<span id="l23.143">      */</span><a href="#l23.143"></a>
<span id="l23.144">     protected String paramsToString() {</span><a href="#l23.144"></a>
<span id="l23.145" class="minusline">-        if (params == null) {</span><a href="#l23.145"></a>
<span id="l23.146" class="plusline">+        if (encodedParams == null) {</span><a href="#l23.146"></a>
<span id="l23.147">             return &quot;&quot;;</span><a href="#l23.147"></a>
<span id="l23.148">         } else if (algParams != null) {</span><a href="#l23.148"></a>
<span id="l23.149" class="minusline">-            return algParams.toString();</span><a href="#l23.149"></a>
<span id="l23.150" class="plusline">+            return &quot;, &quot; + algParams.toString();</span><a href="#l23.150"></a>
<span id="l23.151">         } else {</span><a href="#l23.151"></a>
<span id="l23.152">             return &quot;, params unparsed&quot;;</span><a href="#l23.152"></a>
<span id="l23.153">         }</span><a href="#l23.153"></a>
<span id="l23.154" class="atline">@@ -345,6 +364,7 @@</span><a href="#l23.154"></a>
<span id="l23.155">     /**</span><a href="#l23.155"></a>
<span id="l23.156">      * Returns a string describing the algorithm and its parameters.</span><a href="#l23.156"></a>
<span id="l23.157">      */</span><a href="#l23.157"></a>
<span id="l23.158" class="plusline">+    @Override</span><a href="#l23.158"></a>
<span id="l23.159">     public String toString() {</span><a href="#l23.159"></a>
<span id="l23.160">         return getName() + paramsToString();</span><a href="#l23.160"></a>
<span id="l23.161">     }</span><a href="#l23.161"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l24.1" class="minusline">--- /dev/null	Thu Jan 01 00:00:00 1970 +0000</span><a href="#l24.1"></a>
<span id="l24.2" class="plusline">+++ b/test/jdk/java/security/cert/X509Certificate/GetSigAlgParams.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l24.2"></a>
<span id="l24.3" class="atline">@@ -0,0 +1,47 @@</span><a href="#l24.3"></a>
<span id="l24.4" class="plusline">+/*</span><a href="#l24.4"></a>
<span id="l24.5" class="plusline">+ * Copyright (c) 2021, Oracle and/or its affiliates. All rights reserved.</span><a href="#l24.5"></a>
<span id="l24.6" class="plusline">+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l24.6"></a>
<span id="l24.7" class="plusline">+ *</span><a href="#l24.7"></a>
<span id="l24.8" class="plusline">+ * This code is free software; you can redistribute it and/or modify it</span><a href="#l24.8"></a>
<span id="l24.9" class="plusline">+ * under the terms of the GNU General Public License version 2 only, as</span><a href="#l24.9"></a>
<span id="l24.10" class="plusline">+ * published by the Free Software Foundation.</span><a href="#l24.10"></a>
<span id="l24.11" class="plusline">+ *</span><a href="#l24.11"></a>
<span id="l24.12" class="plusline">+ * This code is distributed in the hope that it will be useful, but WITHOUT</span><a href="#l24.12"></a>
<span id="l24.13" class="plusline">+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span><a href="#l24.13"></a>
<span id="l24.14" class="plusline">+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span><a href="#l24.14"></a>
<span id="l24.15" class="plusline">+ * version 2 for more details (a copy is included in the LICENSE file that</span><a href="#l24.15"></a>
<span id="l24.16" class="plusline">+ * accompanied this code).</span><a href="#l24.16"></a>
<span id="l24.17" class="plusline">+ *</span><a href="#l24.17"></a>
<span id="l24.18" class="plusline">+ * You should have received a copy of the GNU General Public License version</span><a href="#l24.18"></a>
<span id="l24.19" class="plusline">+ * 2 along with this work; if not, write to the Free Software Foundation,</span><a href="#l24.19"></a>
<span id="l24.20" class="plusline">+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span><a href="#l24.20"></a>
<span id="l24.21" class="plusline">+ *</span><a href="#l24.21"></a>
<span id="l24.22" class="plusline">+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span><a href="#l24.22"></a>
<span id="l24.23" class="plusline">+ * or visit www.oracle.com if you need additional information or have any</span><a href="#l24.23"></a>
<span id="l24.24" class="plusline">+ * questions.</span><a href="#l24.24"></a>
<span id="l24.25" class="plusline">+ */</span><a href="#l24.25"></a>
<span id="l24.26" class="plusline">+</span><a href="#l24.26"></a>
<span id="l24.27" class="plusline">+/*</span><a href="#l24.27"></a>
<span id="l24.28" class="plusline">+ * @test</span><a href="#l24.28"></a>
<span id="l24.29" class="plusline">+ * @bug 8259428</span><a href="#l24.29"></a>
<span id="l24.30" class="plusline">+ * @summary Verify X509Certificate.getSigAlgParams() returns new array each</span><a href="#l24.30"></a>
<span id="l24.31" class="plusline">+ *          time it is called</span><a href="#l24.31"></a>
<span id="l24.32" class="plusline">+ * @modules java.base/sun.security.tools.keytool java.base/sun.security.x509</span><a href="#l24.32"></a>
<span id="l24.33" class="plusline">+ */</span><a href="#l24.33"></a>
<span id="l24.34" class="plusline">+</span><a href="#l24.34"></a>
<span id="l24.35" class="plusline">+import java.security.cert.X509Certificate;</span><a href="#l24.35"></a>
<span id="l24.36" class="plusline">+import sun.security.tools.keytool.CertAndKeyGen;</span><a href="#l24.36"></a>
<span id="l24.37" class="plusline">+import sun.security.x509.X500Name;</span><a href="#l24.37"></a>
<span id="l24.38" class="plusline">+</span><a href="#l24.38"></a>
<span id="l24.39" class="plusline">+public class GetSigAlgParams {</span><a href="#l24.39"></a>
<span id="l24.40" class="plusline">+</span><a href="#l24.40"></a>
<span id="l24.41" class="plusline">+    public static void main(String[] args) throws Exception {</span><a href="#l24.41"></a>
<span id="l24.42" class="plusline">+</span><a href="#l24.42"></a>
<span id="l24.43" class="plusline">+        CertAndKeyGen cakg = new CertAndKeyGen(&quot;RSASSA-PSS&quot;, &quot;RSASSA-PSS&quot;);</span><a href="#l24.43"></a>
<span id="l24.44" class="plusline">+        cakg.generate(1024);</span><a href="#l24.44"></a>
<span id="l24.45" class="plusline">+        X509Certificate c = cakg.getSelfCertificate(new X500Name(&quot;CN=Me&quot;), 100);</span><a href="#l24.45"></a>
<span id="l24.46" class="plusline">+        if (c.getSigAlgParams() == c.getSigAlgParams()) {</span><a href="#l24.46"></a>
<span id="l24.47" class="plusline">+            throw new Exception(&quot;Encoded params are the same byte array&quot;);</span><a href="#l24.47"></a>
<span id="l24.48" class="plusline">+        }</span><a href="#l24.48"></a>
<span id="l24.49" class="plusline">+    }</span><a href="#l24.49"></a>
<span id="l24.50" class="plusline">+}</span><a href="#l24.50"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l25.1" class="minusline">--- a/test/jdk/sun/security/pkcs/pkcs8/PKCS8Test.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l25.1"></a>
<span id="l25.2" class="plusline">+++ b/test/jdk/sun/security/pkcs/pkcs8/PKCS8Test.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l25.2"></a>
<span id="l25.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l25.3"></a>
<span id="l25.4"> /*</span><a href="#l25.4"></a>
<span id="l25.5" class="minusline">- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.</span><a href="#l25.5"></a>
<span id="l25.6" class="plusline">+ * Copyright (c) 2015, 2021, Oracle and/or its affiliates. All rights reserved.</span><a href="#l25.6"></a>
<span id="l25.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l25.7"></a>
<span id="l25.8">  *</span><a href="#l25.8"></a>
<span id="l25.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l25.9"></a>
<span id="l25.10" class="atline">@@ -57,7 +57,7 @@</span><a href="#l25.10"></a>
<span id="l25.11">     static final DerOutputStream derOutput = new DerOutputStream();</span><a href="#l25.11"></a>
<span id="l25.12"> </span><a href="#l25.12"></a>
<span id="l25.13">     static final String FORMAT = &quot;PKCS#8&quot;;</span><a href="#l25.13"></a>
<span id="l25.14" class="minusline">-    static final String EXPECTED_ALG_ID_CHRS = &quot;DSA\n\tp:     02\n\tq:     03\n&quot;</span><a href="#l25.14"></a>
<span id="l25.15" class="plusline">+    static final String EXPECTED_ALG_ID_CHRS = &quot;DSA, \n\tp:     02\n\tq:     03\n&quot;</span><a href="#l25.15"></a>
<span id="l25.16">             + &quot;\tg:     04\n&quot;;</span><a href="#l25.16"></a>
<span id="l25.17">     static final String ALGORITHM = &quot;DSA&quot;;</span><a href="#l25.17"></a>
<span id="l25.18">     static final String EXCEPTION_MESSAGE = &quot;version mismatch: (supported:     &quot;</span><a href="#l25.18"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l26.1" class="minusline">--- a/test/jdk/sun/security/tools/jarsigner/TimestampCheck.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l26.1"></a>
<span id="l26.2" class="plusline">+++ b/test/jdk/sun/security/tools/jarsigner/TimestampCheck.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l26.2"></a>
<span id="l26.3" class="atline">@@ -317,7 +317,7 @@</span><a href="#l26.3"></a>
<span id="l26.4">                 sign(&quot;tsdisabled&quot;, &quot;-digestalg&quot;, &quot;MD5&quot;,</span><a href="#l26.4"></a>
<span id="l26.5">                                 &quot;-sigalg&quot;, &quot;MD5withRSA&quot;, &quot;-tsadigestalg&quot;, &quot;MD5&quot;)</span><a href="#l26.5"></a>
<span id="l26.6">                         .shouldHaveExitValue(68)</span><a href="#l26.6"></a>
<span id="l26.7" class="minusline">-                        .shouldContain(&quot;The timestamp is invalid. Without a valid timestamp&quot;)</span><a href="#l26.7"></a>
<span id="l26.8" class="plusline">+                        .shouldContain(&quot;TSA certificate chain is invalid&quot;)</span><a href="#l26.8"></a>
<span id="l26.9">                         .shouldMatch(&quot;MD5.*-digestalg.*is disabled&quot;)</span><a href="#l26.9"></a>
<span id="l26.10">                         .shouldMatch(&quot;MD5.*-tsadigestalg.*is disabled&quot;)</span><a href="#l26.10"></a>
<span id="l26.11">                         .shouldMatch(&quot;MD5withRSA.*-sigalg.*is disabled&quot;);</span><a href="#l26.11"></a>
<span id="l26.12" class="atline">@@ -325,7 +325,6 @@</span><a href="#l26.12"></a>
<span id="l26.13"> </span><a href="#l26.13"></a>
<span id="l26.14">                 signVerbose(&quot;tsdisabled&quot;, &quot;unsigned.jar&quot;, &quot;tsdisabled2.jar&quot;, &quot;signer&quot;)</span><a href="#l26.14"></a>
<span id="l26.15">                         .shouldHaveExitValue(64)</span><a href="#l26.15"></a>
<span id="l26.16" class="minusline">-                        .shouldContain(&quot;The timestamp is invalid. Without a valid timestamp&quot;)</span><a href="#l26.16"></a>
<span id="l26.17">                         .shouldContain(&quot;TSA certificate chain is invalid&quot;);</span><a href="#l26.17"></a>
<span id="l26.18"> </span><a href="#l26.18"></a>
<span id="l26.19">                 // Disabled timestamp is an error and jar treated unsigned</span><a href="#l26.19"></a>
<span id="l26.20" class="atline">@@ -637,7 +636,7 @@</span><a href="#l26.20"></a>
<span id="l26.21">                 .shouldMatch(&quot;Timestamp signature algorithm: .*key.*(disabled)&quot;);</span><a href="#l26.21"></a>
<span id="l26.22">         verify(file, &quot;-J-Djava.security.debug=jar&quot;)</span><a href="#l26.22"></a>
<span id="l26.23">                 .shouldHaveExitValue(16)</span><a href="#l26.23"></a>
<span id="l26.24" class="minusline">-                .shouldMatch(&quot;SignatureException:.*disabled&quot;);</span><a href="#l26.24"></a>
<span id="l26.25" class="plusline">+                .shouldMatch(&quot;SignatureException:.*keysize&quot;);</span><a href="#l26.25"></a>
<span id="l26.26"> </span><a href="#l26.26"></a>
<span id="l26.27">         // For 8171319: keytool should print out warnings when reading or</span><a href="#l26.27"></a>
<span id="l26.28">         //              generating cert/cert req using disabled algorithms.</span><a href="#l26.28"></a></pre></div><div class="bottomline inc-lineno"><pre class="sourcelines wrap">
<span id="l27.1" class="minusline">--- a/test/jdk/sun/security/x509/AlgorithmId/AlgorithmIdEqualsHashCode.java	Thu Feb 18 17:34:20 2021 +0000</span><a href="#l27.1"></a>
<span id="l27.2" class="plusline">+++ b/test/jdk/sun/security/x509/AlgorithmId/AlgorithmIdEqualsHashCode.java	Tue Mar 02 17:14:31 2021 +0300</span><a href="#l27.2"></a>
<span id="l27.3" class="atline">@@ -1,5 +1,5 @@</span><a href="#l27.3"></a>
<span id="l27.4"> /*</span><a href="#l27.4"></a>
<span id="l27.5" class="minusline">- * Copyright (c) 1999, 2005, Oracle and/or its affiliates. All rights reserved.</span><a href="#l27.5"></a>
<span id="l27.6" class="plusline">+ * Copyright (c) 1999, 2021, Oracle and/or its affiliates. All rights reserved.</span><a href="#l27.6"></a>
<span id="l27.7">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><a href="#l27.7"></a>
<span id="l27.8">  *</span><a href="#l27.8"></a>
<span id="l27.9">  * This code is free software; you can redistribute it and/or modify it</span><a href="#l27.9"></a>
<span id="l27.10" class="atline">@@ -24,13 +24,17 @@</span><a href="#l27.10"></a>
<span id="l27.11"> /*</span><a href="#l27.11"></a>
<span id="l27.12">  * @test</span><a href="#l27.12"></a>
<span id="l27.13">  * @author Gary Ellison</span><a href="#l27.13"></a>
<span id="l27.14" class="minusline">- * @bug 4170635</span><a href="#l27.14"></a>
<span id="l27.15" class="plusline">+ * @bug 4170635 8258247</span><a href="#l27.15"></a>
<span id="l27.16">  * @summary Verify equals()/hashCode() contract honored</span><a href="#l27.16"></a>
<span id="l27.17" class="minusline">- * @modules java.base/sun.security.x509</span><a href="#l27.17"></a>
<span id="l27.18" class="plusline">+ * @modules java.base/sun.security.x509 java.base/sun.security.util</span><a href="#l27.18"></a>
<span id="l27.19">  */</span><a href="#l27.19"></a>
<span id="l27.20"> </span><a href="#l27.20"></a>
<span id="l27.21"> import java.io.*;</span><a href="#l27.21"></a>
<span id="l27.22" class="plusline">+import java.security.AlgorithmParameters;</span><a href="#l27.22"></a>
<span id="l27.23" class="plusline">+import java.security.spec.MGF1ParameterSpec;</span><a href="#l27.23"></a>
<span id="l27.24" class="plusline">+import java.security.spec.PSSParameterSpec;</span><a href="#l27.24"></a>
<span id="l27.25"> </span><a href="#l27.25"></a>
<span id="l27.26" class="plusline">+import sun.security.util.DerValue;</span><a href="#l27.26"></a>
<span id="l27.27"> import sun.security.x509.*;</span><a href="#l27.27"></a>
<span id="l27.28"> </span><a href="#l27.28"></a>
<span id="l27.29"> public class AlgorithmIdEqualsHashCode {</span><a href="#l27.29"></a>
<span id="l27.30" class="atline">@@ -41,7 +45,6 @@</span><a href="#l27.30"></a>
<span id="l27.31">         AlgorithmId ai2 = AlgorithmId.get(&quot;DH&quot;);</span><a href="#l27.31"></a>
<span id="l27.32">         AlgorithmId ai3 = AlgorithmId.get(&quot;DH&quot;);</span><a href="#l27.32"></a>
<span id="l27.33"> </span><a href="#l27.33"></a>
<span id="l27.34" class="minusline">-</span><a href="#l27.34"></a>
<span id="l27.35">         // supposedly transitivity is broken</span><a href="#l27.35"></a>
<span id="l27.36">         // System.out.println(ai1.equals(ai2));</span><a href="#l27.36"></a>
<span id="l27.37">         // System.out.println(ai2.equals(ai3));</span><a href="#l27.37"></a>
<span id="l27.38" class="atline">@@ -57,5 +60,42 @@</span><a href="#l27.38"></a>
<span id="l27.39">         else</span><a href="#l27.39"></a>
<span id="l27.40">             throw new Exception(&quot;Failed equals()/hashCode() contract&quot;);</span><a href="#l27.40"></a>
<span id="l27.41"> </span><a href="#l27.41"></a>
<span id="l27.42" class="plusline">+        // check that AlgorithmIds with same name but different params</span><a href="#l27.42"></a>
<span id="l27.43" class="plusline">+        // are not equal</span><a href="#l27.43"></a>
<span id="l27.44" class="plusline">+        AlgorithmParameters algParams1 =</span><a href="#l27.44"></a>
<span id="l27.45" class="plusline">+            AlgorithmParameters.getInstance(&quot;RSASSA-PSS&quot;);</span><a href="#l27.45"></a>
<span id="l27.46" class="plusline">+        AlgorithmParameters algParams2 =</span><a href="#l27.46"></a>
<span id="l27.47" class="plusline">+            AlgorithmParameters.getInstance(&quot;RSASSA-PSS&quot;);</span><a href="#l27.47"></a>
<span id="l27.48" class="plusline">+        algParams1.init(new PSSParameterSpec(&quot;SHA-1&quot;, &quot;MGF1&quot;,</span><a href="#l27.48"></a>
<span id="l27.49" class="plusline">+            MGF1ParameterSpec.SHA1, 20, PSSParameterSpec.TRAILER_FIELD_BC));</span><a href="#l27.49"></a>
<span id="l27.50" class="plusline">+        algParams2.init(new PSSParameterSpec(&quot;SHA-256&quot;, &quot;MGF1&quot;,</span><a href="#l27.50"></a>
<span id="l27.51" class="plusline">+            MGF1ParameterSpec.SHA1, 20, PSSParameterSpec.TRAILER_FIELD_BC));</span><a href="#l27.51"></a>
<span id="l27.52" class="plusline">+        ai1 = new AlgorithmId(AlgorithmId.RSASSA_PSS_oid, algParams1);</span><a href="#l27.52"></a>
<span id="l27.53" class="plusline">+        ai2 = new AlgorithmId(AlgorithmId.RSASSA_PSS_oid, algParams2);</span><a href="#l27.53"></a>
<span id="l27.54" class="plusline">+        if (ai1.equals(ai2)) {</span><a href="#l27.54"></a>
<span id="l27.55" class="plusline">+            throw new Exception(&quot;Failed equals() contract&quot;);</span><a href="#l27.55"></a>
<span id="l27.56" class="plusline">+        } else {</span><a href="#l27.56"></a>
<span id="l27.57" class="plusline">+            System.out.println(&quot;PASSED equals() test&quot;);</span><a href="#l27.57"></a>
<span id="l27.58" class="plusline">+        }</span><a href="#l27.58"></a>
<span id="l27.59" class="plusline">+</span><a href="#l27.59"></a>
<span id="l27.60" class="plusline">+        // check that two AlgorithmIds created with the same parameters but</span><a href="#l27.60"></a>
<span id="l27.61" class="plusline">+        // one with DER encoded parameters and the other with</span><a href="#l27.61"></a>
<span id="l27.62" class="plusline">+        // AlgorithmParameters are equal</span><a href="#l27.62"></a>
<span id="l27.63" class="plusline">+        byte[] encoded = ai1.encode();</span><a href="#l27.63"></a>
<span id="l27.64" class="plusline">+        ai3 = AlgorithmId.parse(new DerValue(encoded));</span><a href="#l27.64"></a>
<span id="l27.65" class="plusline">+        if (!ai1.equals(ai3)) {</span><a href="#l27.65"></a>
<span id="l27.66" class="plusline">+            throw new Exception(&quot;Failed equals() contract&quot;);</span><a href="#l27.66"></a>
<span id="l27.67" class="plusline">+        } else {</span><a href="#l27.67"></a>
<span id="l27.68" class="plusline">+            System.out.println(&quot;PASSED equals() test&quot;);</span><a href="#l27.68"></a>
<span id="l27.69" class="plusline">+        }</span><a href="#l27.69"></a>
<span id="l27.70" class="plusline">+</span><a href="#l27.70"></a>
<span id="l27.71" class="plusline">+        // check that two AlgorithmIds created with different parameters but</span><a href="#l27.71"></a>
<span id="l27.72" class="plusline">+        // one with DER encoded parameters and the other with</span><a href="#l27.72"></a>
<span id="l27.73" class="plusline">+        // AlgorithmParameters are not equal</span><a href="#l27.73"></a>
<span id="l27.74" class="plusline">+        if (ai2.equals(ai3)) {</span><a href="#l27.74"></a>
<span id="l27.75" class="plusline">+            throw new Exception(&quot;Failed equals() contract&quot;);</span><a href="#l27.75"></a>
<span id="l27.76" class="plusline">+        } else {</span><a href="#l27.76"></a>
<span id="l27.77" class="plusline">+            System.out.println(&quot;PASSED equals() test&quot;);</span><a href="#l27.77"></a>
<span id="l27.78" class="plusline">+        }</span><a href="#l27.78"></a>
<span id="l27.79">     }</span><a href="#l27.79"></a>
<span id="l27.80"> }</span><a href="#l27.80"></a></pre></div>
</div>
</div>

</div>
</div>


<div class="container"><div class="main footer">
&copy 2007, <script>document.write(new Date().getFullYear())</script> Oracle and/or its affiliates<br/>
<a href="http://openjdk.java.net/legal/tou/">Terms of Use</a>
&#183; <a href="http://www.oracle.com/us/legal/privacy/">Privacy</a>
&#183; <a href="https://openjdk.java.net/legal/openjdk-trademark-notice.html">Trademarks</a>
</div></div>

</body>
</html>

